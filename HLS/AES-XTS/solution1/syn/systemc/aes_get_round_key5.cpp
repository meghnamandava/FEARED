// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_get_round_key5.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_get_round_key5::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_get_round_key5::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> aes_get_round_key5::ap_ST_fsm_state1 = "1";
const sc_lv<4> aes_get_round_key5::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<4> aes_get_round_key5::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<4> aes_get_round_key5::ap_ST_fsm_state5 = "1000";
const bool aes_get_round_key5::ap_const_boolean_1 = true;
const sc_lv<32> aes_get_round_key5::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes_get_round_key5::ap_const_lv32_1 = "1";
const bool aes_get_round_key5::ap_const_boolean_0 = false;
const sc_lv<1> aes_get_round_key5::ap_const_lv1_0 = "0";
const sc_lv<32> aes_get_round_key5::ap_const_lv32_2 = "10";
const sc_lv<1> aes_get_round_key5::ap_const_lv1_1 = "1";
const sc_lv<3> aes_get_round_key5::ap_const_lv3_0 = "000";
const sc_lv<2> aes_get_round_key5::ap_const_lv2_0 = "00";
const sc_lv<9> aes_get_round_key5::ap_const_lv9_1 = "1";
const sc_lv<9> aes_get_round_key5::ap_const_lv9_2 = "10";
const sc_lv<9> aes_get_round_key5::ap_const_lv9_3 = "11";
const sc_lv<3> aes_get_round_key5::ap_const_lv3_4 = "100";
const sc_lv<3> aes_get_round_key5::ap_const_lv3_1 = "1";
const sc_lv<6> aes_get_round_key5::ap_const_lv6_0 = "000000";
const sc_lv<5> aes_get_round_key5::ap_const_lv5_1 = "1";
const sc_lv<59> aes_get_round_key5::ap_const_lv59_0 = "00000000000000000000000000000000000000000000000000000000000";
const sc_lv<5> aes_get_round_key5::ap_const_lv5_2 = "10";
const sc_lv<5> aes_get_round_key5::ap_const_lv5_3 = "11";
const sc_lv<32> aes_get_round_key5::ap_const_lv32_3 = "11";

aes_get_round_key5::aes_get_round_key5(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln180_6_fu_239_p2);
    sensitive << ( or_ln1353_reg_318 );
    sensitive << ( sub_ln180_fu_223_p2 );

    SC_METHOD(thread_add_ln180_7_fu_253_p2);
    sensitive << ( or_ln1353_1_reg_323 );
    sensitive << ( sub_ln180_reg_350 );

    SC_METHOD(thread_add_ln180_8_fu_262_p2);
    sensitive << ( or_ln1353_2_reg_328 );
    sensitive << ( sub_ln180_reg_350 );

    SC_METHOD(thread_add_ln180_fu_229_p2);
    sensitive << ( key_column_index_V_reg_313 );
    sensitive << ( sub_ln180_fu_223_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln138_fu_191_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_158_p4);
    sensitive << ( i_0_reg_154 );
    sensitive << ( icmp_ln138_reg_333 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_337 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_expanded_key_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln180_fu_234_p1 );
    sensitive << ( sext_ln180_2_fu_257_p1 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_expanded_key_V_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln180_1_fu_244_p1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( sext_ln180_3_fu_266_p1 );

    SC_METHOD(thread_expanded_key_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_expanded_key_V_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_i_fu_197_p2);
    sensitive << ( ap_phi_mux_i_0_phi_fu_158_p4 );

    SC_METHOD(thread_icmp_ln138_fu_191_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_i_0_phi_fu_158_p4 );

    SC_METHOD(thread_key_column_index_V_fu_165_p3);
    sensitive << ( round );

    SC_METHOD(thread_or_ln1353_1_fu_179_p2);
    sensitive << ( key_column_index_V_fu_165_p3 );

    SC_METHOD(thread_or_ln1353_2_fu_185_p2);
    sensitive << ( key_column_index_V_fu_165_p3 );

    SC_METHOD(thread_or_ln1353_fu_173_p2);
    sensitive << ( key_column_index_V_fu_165_p3 );

    SC_METHOD(thread_or_ln180_3_fu_285_p2);
    sensitive << ( tmp_17_reg_342 );

    SC_METHOD(thread_or_ln180_4_fu_299_p2);
    sensitive << ( tmp_17_reg_342 );

    SC_METHOD(thread_or_ln180_fu_271_p2);
    sensitive << ( tmp_17_reg_342 );

    SC_METHOD(thread_round_key_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( zext_ln180_8_fu_249_p1 );
    sensitive << ( tmp_19_fu_290_p3 );

    SC_METHOD(thread_round_key_V_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( tmp_18_fu_276_p3 );
    sensitive << ( tmp_20_fu_304_p3 );

    SC_METHOD(thread_round_key_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_round_key_V_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_round_key_V_d0);
    sensitive << ( expanded_key_V_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_round_key_V_d1);
    sensitive << ( expanded_key_V_q1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_round_key_V_we0);
    sensitive << ( icmp_ln138_reg_333 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_round_key_V_we1);
    sensitive << ( icmp_ln138_reg_333 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_sext_ln180_1_fu_244_p1);
    sensitive << ( add_ln180_6_fu_239_p2 );

    SC_METHOD(thread_sext_ln180_2_fu_257_p1);
    sensitive << ( add_ln180_7_fu_253_p2 );

    SC_METHOD(thread_sext_ln180_3_fu_266_p1);
    sensitive << ( add_ln180_8_fu_262_p2 );

    SC_METHOD(thread_sext_ln180_fu_234_p1);
    sensitive << ( add_ln180_fu_229_p2 );

    SC_METHOD(thread_sub_ln180_fu_223_p2);
    sensitive << ( tmp_s_fu_203_p3 );
    sensitive << ( zext_ln180_fu_219_p1 );

    SC_METHOD(thread_tmp_17_fu_211_p3);
    sensitive << ( ap_phi_mux_i_0_phi_fu_158_p4 );

    SC_METHOD(thread_tmp_18_fu_276_p3);
    sensitive << ( or_ln180_fu_271_p2 );

    SC_METHOD(thread_tmp_19_fu_290_p3);
    sensitive << ( or_ln180_3_fu_285_p2 );

    SC_METHOD(thread_tmp_20_fu_304_p3);
    sensitive << ( or_ln180_4_fu_299_p2 );

    SC_METHOD(thread_tmp_s_fu_203_p3);
    sensitive << ( ap_phi_mux_i_0_phi_fu_158_p4 );

    SC_METHOD(thread_zext_ln180_8_fu_249_p1);
    sensitive << ( tmp_17_reg_342 );

    SC_METHOD(thread_zext_ln180_fu_219_p1);
    sensitive << ( tmp_17_fu_211_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln138_fu_191_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );

    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_get_round_key5_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, round, "(port)round");
    sc_trace(mVcdFile, expanded_key_V_address0, "(port)expanded_key_V_address0");
    sc_trace(mVcdFile, expanded_key_V_ce0, "(port)expanded_key_V_ce0");
    sc_trace(mVcdFile, expanded_key_V_q0, "(port)expanded_key_V_q0");
    sc_trace(mVcdFile, expanded_key_V_address1, "(port)expanded_key_V_address1");
    sc_trace(mVcdFile, expanded_key_V_ce1, "(port)expanded_key_V_ce1");
    sc_trace(mVcdFile, expanded_key_V_q1, "(port)expanded_key_V_q1");
    sc_trace(mVcdFile, round_key_V_address0, "(port)round_key_V_address0");
    sc_trace(mVcdFile, round_key_V_ce0, "(port)round_key_V_ce0");
    sc_trace(mVcdFile, round_key_V_we0, "(port)round_key_V_we0");
    sc_trace(mVcdFile, round_key_V_d0, "(port)round_key_V_d0");
    sc_trace(mVcdFile, round_key_V_address1, "(port)round_key_V_address1");
    sc_trace(mVcdFile, round_key_V_ce1, "(port)round_key_V_ce1");
    sc_trace(mVcdFile, round_key_V_we1, "(port)round_key_V_we1");
    sc_trace(mVcdFile, round_key_V_d1, "(port)round_key_V_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_0_reg_154, "i_0_reg_154");
    sc_trace(mVcdFile, key_column_index_V_fu_165_p3, "key_column_index_V_fu_165_p3");
    sc_trace(mVcdFile, key_column_index_V_reg_313, "key_column_index_V_reg_313");
    sc_trace(mVcdFile, or_ln1353_fu_173_p2, "or_ln1353_fu_173_p2");
    sc_trace(mVcdFile, or_ln1353_reg_318, "or_ln1353_reg_318");
    sc_trace(mVcdFile, or_ln1353_1_fu_179_p2, "or_ln1353_1_fu_179_p2");
    sc_trace(mVcdFile, or_ln1353_1_reg_323, "or_ln1353_1_reg_323");
    sc_trace(mVcdFile, or_ln1353_2_fu_185_p2, "or_ln1353_2_fu_185_p2");
    sc_trace(mVcdFile, or_ln1353_2_reg_328, "or_ln1353_2_reg_328");
    sc_trace(mVcdFile, icmp_ln138_fu_191_p2, "icmp_ln138_fu_191_p2");
    sc_trace(mVcdFile, icmp_ln138_reg_333, "icmp_ln138_reg_333");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_197_p2, "i_fu_197_p2");
    sc_trace(mVcdFile, i_reg_337, "i_reg_337");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_17_fu_211_p3, "tmp_17_fu_211_p3");
    sc_trace(mVcdFile, tmp_17_reg_342, "tmp_17_reg_342");
    sc_trace(mVcdFile, sub_ln180_fu_223_p2, "sub_ln180_fu_223_p2");
    sc_trace(mVcdFile, sub_ln180_reg_350, "sub_ln180_reg_350");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage1_iter0, "ap_block_state3_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_158_p4, "ap_phi_mux_i_0_phi_fu_158_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, sext_ln180_fu_234_p1, "sext_ln180_fu_234_p1");
    sc_trace(mVcdFile, sext_ln180_1_fu_244_p1, "sext_ln180_1_fu_244_p1");
    sc_trace(mVcdFile, sext_ln180_2_fu_257_p1, "sext_ln180_2_fu_257_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, sext_ln180_3_fu_266_p1, "sext_ln180_3_fu_266_p1");
    sc_trace(mVcdFile, zext_ln180_8_fu_249_p1, "zext_ln180_8_fu_249_p1");
    sc_trace(mVcdFile, tmp_18_fu_276_p3, "tmp_18_fu_276_p3");
    sc_trace(mVcdFile, tmp_19_fu_290_p3, "tmp_19_fu_290_p3");
    sc_trace(mVcdFile, tmp_20_fu_304_p3, "tmp_20_fu_304_p3");
    sc_trace(mVcdFile, tmp_s_fu_203_p3, "tmp_s_fu_203_p3");
    sc_trace(mVcdFile, zext_ln180_fu_219_p1, "zext_ln180_fu_219_p1");
    sc_trace(mVcdFile, add_ln180_fu_229_p2, "add_ln180_fu_229_p2");
    sc_trace(mVcdFile, add_ln180_6_fu_239_p2, "add_ln180_6_fu_239_p2");
    sc_trace(mVcdFile, add_ln180_7_fu_253_p2, "add_ln180_7_fu_253_p2");
    sc_trace(mVcdFile, add_ln180_8_fu_262_p2, "add_ln180_8_fu_262_p2");
    sc_trace(mVcdFile, or_ln180_fu_271_p2, "or_ln180_fu_271_p2");
    sc_trace(mVcdFile, or_ln180_3_fu_285_p2, "or_ln180_3_fu_285_p2");
    sc_trace(mVcdFile, or_ln180_4_fu_299_p2, "or_ln180_4_fu_299_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

aes_get_round_key5::~aes_get_round_key5() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void aes_get_round_key5::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln138_reg_333.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_0_reg_154 = i_reg_337.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_154 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_reg_337 = i_fu_197_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln138_reg_333 = icmp_ln138_fu_191_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        key_column_index_V_reg_313 = key_column_index_V_fu_165_p3.read();
        or_ln1353_1_reg_323 = or_ln1353_1_fu_179_p2.read();
        or_ln1353_2_reg_328 = or_ln1353_2_fu_185_p2.read();
        or_ln1353_reg_318 = or_ln1353_fu_173_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln138_fu_191_p2.read(), ap_const_lv1_0))) {
        sub_ln180_reg_350 = sub_ln180_fu_223_p2.read();
        tmp_17_reg_342 = tmp_17_fu_211_p3.read();
    }
}

void aes_get_round_key5::thread_add_ln180_6_fu_239_p2() {
    add_ln180_6_fu_239_p2 = (!or_ln1353_reg_318.read().is_01() || !sub_ln180_fu_223_p2.read().is_01())? sc_lv<9>(): (sc_biguint<9>(or_ln1353_reg_318.read()) + sc_biguint<9>(sub_ln180_fu_223_p2.read()));
}

void aes_get_round_key5::thread_add_ln180_7_fu_253_p2() {
    add_ln180_7_fu_253_p2 = (!or_ln1353_1_reg_323.read().is_01() || !sub_ln180_reg_350.read().is_01())? sc_lv<9>(): (sc_biguint<9>(or_ln1353_1_reg_323.read()) + sc_biguint<9>(sub_ln180_reg_350.read()));
}

void aes_get_round_key5::thread_add_ln180_8_fu_262_p2() {
    add_ln180_8_fu_262_p2 = (!or_ln1353_2_reg_328.read().is_01() || !sub_ln180_reg_350.read().is_01())? sc_lv<9>(): (sc_biguint<9>(or_ln1353_2_reg_328.read()) + sc_biguint<9>(sub_ln180_reg_350.read()));
}

void aes_get_round_key5::thread_add_ln180_fu_229_p2() {
    add_ln180_fu_229_p2 = (!key_column_index_V_reg_313.read().is_01() || !sub_ln180_fu_223_p2.read().is_01())? sc_lv<9>(): (sc_biguint<9>(key_column_index_V_reg_313.read()) + sc_biguint<9>(sub_ln180_fu_223_p2.read()));
}

void aes_get_round_key5::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void aes_get_round_key5::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void aes_get_round_key5::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes_get_round_key5::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void aes_get_round_key5::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes_get_round_key5::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes_get_round_key5::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes_get_round_key5::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes_get_round_key5::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes_get_round_key5::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes_get_round_key5::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes_get_round_key5::thread_ap_block_state3_pp0_stage1_iter0() {
    ap_block_state3_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes_get_round_key5::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes_get_round_key5::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln138_fu_191_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void aes_get_round_key5::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_get_round_key5::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void aes_get_round_key5::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_get_round_key5::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void aes_get_round_key5::thread_ap_phi_mux_i_0_phi_fu_158_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln138_reg_333.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_0_phi_fu_158_p4 = i_reg_337.read();
    } else {
        ap_phi_mux_i_0_phi_fu_158_p4 = i_0_reg_154.read();
    }
}

void aes_get_round_key5::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_get_round_key5::thread_expanded_key_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            expanded_key_V_address0 =  (sc_lv<8>) (sext_ln180_2_fu_257_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            expanded_key_V_address0 =  (sc_lv<8>) (sext_ln180_fu_234_p1.read());
        } else {
            expanded_key_V_address0 = "XXXXXXXX";
        }
    } else {
        expanded_key_V_address0 = "XXXXXXXX";
    }
}

void aes_get_round_key5::thread_expanded_key_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            expanded_key_V_address1 =  (sc_lv<8>) (sext_ln180_3_fu_266_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            expanded_key_V_address1 =  (sc_lv<8>) (sext_ln180_1_fu_244_p1.read());
        } else {
            expanded_key_V_address1 = "XXXXXXXX";
        }
    } else {
        expanded_key_V_address1 = "XXXXXXXX";
    }
}

void aes_get_round_key5::thread_expanded_key_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        expanded_key_V_ce0 = ap_const_logic_1;
    } else {
        expanded_key_V_ce0 = ap_const_logic_0;
    }
}

void aes_get_round_key5::thread_expanded_key_V_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        expanded_key_V_ce1 = ap_const_logic_1;
    } else {
        expanded_key_V_ce1 = ap_const_logic_0;
    }
}

void aes_get_round_key5::thread_i_fu_197_p2() {
    i_fu_197_p2 = (!ap_phi_mux_i_0_phi_fu_158_p4.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(ap_phi_mux_i_0_phi_fu_158_p4.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes_get_round_key5::thread_icmp_ln138_fu_191_p2() {
    icmp_ln138_fu_191_p2 = (!ap_phi_mux_i_0_phi_fu_158_p4.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_0_phi_fu_158_p4.read() == ap_const_lv3_4);
}

void aes_get_round_key5::thread_key_column_index_V_fu_165_p3() {
    key_column_index_V_fu_165_p3 = esl_concat<7,2>(round.read(), ap_const_lv2_0);
}

void aes_get_round_key5::thread_or_ln1353_1_fu_179_p2() {
    or_ln1353_1_fu_179_p2 = (key_column_index_V_fu_165_p3.read() | ap_const_lv9_2);
}

void aes_get_round_key5::thread_or_ln1353_2_fu_185_p2() {
    or_ln1353_2_fu_185_p2 = (key_column_index_V_fu_165_p3.read() | ap_const_lv9_3);
}

void aes_get_round_key5::thread_or_ln1353_fu_173_p2() {
    or_ln1353_fu_173_p2 = (key_column_index_V_fu_165_p3.read() | ap_const_lv9_1);
}

void aes_get_round_key5::thread_or_ln180_3_fu_285_p2() {
    or_ln180_3_fu_285_p2 = (tmp_17_reg_342.read() | ap_const_lv5_2);
}

void aes_get_round_key5::thread_or_ln180_4_fu_299_p2() {
    or_ln180_4_fu_299_p2 = (tmp_17_reg_342.read() | ap_const_lv5_3);
}

void aes_get_round_key5::thread_or_ln180_fu_271_p2() {
    or_ln180_fu_271_p2 = (tmp_17_reg_342.read() | ap_const_lv5_1);
}

void aes_get_round_key5::thread_round_key_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        round_key_V_address0 =  (sc_lv<4>) (tmp_19_fu_290_p3.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        round_key_V_address0 =  (sc_lv<4>) (zext_ln180_8_fu_249_p1.read());
    } else {
        round_key_V_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_get_round_key5::thread_round_key_V_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        round_key_V_address1 =  (sc_lv<4>) (tmp_20_fu_304_p3.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        round_key_V_address1 =  (sc_lv<4>) (tmp_18_fu_276_p3.read());
    } else {
        round_key_V_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void aes_get_round_key5::thread_round_key_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        round_key_V_ce0 = ap_const_logic_1;
    } else {
        round_key_V_ce0 = ap_const_logic_0;
    }
}

void aes_get_round_key5::thread_round_key_V_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        round_key_V_ce1 = ap_const_logic_1;
    } else {
        round_key_V_ce1 = ap_const_logic_0;
    }
}

void aes_get_round_key5::thread_round_key_V_d0() {
    round_key_V_d0 = expanded_key_V_q0.read();
}

void aes_get_round_key5::thread_round_key_V_d1() {
    round_key_V_d1 = expanded_key_V_q1.read();
}

void aes_get_round_key5::thread_round_key_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln138_reg_333.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln138_reg_333.read(), ap_const_lv1_0)))) {
        round_key_V_we0 = ap_const_logic_1;
    } else {
        round_key_V_we0 = ap_const_logic_0;
    }
}

void aes_get_round_key5::thread_round_key_V_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln138_reg_333.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln138_reg_333.read(), ap_const_lv1_0)))) {
        round_key_V_we1 = ap_const_logic_1;
    } else {
        round_key_V_we1 = ap_const_logic_0;
    }
}

void aes_get_round_key5::thread_sext_ln180_1_fu_244_p1() {
    sext_ln180_1_fu_244_p1 = esl_sext<64,9>(add_ln180_6_fu_239_p2.read());
}

void aes_get_round_key5::thread_sext_ln180_2_fu_257_p1() {
    sext_ln180_2_fu_257_p1 = esl_sext<64,9>(add_ln180_7_fu_253_p2.read());
}

void aes_get_round_key5::thread_sext_ln180_3_fu_266_p1() {
    sext_ln180_3_fu_266_p1 = esl_sext<64,9>(add_ln180_8_fu_262_p2.read());
}

void aes_get_round_key5::thread_sext_ln180_fu_234_p1() {
    sext_ln180_fu_234_p1 = esl_sext<64,9>(add_ln180_fu_229_p2.read());
}

void aes_get_round_key5::thread_sub_ln180_fu_223_p2() {
    sub_ln180_fu_223_p2 = (!tmp_s_fu_203_p3.read().is_01() || !zext_ln180_fu_219_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_s_fu_203_p3.read()) - sc_biguint<9>(zext_ln180_fu_219_p1.read()));
}

void aes_get_round_key5::thread_tmp_17_fu_211_p3() {
    tmp_17_fu_211_p3 = esl_concat<3,2>(ap_phi_mux_i_0_phi_fu_158_p4.read(), ap_const_lv2_0);
}

void aes_get_round_key5::thread_tmp_18_fu_276_p3() {
    tmp_18_fu_276_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln180_fu_271_p2.read());
}

void aes_get_round_key5::thread_tmp_19_fu_290_p3() {
    tmp_19_fu_290_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln180_3_fu_285_p2.read());
}

void aes_get_round_key5::thread_tmp_20_fu_304_p3() {
    tmp_20_fu_304_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln180_4_fu_299_p2.read());
}

void aes_get_round_key5::thread_tmp_s_fu_203_p3() {
    tmp_s_fu_203_p3 = esl_concat<3,6>(ap_phi_mux_i_0_phi_fu_158_p4.read(), ap_const_lv6_0);
}

void aes_get_round_key5::thread_zext_ln180_8_fu_249_p1() {
    zext_ln180_8_fu_249_p1 = esl_zext<64,5>(tmp_17_reg_342.read());
}

void aes_get_round_key5::thread_zext_ln180_fu_219_p1() {
    zext_ln180_fu_219_p1 = esl_zext<9,5>(tmp_17_fu_211_p3.read());
}

void aes_get_round_key5::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln138_fu_191_p2.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln138_fu_191_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

