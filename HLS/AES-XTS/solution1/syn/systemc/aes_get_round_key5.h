// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes_get_round_key5_HH_
#define _aes_get_round_key5_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct aes_get_round_key5 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<7> > round;
    sc_out< sc_lv<8> > expanded_key_V_address0;
    sc_out< sc_logic > expanded_key_V_ce0;
    sc_in< sc_lv<16> > expanded_key_V_q0;
    sc_out< sc_lv<4> > round_key_V_address0;
    sc_out< sc_logic > round_key_V_ce0;
    sc_out< sc_logic > round_key_V_we0;
    sc_out< sc_lv<16> > round_key_V_d0;


    // Module declarations
    aes_get_round_key5(sc_module_name name);
    SC_HAS_PROCESS(aes_get_round_key5);

    ~aes_get_round_key5();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<9> > key_column_index_V_fu_85_p3;
    sc_signal< sc_lv<9> > key_column_index_V_reg_179;
    sc_signal< sc_lv<3> > i_fu_99_p2;
    sc_signal< sc_lv<3> > i_reg_187;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > zext_ln180_fu_121_p1;
    sc_signal< sc_lv<6> > zext_ln180_reg_192;
    sc_signal< sc_lv<1> > icmp_ln138_fu_93_p2;
    sc_signal< sc_lv<9> > sub_ln180_fu_129_p2;
    sc_signal< sc_lv<9> > sub_ln180_reg_197;
    sc_signal< sc_lv<3> > j_fu_141_p2;
    sc_signal< sc_lv<3> > j_reg_205;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<6> > add_ln180_fu_151_p2;
    sc_signal< sc_lv<6> > add_ln180_reg_210;
    sc_signal< sc_lv<1> > icmp_ln140_fu_135_p2;
    sc_signal< sc_lv<3> > i_0_reg_63;
    sc_signal< sc_lv<3> > i_op_assign_reg_74;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > sext_ln180_fu_170_p1;
    sc_signal< sc_lv<64> > zext_ln180_25_fu_175_p1;
    sc_signal< sc_lv<5> > tmp_s_fu_113_p3;
    sc_signal< sc_lv<9> > tmp_fu_105_p3;
    sc_signal< sc_lv<9> > zext_ln180_23_fu_125_p1;
    sc_signal< sc_lv<6> > zext_ln180_24_fu_147_p1;
    sc_signal< sc_lv<9> > zext_ln215_fu_156_p1;
    sc_signal< sc_lv<9> > ret_V_fu_160_p2;
    sc_signal< sc_lv<9> > add_ln180_7_fu_165_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln180_7_fu_165_p2();
    void thread_add_ln180_fu_151_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_expanded_key_V_address0();
    void thread_expanded_key_V_ce0();
    void thread_i_fu_99_p2();
    void thread_icmp_ln138_fu_93_p2();
    void thread_icmp_ln140_fu_135_p2();
    void thread_j_fu_141_p2();
    void thread_key_column_index_V_fu_85_p3();
    void thread_ret_V_fu_160_p2();
    void thread_round_key_V_address0();
    void thread_round_key_V_ce0();
    void thread_round_key_V_d0();
    void thread_round_key_V_we0();
    void thread_sext_ln180_fu_170_p1();
    void thread_sub_ln180_fu_129_p2();
    void thread_tmp_fu_105_p3();
    void thread_tmp_s_fu_113_p3();
    void thread_zext_ln180_23_fu_125_p1();
    void thread_zext_ln180_24_fu_147_p1();
    void thread_zext_ln180_25_fu_175_p1();
    void thread_zext_ln180_fu_121_p1();
    void thread_zext_ln215_fu_156_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
