// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes_get_round_key5_HH_
#define _aes_get_round_key5_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct aes_get_round_key5 : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<7> > round;
    sc_out< sc_lv<8> > expanded_key_V_address0;
    sc_out< sc_logic > expanded_key_V_ce0;
    sc_in< sc_lv<16> > expanded_key_V_q0;
    sc_out< sc_lv<8> > expanded_key_V_address1;
    sc_out< sc_logic > expanded_key_V_ce1;
    sc_in< sc_lv<16> > expanded_key_V_q1;
    sc_out< sc_lv<4> > round_key_V_address0;
    sc_out< sc_logic > round_key_V_ce0;
    sc_out< sc_logic > round_key_V_we0;
    sc_out< sc_lv<16> > round_key_V_d0;
    sc_out< sc_lv<4> > round_key_V_address1;
    sc_out< sc_logic > round_key_V_ce1;
    sc_out< sc_logic > round_key_V_we1;
    sc_out< sc_lv<16> > round_key_V_d1;


    // Module declarations
    aes_get_round_key5(sc_module_name name);
    SC_HAS_PROCESS(aes_get_round_key5);

    ~aes_get_round_key5();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_0_reg_154;
    sc_signal< sc_lv<9> > key_column_index_V_fu_165_p3;
    sc_signal< sc_lv<9> > key_column_index_V_reg_313;
    sc_signal< sc_lv<9> > or_ln1353_fu_173_p2;
    sc_signal< sc_lv<9> > or_ln1353_reg_318;
    sc_signal< sc_lv<9> > or_ln1353_1_fu_179_p2;
    sc_signal< sc_lv<9> > or_ln1353_1_reg_323;
    sc_signal< sc_lv<9> > or_ln1353_2_fu_185_p2;
    sc_signal< sc_lv<9> > or_ln1353_2_reg_328;
    sc_signal< sc_lv<1> > icmp_ln138_fu_191_p2;
    sc_signal< sc_lv<1> > icmp_ln138_reg_333;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > i_fu_197_p2;
    sc_signal< sc_lv<3> > i_reg_337;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > tmp_17_fu_211_p3;
    sc_signal< sc_lv<5> > tmp_17_reg_342;
    sc_signal< sc_lv<9> > sub_ln180_fu_223_p2;
    sc_signal< sc_lv<9> > sub_ln180_reg_350;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<3> > ap_phi_mux_i_0_phi_fu_158_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > sext_ln180_fu_234_p1;
    sc_signal< sc_lv<64> > sext_ln180_1_fu_244_p1;
    sc_signal< sc_lv<64> > sext_ln180_2_fu_257_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > sext_ln180_3_fu_266_p1;
    sc_signal< sc_lv<64> > zext_ln180_8_fu_249_p1;
    sc_signal< sc_lv<64> > tmp_18_fu_276_p3;
    sc_signal< sc_lv<64> > tmp_19_fu_290_p3;
    sc_signal< sc_lv<64> > tmp_20_fu_304_p3;
    sc_signal< sc_lv<9> > tmp_s_fu_203_p3;
    sc_signal< sc_lv<9> > zext_ln180_fu_219_p1;
    sc_signal< sc_lv<9> > add_ln180_fu_229_p2;
    sc_signal< sc_lv<9> > add_ln180_6_fu_239_p2;
    sc_signal< sc_lv<9> > add_ln180_7_fu_253_p2;
    sc_signal< sc_lv<9> > add_ln180_8_fu_262_p2;
    sc_signal< sc_lv<5> > or_ln180_fu_271_p2;
    sc_signal< sc_lv<5> > or_ln180_3_fu_285_p2;
    sc_signal< sc_lv<5> > or_ln180_4_fu_299_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<9> ap_const_lv9_2;
    static const sc_lv<9> ap_const_lv9_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<59> ap_const_lv59_0;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<5> ap_const_lv5_3;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln180_6_fu_239_p2();
    void thread_add_ln180_7_fu_253_p2();
    void thread_add_ln180_8_fu_262_p2();
    void thread_add_ln180_fu_229_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_158_p4();
    void thread_ap_ready();
    void thread_expanded_key_V_address0();
    void thread_expanded_key_V_address1();
    void thread_expanded_key_V_ce0();
    void thread_expanded_key_V_ce1();
    void thread_i_fu_197_p2();
    void thread_icmp_ln138_fu_191_p2();
    void thread_key_column_index_V_fu_165_p3();
    void thread_or_ln1353_1_fu_179_p2();
    void thread_or_ln1353_2_fu_185_p2();
    void thread_or_ln1353_fu_173_p2();
    void thread_or_ln180_3_fu_285_p2();
    void thread_or_ln180_4_fu_299_p2();
    void thread_or_ln180_fu_271_p2();
    void thread_round_key_V_address0();
    void thread_round_key_V_address1();
    void thread_round_key_V_ce0();
    void thread_round_key_V_ce1();
    void thread_round_key_V_d0();
    void thread_round_key_V_d1();
    void thread_round_key_V_we0();
    void thread_round_key_V_we1();
    void thread_sext_ln180_1_fu_244_p1();
    void thread_sext_ln180_2_fu_257_p1();
    void thread_sext_ln180_3_fu_266_p1();
    void thread_sext_ln180_fu_234_p1();
    void thread_sub_ln180_fu_223_p2();
    void thread_tmp_17_fu_211_p3();
    void thread_tmp_18_fu_276_p3();
    void thread_tmp_19_fu_290_p3();
    void thread_tmp_20_fu_304_p3();
    void thread_tmp_s_fu_203_p3();
    void thread_zext_ln180_8_fu_249_p1();
    void thread_zext_ln180_fu_219_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
