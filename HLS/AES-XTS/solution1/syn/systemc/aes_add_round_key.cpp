// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_add_round_key.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_add_round_key::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_add_round_key::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> aes_add_round_key::ap_ST_fsm_state1 = "1";
const sc_lv<6> aes_add_round_key::ap_ST_fsm_state2 = "10";
const sc_lv<6> aes_add_round_key::ap_ST_fsm_state3 = "100";
const sc_lv<6> aes_add_round_key::ap_ST_fsm_state4 = "1000";
const sc_lv<6> aes_add_round_key::ap_ST_fsm_state5 = "10000";
const sc_lv<6> aes_add_round_key::ap_ST_fsm_state6 = "100000";
const sc_lv<32> aes_add_round_key::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes_add_round_key::ap_const_lv32_2 = "10";
const sc_lv<32> aes_add_round_key::ap_const_lv32_3 = "11";
const sc_lv<32> aes_add_round_key::ap_const_lv32_1 = "1";
const sc_lv<1> aes_add_round_key::ap_const_lv1_0 = "0";
const sc_lv<3> aes_add_round_key::ap_const_lv3_0 = "000";
const sc_lv<32> aes_add_round_key::ap_const_lv32_4 = "100";
const sc_lv<3> aes_add_round_key::ap_const_lv3_4 = "100";
const sc_lv<3> aes_add_round_key::ap_const_lv3_1 = "1";
const sc_lv<2> aes_add_round_key::ap_const_lv2_0 = "00";
const sc_lv<5> aes_add_round_key::ap_const_lv5_1 = "1";
const sc_lv<59> aes_add_round_key::ap_const_lv59_0 = "00000000000000000000000000000000000000000000000000000000000";
const sc_lv<5> aes_add_round_key::ap_const_lv5_2 = "10";
const sc_lv<5> aes_add_round_key::ap_const_lv5_3 = "11";
const sc_lv<32> aes_add_round_key::ap_const_lv32_5 = "101";
const bool aes_add_round_key::ap_const_boolean_1 = true;

aes_add_round_key::aes_add_round_key(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_fu_141_p2);
    sensitive << ( state_matrix_V_q0 );
    sensitive << ( round_key_matrix_V_q0 );

    SC_METHOD(thread_grp_fu_147_p2);
    sensitive << ( state_matrix_V_q1 );
    sensitive << ( round_key_matrix_V_q1 );

    SC_METHOD(thread_icmp_ln124_fu_163_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( row_index_0_reg_130 );

    SC_METHOD(thread_or_ln719_1_fu_205_p2);
    sensitive << ( tmp_s_reg_243 );

    SC_METHOD(thread_or_ln719_2_fu_220_p2);
    sensitive << ( tmp_s_reg_243 );

    SC_METHOD(thread_or_ln719_fu_189_p2);
    sensitive << ( tmp_s_fu_175_p3 );

    SC_METHOD(thread_round_key_matrix_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln719_fu_183_p1 );
    sensitive << ( tmp_25_fu_210_p3 );

    SC_METHOD(thread_round_key_matrix_V_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_24_fu_195_p3 );
    sensitive << ( tmp_26_fu_225_p3 );

    SC_METHOD(thread_round_key_matrix_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_round_key_matrix_V_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_row_index_fu_169_p2);
    sensitive << ( row_index_0_reg_130 );

    SC_METHOD(thread_state_matrix_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_matrix_V_addr_reg_249 );
    sensitive << ( state_matrix_V_addr_15_reg_269 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln719_fu_183_p1 );
    sensitive << ( tmp_25_fu_210_p3 );

    SC_METHOD(thread_state_matrix_V_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_matrix_V_addr_14_reg_254 );
    sensitive << ( state_matrix_V_addr_16_reg_274 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_24_fu_195_p3 );
    sensitive << ( tmp_26_fu_225_p3 );

    SC_METHOD(thread_state_matrix_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_matrix_V_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_matrix_V_d0);
    sensitive << ( reg_153 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_matrix_V_d1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( reg_158 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_matrix_V_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_matrix_V_we1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_24_fu_195_p3);
    sensitive << ( or_ln719_fu_189_p2 );

    SC_METHOD(thread_tmp_25_fu_210_p3);
    sensitive << ( or_ln719_1_fu_205_p2 );

    SC_METHOD(thread_tmp_26_fu_225_p3);
    sensitive << ( or_ln719_2_fu_220_p2 );

    SC_METHOD(thread_tmp_s_fu_175_p3);
    sensitive << ( row_index_0_reg_130 );

    SC_METHOD(thread_zext_ln719_fu_183_p1);
    sensitive << ( tmp_s_fu_175_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln124_fu_163_p2 );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_add_round_key_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_matrix_V_address0, "(port)state_matrix_V_address0");
    sc_trace(mVcdFile, state_matrix_V_ce0, "(port)state_matrix_V_ce0");
    sc_trace(mVcdFile, state_matrix_V_we0, "(port)state_matrix_V_we0");
    sc_trace(mVcdFile, state_matrix_V_d0, "(port)state_matrix_V_d0");
    sc_trace(mVcdFile, state_matrix_V_q0, "(port)state_matrix_V_q0");
    sc_trace(mVcdFile, state_matrix_V_address1, "(port)state_matrix_V_address1");
    sc_trace(mVcdFile, state_matrix_V_ce1, "(port)state_matrix_V_ce1");
    sc_trace(mVcdFile, state_matrix_V_we1, "(port)state_matrix_V_we1");
    sc_trace(mVcdFile, state_matrix_V_d1, "(port)state_matrix_V_d1");
    sc_trace(mVcdFile, state_matrix_V_q1, "(port)state_matrix_V_q1");
    sc_trace(mVcdFile, round_key_matrix_V_address0, "(port)round_key_matrix_V_address0");
    sc_trace(mVcdFile, round_key_matrix_V_ce0, "(port)round_key_matrix_V_ce0");
    sc_trace(mVcdFile, round_key_matrix_V_q0, "(port)round_key_matrix_V_q0");
    sc_trace(mVcdFile, round_key_matrix_V_address1, "(port)round_key_matrix_V_address1");
    sc_trace(mVcdFile, round_key_matrix_V_ce1, "(port)round_key_matrix_V_ce1");
    sc_trace(mVcdFile, round_key_matrix_V_q1, "(port)round_key_matrix_V_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_141_p2, "grp_fu_141_p2");
    sc_trace(mVcdFile, reg_153, "reg_153");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_147_p2, "grp_fu_147_p2");
    sc_trace(mVcdFile, reg_158, "reg_158");
    sc_trace(mVcdFile, row_index_fu_169_p2, "row_index_fu_169_p2");
    sc_trace(mVcdFile, row_index_reg_238, "row_index_reg_238");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_s_fu_175_p3, "tmp_s_fu_175_p3");
    sc_trace(mVcdFile, tmp_s_reg_243, "tmp_s_reg_243");
    sc_trace(mVcdFile, icmp_ln124_fu_163_p2, "icmp_ln124_fu_163_p2");
    sc_trace(mVcdFile, state_matrix_V_addr_reg_249, "state_matrix_V_addr_reg_249");
    sc_trace(mVcdFile, state_matrix_V_addr_14_reg_254, "state_matrix_V_addr_14_reg_254");
    sc_trace(mVcdFile, state_matrix_V_addr_15_reg_269, "state_matrix_V_addr_15_reg_269");
    sc_trace(mVcdFile, state_matrix_V_addr_16_reg_274, "state_matrix_V_addr_16_reg_274");
    sc_trace(mVcdFile, row_index_0_reg_130, "row_index_0_reg_130");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln719_fu_183_p1, "zext_ln719_fu_183_p1");
    sc_trace(mVcdFile, tmp_24_fu_195_p3, "tmp_24_fu_195_p3");
    sc_trace(mVcdFile, tmp_25_fu_210_p3, "tmp_25_fu_210_p3");
    sc_trace(mVcdFile, tmp_26_fu_225_p3, "tmp_26_fu_225_p3");
    sc_trace(mVcdFile, or_ln719_fu_189_p2, "or_ln719_fu_189_p2");
    sc_trace(mVcdFile, or_ln719_1_fu_205_p2, "or_ln719_1_fu_205_p2");
    sc_trace(mVcdFile, or_ln719_2_fu_220_p2, "or_ln719_2_fu_220_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes_add_round_key::~aes_add_round_key() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void aes_add_round_key::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        row_index_0_reg_130 = row_index_reg_238.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        row_index_0_reg_130 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        reg_153 = grp_fu_141_p2.read();
        reg_158 = grp_fu_147_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        row_index_reg_238 = row_index_fu_169_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln124_fu_163_p2.read(), ap_const_lv1_0))) {
        state_matrix_V_addr_14_reg_254 =  (sc_lv<4>) (tmp_24_fu_195_p3.read());
        state_matrix_V_addr_reg_249 =  (sc_lv<4>) (zext_ln719_fu_183_p1.read());
        tmp_s_reg_243 = tmp_s_fu_175_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_matrix_V_addr_15_reg_269 =  (sc_lv<4>) (tmp_25_fu_210_p3.read());
        state_matrix_V_addr_16_reg_274 =  (sc_lv<4>) (tmp_26_fu_225_p3.read());
    }
}

void aes_add_round_key::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes_add_round_key::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes_add_round_key::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes_add_round_key::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes_add_round_key::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes_add_round_key::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes_add_round_key::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_add_round_key::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_add_round_key::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_add_round_key::thread_grp_fu_141_p2() {
    grp_fu_141_p2 = (state_matrix_V_q0.read() ^ round_key_matrix_V_q0.read());
}

void aes_add_round_key::thread_grp_fu_147_p2() {
    grp_fu_147_p2 = (state_matrix_V_q1.read() ^ round_key_matrix_V_q1.read());
}

void aes_add_round_key::thread_icmp_ln124_fu_163_p2() {
    icmp_ln124_fu_163_p2 = (!row_index_0_reg_130.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(row_index_0_reg_130.read() == ap_const_lv3_4);
}

void aes_add_round_key::thread_or_ln719_1_fu_205_p2() {
    or_ln719_1_fu_205_p2 = (tmp_s_reg_243.read() | ap_const_lv5_2);
}

void aes_add_round_key::thread_or_ln719_2_fu_220_p2() {
    or_ln719_2_fu_220_p2 = (tmp_s_reg_243.read() | ap_const_lv5_3);
}

void aes_add_round_key::thread_or_ln719_fu_189_p2() {
    or_ln719_fu_189_p2 = (tmp_s_fu_175_p3.read() | ap_const_lv5_1);
}

void aes_add_round_key::thread_round_key_matrix_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        round_key_matrix_V_address0 =  (sc_lv<4>) (tmp_25_fu_210_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        round_key_matrix_V_address0 =  (sc_lv<4>) (zext_ln719_fu_183_p1.read());
    } else {
        round_key_matrix_V_address0 = "XXXX";
    }
}

void aes_add_round_key::thread_round_key_matrix_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        round_key_matrix_V_address1 =  (sc_lv<4>) (tmp_26_fu_225_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        round_key_matrix_V_address1 =  (sc_lv<4>) (tmp_24_fu_195_p3.read());
    } else {
        round_key_matrix_V_address1 = "XXXX";
    }
}

void aes_add_round_key::thread_round_key_matrix_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        round_key_matrix_V_ce0 = ap_const_logic_1;
    } else {
        round_key_matrix_V_ce0 = ap_const_logic_0;
    }
}

void aes_add_round_key::thread_round_key_matrix_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        round_key_matrix_V_ce1 = ap_const_logic_1;
    } else {
        round_key_matrix_V_ce1 = ap_const_logic_0;
    }
}

void aes_add_round_key::thread_row_index_fu_169_p2() {
    row_index_fu_169_p2 = (!row_index_0_reg_130.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(row_index_0_reg_130.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes_add_round_key::thread_state_matrix_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_matrix_V_address0 = state_matrix_V_addr_15_reg_269.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_matrix_V_address0 = state_matrix_V_addr_reg_249.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_matrix_V_address0 =  (sc_lv<4>) (tmp_25_fu_210_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_matrix_V_address0 =  (sc_lv<4>) (zext_ln719_fu_183_p1.read());
    } else {
        state_matrix_V_address0 = "XXXX";
    }
}

void aes_add_round_key::thread_state_matrix_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_matrix_V_address1 = state_matrix_V_addr_16_reg_274.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_matrix_V_address1 = state_matrix_V_addr_14_reg_254.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_matrix_V_address1 =  (sc_lv<4>) (tmp_26_fu_225_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_matrix_V_address1 =  (sc_lv<4>) (tmp_24_fu_195_p3.read());
    } else {
        state_matrix_V_address1 = "XXXX";
    }
}

void aes_add_round_key::thread_state_matrix_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_matrix_V_ce0 = ap_const_logic_1;
    } else {
        state_matrix_V_ce0 = ap_const_logic_0;
    }
}

void aes_add_round_key::thread_state_matrix_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_matrix_V_ce1 = ap_const_logic_1;
    } else {
        state_matrix_V_ce1 = ap_const_logic_0;
    }
}

void aes_add_round_key::thread_state_matrix_V_d0() {
    state_matrix_V_d0 = reg_153.read();
}

void aes_add_round_key::thread_state_matrix_V_d1() {
    state_matrix_V_d1 = reg_158.read();
}

void aes_add_round_key::thread_state_matrix_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_matrix_V_we0 = ap_const_logic_1;
    } else {
        state_matrix_V_we0 = ap_const_logic_0;
    }
}

void aes_add_round_key::thread_state_matrix_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_matrix_V_we1 = ap_const_logic_1;
    } else {
        state_matrix_V_we1 = ap_const_logic_0;
    }
}

void aes_add_round_key::thread_tmp_24_fu_195_p3() {
    tmp_24_fu_195_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln719_fu_189_p2.read());
}

void aes_add_round_key::thread_tmp_25_fu_210_p3() {
    tmp_25_fu_210_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln719_1_fu_205_p2.read());
}

void aes_add_round_key::thread_tmp_26_fu_225_p3() {
    tmp_26_fu_225_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln719_2_fu_220_p2.read());
}

void aes_add_round_key::thread_tmp_s_fu_175_p3() {
    tmp_s_fu_175_p3 = esl_concat<3,2>(row_index_0_reg_130.read(), ap_const_lv2_0);
}

void aes_add_round_key::thread_zext_ln719_fu_183_p1() {
    zext_ln719_fu_183_p1 = esl_zext<64,5>(tmp_s_fu_175_p3.read());
}

void aes_add_round_key::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln124_fu_163_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

