// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes_substitute_bytes_HH_
#define _aes_substitute_bytes_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct aes_substitute_bytes : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_matrix_V_address0;
    sc_out< sc_logic > state_matrix_V_ce0;
    sc_out< sc_logic > state_matrix_V_we0;
    sc_out< sc_lv<16> > state_matrix_V_d0;
    sc_in< sc_lv<16> > state_matrix_V_q0;
    sc_out< sc_lv<10> > s_box_V_address0;
    sc_out< sc_logic > s_box_V_ce0;
    sc_in< sc_lv<8> > s_box_V_q0;
    sc_in< sc_lv<2> > s_box_V_offset;


    // Module declarations
    aes_substitute_bytes(sc_module_name name);
    SC_HAS_PROCESS(aes_substitute_bytes);

    ~aes_substitute_bytes();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<11> > zext_ln46_fu_90_p1;
    sc_signal< sc_lv<11> > zext_ln46_reg_163;
    sc_signal< sc_lv<3> > row_index_fu_100_p2;
    sc_signal< sc_lv<3> > row_index_reg_171;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > zext_ln50_fu_114_p1;
    sc_signal< sc_lv<6> > zext_ln50_reg_176;
    sc_signal< sc_lv<1> > icmp_ln48_fu_94_p2;
    sc_signal< sc_lv<3> > column_index_fu_124_p2;
    sc_signal< sc_lv<3> > column_index_reg_184;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > state_matrix_V_addr_reg_189;
    sc_signal< sc_lv<1> > icmp_ln50_fu_118_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > row_index_0_reg_60;
    sc_signal< sc_lv<3> > column_index_0_reg_71;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > zext_ln52_1_fu_139_p1;
    sc_signal< sc_lv<64> > sext_ln78_fu_153_p1;
    sc_signal< sc_lv<10> > tmp_fu_82_p3;
    sc_signal< sc_lv<5> > tmp_4_fu_106_p3;
    sc_signal< sc_lv<6> > zext_ln52_fu_130_p1;
    sc_signal< sc_lv<6> > add_ln52_fu_134_p2;
    sc_signal< sc_lv<11> > trunc_ln78_fu_144_p1;
    sc_signal< sc_lv<11> > add_ln78_fu_148_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln52_fu_134_p2();
    void thread_add_ln78_fu_148_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_column_index_fu_124_p2();
    void thread_icmp_ln48_fu_94_p2();
    void thread_icmp_ln50_fu_118_p2();
    void thread_row_index_fu_100_p2();
    void thread_s_box_V_address0();
    void thread_s_box_V_ce0();
    void thread_sext_ln78_fu_153_p1();
    void thread_state_matrix_V_address0();
    void thread_state_matrix_V_ce0();
    void thread_state_matrix_V_d0();
    void thread_state_matrix_V_we0();
    void thread_tmp_4_fu_106_p3();
    void thread_tmp_fu_82_p3();
    void thread_trunc_ln78_fu_144_p1();
    void thread_zext_ln46_fu_90_p1();
    void thread_zext_ln50_fu_114_p1();
    void thread_zext_ln52_1_fu_139_p1();
    void thread_zext_ln52_fu_130_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
