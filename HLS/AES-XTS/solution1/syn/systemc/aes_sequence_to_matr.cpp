// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_sequence_to_matr.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_sequence_to_matr::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_sequence_to_matr::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> aes_sequence_to_matr::ap_ST_fsm_state1 = "1";
const sc_lv<12> aes_sequence_to_matr::ap_ST_fsm_state2 = "10";
const sc_lv<12> aes_sequence_to_matr::ap_ST_fsm_state3 = "100";
const sc_lv<12> aes_sequence_to_matr::ap_ST_fsm_state4 = "1000";
const sc_lv<12> aes_sequence_to_matr::ap_ST_fsm_state5 = "10000";
const sc_lv<12> aes_sequence_to_matr::ap_ST_fsm_state6 = "100000";
const sc_lv<12> aes_sequence_to_matr::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> aes_sequence_to_matr::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> aes_sequence_to_matr::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> aes_sequence_to_matr::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> aes_sequence_to_matr::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> aes_sequence_to_matr::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> aes_sequence_to_matr::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> aes_sequence_to_matr::ap_const_lv1_0 = "0";
const sc_lv<3> aes_sequence_to_matr::ap_const_lv3_0 = "000";
const sc_lv<2> aes_sequence_to_matr::ap_const_lv2_0 = "00";
const sc_lv<4> aes_sequence_to_matr::ap_const_lv4_0 = "0000";
const sc_lv<16> aes_sequence_to_matr::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> aes_sequence_to_matr::ap_const_lv32_3 = "11";
const sc_lv<32> aes_sequence_to_matr::ap_const_lv32_A = "1010";
const sc_lv<32> aes_sequence_to_matr::ap_const_lv32_1 = "1";
const sc_lv<32> aes_sequence_to_matr::ap_const_lv32_2 = "10";
const sc_lv<1> aes_sequence_to_matr::ap_const_lv1_1 = "1";
const sc_lv<32> aes_sequence_to_matr::ap_const_lv32_B = "1011";
const sc_lv<3> aes_sequence_to_matr::ap_const_lv3_4 = "100";
const sc_lv<3> aes_sequence_to_matr::ap_const_lv3_1 = "1";
const bool aes_sequence_to_matr::ap_const_boolean_1 = true;

aes_sequence_to_matr::aes_sequence_to_matr(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln180_4_fu_173_p2);
    sensitive << ( sequence_V_offset_ca_reg_192 );
    sensitive << ( zext_ln180_7_fu_169_p1 );

    SC_METHOD(thread_add_ln180_fu_147_p2);
    sensitive << ( zext_ln223_1_reg_205 );
    sensitive << ( zext_ln180_fu_143_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln221_fu_103_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln221_fu_103_p2 );

    SC_METHOD(thread_i_fu_109_p2);
    sensitive << ( i_op_assign_1_reg_77 );

    SC_METHOD(thread_icmp_ln221_fu_103_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_op_assign_1_reg_77 );

    SC_METHOD(thread_icmp_ln223_fu_131_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_op_assign_reg_88 );

    SC_METHOD(thread_j_fu_137_p2);
    sensitive << ( i_op_assign_reg_88 );

    SC_METHOD(thread_m_axi_sequence_V_ARADDR);
    sensitive << ( m_axi_sequence_V_ARREADY );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sequence_V_addr_reg_228 );

    SC_METHOD(thread_m_axi_sequence_V_ARBURST);

    SC_METHOD(thread_m_axi_sequence_V_ARCACHE);

    SC_METHOD(thread_m_axi_sequence_V_ARID);

    SC_METHOD(thread_m_axi_sequence_V_ARLEN);
    sensitive << ( m_axi_sequence_V_ARREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axi_sequence_V_ARLOCK);

    SC_METHOD(thread_m_axi_sequence_V_ARPROT);

    SC_METHOD(thread_m_axi_sequence_V_ARQOS);

    SC_METHOD(thread_m_axi_sequence_V_ARREGION);

    SC_METHOD(thread_m_axi_sequence_V_ARSIZE);

    SC_METHOD(thread_m_axi_sequence_V_ARUSER);

    SC_METHOD(thread_m_axi_sequence_V_ARVALID);
    sensitive << ( m_axi_sequence_V_ARREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axi_sequence_V_AWADDR);

    SC_METHOD(thread_m_axi_sequence_V_AWBURST);

    SC_METHOD(thread_m_axi_sequence_V_AWCACHE);

    SC_METHOD(thread_m_axi_sequence_V_AWID);

    SC_METHOD(thread_m_axi_sequence_V_AWLEN);

    SC_METHOD(thread_m_axi_sequence_V_AWLOCK);

    SC_METHOD(thread_m_axi_sequence_V_AWPROT);

    SC_METHOD(thread_m_axi_sequence_V_AWQOS);

    SC_METHOD(thread_m_axi_sequence_V_AWREGION);

    SC_METHOD(thread_m_axi_sequence_V_AWSIZE);

    SC_METHOD(thread_m_axi_sequence_V_AWUSER);

    SC_METHOD(thread_m_axi_sequence_V_AWVALID);

    SC_METHOD(thread_m_axi_sequence_V_BREADY);

    SC_METHOD(thread_m_axi_sequence_V_RREADY);
    sensitive << ( m_axi_sequence_V_RVALID );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_m_axi_sequence_V_WDATA);

    SC_METHOD(thread_m_axi_sequence_V_WID);

    SC_METHOD(thread_m_axi_sequence_V_WLAST);

    SC_METHOD(thread_m_axi_sequence_V_WSTRB);

    SC_METHOD(thread_m_axi_sequence_V_WUSER);

    SC_METHOD(thread_m_axi_sequence_V_WVALID);

    SC_METHOD(thread_matrix_out_V_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( zext_ln180_6_fu_188_p1 );

    SC_METHOD(thread_matrix_out_V_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_matrix_out_V_d0);
    sensitive << ( sequence_V_addr_read_reg_234 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_matrix_out_V_we0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ret_V_2_fu_164_p2);
    sensitive << ( zext_ln223_reg_210 );
    sensitive << ( ret_V_fu_156_p3 );

    SC_METHOD(thread_ret_V_fu_156_p3);
    sensitive << ( trunc_ln1352_fu_152_p1 );

    SC_METHOD(thread_sequence_V_blk_n_AR);
    sensitive << ( m_axi_sequence_V_ARREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sequence_V_blk_n_R);
    sensitive << ( m_axi_sequence_V_RVALID );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_sequence_V_offset_ca_fu_99_p1);
    sensitive << ( sequence_V_offset );

    SC_METHOD(thread_tmp_fu_115_p3);
    sensitive << ( i_op_assign_1_reg_77 );

    SC_METHOD(thread_trunc_ln1352_fu_152_p1);
    sensitive << ( i_op_assign_reg_88 );

    SC_METHOD(thread_zext_ln180_6_fu_188_p1);
    sensitive << ( add_ln180_reg_223 );

    SC_METHOD(thread_zext_ln180_7_fu_169_p1);
    sensitive << ( ret_V_2_fu_164_p2 );

    SC_METHOD(thread_zext_ln180_8_fu_178_p1);
    sensitive << ( add_ln180_4_fu_173_p2 );

    SC_METHOD(thread_zext_ln180_fu_143_p1);
    sensitive << ( i_op_assign_reg_88 );

    SC_METHOD(thread_zext_ln223_1_fu_123_p1);
    sensitive << ( tmp_fu_115_p3 );

    SC_METHOD(thread_zext_ln223_fu_127_p1);
    sensitive << ( i_op_assign_1_reg_77 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_sequence_V_ARREADY );
    sensitive << ( m_axi_sequence_V_RVALID );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln221_fu_103_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln223_fu_131_p2 );

    ap_CS_fsm = "000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_sequence_to_matr_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_sequence_V_AWVALID, "(port)m_axi_sequence_V_AWVALID");
    sc_trace(mVcdFile, m_axi_sequence_V_AWREADY, "(port)m_axi_sequence_V_AWREADY");
    sc_trace(mVcdFile, m_axi_sequence_V_AWADDR, "(port)m_axi_sequence_V_AWADDR");
    sc_trace(mVcdFile, m_axi_sequence_V_AWID, "(port)m_axi_sequence_V_AWID");
    sc_trace(mVcdFile, m_axi_sequence_V_AWLEN, "(port)m_axi_sequence_V_AWLEN");
    sc_trace(mVcdFile, m_axi_sequence_V_AWSIZE, "(port)m_axi_sequence_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_sequence_V_AWBURST, "(port)m_axi_sequence_V_AWBURST");
    sc_trace(mVcdFile, m_axi_sequence_V_AWLOCK, "(port)m_axi_sequence_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_sequence_V_AWCACHE, "(port)m_axi_sequence_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_sequence_V_AWPROT, "(port)m_axi_sequence_V_AWPROT");
    sc_trace(mVcdFile, m_axi_sequence_V_AWQOS, "(port)m_axi_sequence_V_AWQOS");
    sc_trace(mVcdFile, m_axi_sequence_V_AWREGION, "(port)m_axi_sequence_V_AWREGION");
    sc_trace(mVcdFile, m_axi_sequence_V_AWUSER, "(port)m_axi_sequence_V_AWUSER");
    sc_trace(mVcdFile, m_axi_sequence_V_WVALID, "(port)m_axi_sequence_V_WVALID");
    sc_trace(mVcdFile, m_axi_sequence_V_WREADY, "(port)m_axi_sequence_V_WREADY");
    sc_trace(mVcdFile, m_axi_sequence_V_WDATA, "(port)m_axi_sequence_V_WDATA");
    sc_trace(mVcdFile, m_axi_sequence_V_WSTRB, "(port)m_axi_sequence_V_WSTRB");
    sc_trace(mVcdFile, m_axi_sequence_V_WLAST, "(port)m_axi_sequence_V_WLAST");
    sc_trace(mVcdFile, m_axi_sequence_V_WID, "(port)m_axi_sequence_V_WID");
    sc_trace(mVcdFile, m_axi_sequence_V_WUSER, "(port)m_axi_sequence_V_WUSER");
    sc_trace(mVcdFile, m_axi_sequence_V_ARVALID, "(port)m_axi_sequence_V_ARVALID");
    sc_trace(mVcdFile, m_axi_sequence_V_ARREADY, "(port)m_axi_sequence_V_ARREADY");
    sc_trace(mVcdFile, m_axi_sequence_V_ARADDR, "(port)m_axi_sequence_V_ARADDR");
    sc_trace(mVcdFile, m_axi_sequence_V_ARID, "(port)m_axi_sequence_V_ARID");
    sc_trace(mVcdFile, m_axi_sequence_V_ARLEN, "(port)m_axi_sequence_V_ARLEN");
    sc_trace(mVcdFile, m_axi_sequence_V_ARSIZE, "(port)m_axi_sequence_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_sequence_V_ARBURST, "(port)m_axi_sequence_V_ARBURST");
    sc_trace(mVcdFile, m_axi_sequence_V_ARLOCK, "(port)m_axi_sequence_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_sequence_V_ARCACHE, "(port)m_axi_sequence_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_sequence_V_ARPROT, "(port)m_axi_sequence_V_ARPROT");
    sc_trace(mVcdFile, m_axi_sequence_V_ARQOS, "(port)m_axi_sequence_V_ARQOS");
    sc_trace(mVcdFile, m_axi_sequence_V_ARREGION, "(port)m_axi_sequence_V_ARREGION");
    sc_trace(mVcdFile, m_axi_sequence_V_ARUSER, "(port)m_axi_sequence_V_ARUSER");
    sc_trace(mVcdFile, m_axi_sequence_V_RVALID, "(port)m_axi_sequence_V_RVALID");
    sc_trace(mVcdFile, m_axi_sequence_V_RREADY, "(port)m_axi_sequence_V_RREADY");
    sc_trace(mVcdFile, m_axi_sequence_V_RDATA, "(port)m_axi_sequence_V_RDATA");
    sc_trace(mVcdFile, m_axi_sequence_V_RLAST, "(port)m_axi_sequence_V_RLAST");
    sc_trace(mVcdFile, m_axi_sequence_V_RID, "(port)m_axi_sequence_V_RID");
    sc_trace(mVcdFile, m_axi_sequence_V_RUSER, "(port)m_axi_sequence_V_RUSER");
    sc_trace(mVcdFile, m_axi_sequence_V_RRESP, "(port)m_axi_sequence_V_RRESP");
    sc_trace(mVcdFile, m_axi_sequence_V_BVALID, "(port)m_axi_sequence_V_BVALID");
    sc_trace(mVcdFile, m_axi_sequence_V_BREADY, "(port)m_axi_sequence_V_BREADY");
    sc_trace(mVcdFile, m_axi_sequence_V_BRESP, "(port)m_axi_sequence_V_BRESP");
    sc_trace(mVcdFile, m_axi_sequence_V_BID, "(port)m_axi_sequence_V_BID");
    sc_trace(mVcdFile, m_axi_sequence_V_BUSER, "(port)m_axi_sequence_V_BUSER");
    sc_trace(mVcdFile, sequence_V_offset, "(port)sequence_V_offset");
    sc_trace(mVcdFile, matrix_out_V_address0, "(port)matrix_out_V_address0");
    sc_trace(mVcdFile, matrix_out_V_ce0, "(port)matrix_out_V_ce0");
    sc_trace(mVcdFile, matrix_out_V_we0, "(port)matrix_out_V_we0");
    sc_trace(mVcdFile, matrix_out_V_d0, "(port)matrix_out_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sequence_V_blk_n_AR, "sequence_V_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, sequence_V_blk_n_R, "sequence_V_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, sequence_V_offset_ca_fu_99_p1, "sequence_V_offset_ca_fu_99_p1");
    sc_trace(mVcdFile, sequence_V_offset_ca_reg_192, "sequence_V_offset_ca_reg_192");
    sc_trace(mVcdFile, i_fu_109_p2, "i_fu_109_p2");
    sc_trace(mVcdFile, i_reg_200, "i_reg_200");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln223_1_fu_123_p1, "zext_ln223_1_fu_123_p1");
    sc_trace(mVcdFile, zext_ln223_1_reg_205, "zext_ln223_1_reg_205");
    sc_trace(mVcdFile, icmp_ln221_fu_103_p2, "icmp_ln221_fu_103_p2");
    sc_trace(mVcdFile, zext_ln223_fu_127_p1, "zext_ln223_fu_127_p1");
    sc_trace(mVcdFile, zext_ln223_reg_210, "zext_ln223_reg_210");
    sc_trace(mVcdFile, j_fu_137_p2, "j_fu_137_p2");
    sc_trace(mVcdFile, j_reg_218, "j_reg_218");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, add_ln180_fu_147_p2, "add_ln180_fu_147_p2");
    sc_trace(mVcdFile, add_ln180_reg_223, "add_ln180_reg_223");
    sc_trace(mVcdFile, icmp_ln223_fu_131_p2, "icmp_ln223_fu_131_p2");
    sc_trace(mVcdFile, sequence_V_addr_reg_228, "sequence_V_addr_reg_228");
    sc_trace(mVcdFile, sequence_V_addr_read_reg_234, "sequence_V_addr_read_reg_234");
    sc_trace(mVcdFile, i_op_assign_1_reg_77, "i_op_assign_1_reg_77");
    sc_trace(mVcdFile, i_op_assign_reg_88, "i_op_assign_reg_88");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, zext_ln180_6_fu_188_p1, "zext_ln180_6_fu_188_p1");
    sc_trace(mVcdFile, zext_ln180_8_fu_178_p1, "zext_ln180_8_fu_178_p1");
    sc_trace(mVcdFile, tmp_fu_115_p3, "tmp_fu_115_p3");
    sc_trace(mVcdFile, zext_ln180_fu_143_p1, "zext_ln180_fu_143_p1");
    sc_trace(mVcdFile, trunc_ln1352_fu_152_p1, "trunc_ln1352_fu_152_p1");
    sc_trace(mVcdFile, ret_V_fu_156_p3, "ret_V_fu_156_p3");
    sc_trace(mVcdFile, ret_V_2_fu_164_p2, "ret_V_2_fu_164_p2");
    sc_trace(mVcdFile, zext_ln180_7_fu_169_p1, "zext_ln180_7_fu_169_p1");
    sc_trace(mVcdFile, add_ln180_4_fu_173_p2, "add_ln180_4_fu_173_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aes_sequence_to_matr::~aes_sequence_to_matr() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void aes_sequence_to_matr::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln223_fu_131_p2.read(), ap_const_lv1_1))) {
        i_op_assign_1_reg_77 = i_reg_200.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_op_assign_1_reg_77 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln221_fu_103_p2.read()))) {
        i_op_assign_reg_88 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i_op_assign_reg_88 = j_reg_218.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln223_fu_131_p2.read()))) {
        add_ln180_reg_223 = add_ln180_fu_147_p2.read();
        sequence_V_addr_reg_228 =  (sc_lv<32>) (zext_ln180_8_fu_178_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_200 = i_fu_109_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_218 = j_fu_137_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(m_axi_sequence_V_RVALID.read(), ap_const_logic_1))) {
        sequence_V_addr_read_reg_234 = m_axi_sequence_V_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sequence_V_offset_ca_reg_192 = sequence_V_offset_ca_fu_99_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln221_fu_103_p2.read()))) {
        zext_ln223_1_reg_205 = zext_ln223_1_fu_123_p1.read();
        zext_ln223_reg_210 = zext_ln223_fu_127_p1.read();
    }
}

void aes_sequence_to_matr::thread_add_ln180_4_fu_173_p2() {
    add_ln180_4_fu_173_p2 = (!zext_ln180_7_fu_169_p1.read().is_01() || !sequence_V_offset_ca_reg_192.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln180_7_fu_169_p1.read()) + sc_biguint<32>(sequence_V_offset_ca_reg_192.read()));
}

void aes_sequence_to_matr::thread_add_ln180_fu_147_p2() {
    add_ln180_fu_147_p2 = (!zext_ln180_fu_143_p1.read().is_01() || !zext_ln223_1_reg_205.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln180_fu_143_p1.read()) + sc_biguint<6>(zext_ln223_1_reg_205.read()));
}

void aes_sequence_to_matr::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes_sequence_to_matr::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void aes_sequence_to_matr::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void aes_sequence_to_matr::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes_sequence_to_matr::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes_sequence_to_matr::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes_sequence_to_matr::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln221_fu_103_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_sequence_to_matr::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_sequence_to_matr::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln221_fu_103_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_sequence_to_matr::thread_i_fu_109_p2() {
    i_fu_109_p2 = (!i_op_assign_1_reg_77.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_op_assign_1_reg_77.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes_sequence_to_matr::thread_icmp_ln221_fu_103_p2() {
    icmp_ln221_fu_103_p2 = (!i_op_assign_1_reg_77.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_1_reg_77.read() == ap_const_lv3_4);
}

void aes_sequence_to_matr::thread_icmp_ln223_fu_131_p2() {
    icmp_ln223_fu_131_p2 = (!i_op_assign_reg_88.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_reg_88.read() == ap_const_lv3_4);
}

void aes_sequence_to_matr::thread_j_fu_137_p2() {
    j_fu_137_p2 = (!i_op_assign_reg_88.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_op_assign_reg_88.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_ARADDR() {
    m_axi_sequence_V_ARADDR = sequence_V_addr_reg_228.read();
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_ARBURST() {
    m_axi_sequence_V_ARBURST = ap_const_lv2_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_ARCACHE() {
    m_axi_sequence_V_ARCACHE = ap_const_lv4_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_ARID() {
    m_axi_sequence_V_ARID = ap_const_lv1_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_ARLEN() {
    m_axi_sequence_V_ARLEN = ap_const_lv32_1;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_ARLOCK() {
    m_axi_sequence_V_ARLOCK = ap_const_lv2_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_ARPROT() {
    m_axi_sequence_V_ARPROT = ap_const_lv3_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_ARQOS() {
    m_axi_sequence_V_ARQOS = ap_const_lv4_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_ARREGION() {
    m_axi_sequence_V_ARREGION = ap_const_lv4_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_ARSIZE() {
    m_axi_sequence_V_ARSIZE = ap_const_lv3_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_ARUSER() {
    m_axi_sequence_V_ARUSER = ap_const_lv1_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(m_axi_sequence_V_ARREADY.read(), ap_const_logic_1))) {
        m_axi_sequence_V_ARVALID = ap_const_logic_1;
    } else {
        m_axi_sequence_V_ARVALID = ap_const_logic_0;
    }
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_AWADDR() {
    m_axi_sequence_V_AWADDR = ap_const_lv32_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_AWBURST() {
    m_axi_sequence_V_AWBURST = ap_const_lv2_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_AWCACHE() {
    m_axi_sequence_V_AWCACHE = ap_const_lv4_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_AWID() {
    m_axi_sequence_V_AWID = ap_const_lv1_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_AWLEN() {
    m_axi_sequence_V_AWLEN = ap_const_lv32_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_AWLOCK() {
    m_axi_sequence_V_AWLOCK = ap_const_lv2_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_AWPROT() {
    m_axi_sequence_V_AWPROT = ap_const_lv3_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_AWQOS() {
    m_axi_sequence_V_AWQOS = ap_const_lv4_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_AWREGION() {
    m_axi_sequence_V_AWREGION = ap_const_lv4_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_AWSIZE() {
    m_axi_sequence_V_AWSIZE = ap_const_lv3_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_AWUSER() {
    m_axi_sequence_V_AWUSER = ap_const_lv1_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_AWVALID() {
    m_axi_sequence_V_AWVALID = ap_const_logic_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_BREADY() {
    m_axi_sequence_V_BREADY = ap_const_logic_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(m_axi_sequence_V_RVALID.read(), ap_const_logic_1))) {
        m_axi_sequence_V_RREADY = ap_const_logic_1;
    } else {
        m_axi_sequence_V_RREADY = ap_const_logic_0;
    }
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_WDATA() {
    m_axi_sequence_V_WDATA = ap_const_lv16_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_WID() {
    m_axi_sequence_V_WID = ap_const_lv1_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_WLAST() {
    m_axi_sequence_V_WLAST = ap_const_logic_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_WSTRB() {
    m_axi_sequence_V_WSTRB = ap_const_lv2_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_WUSER() {
    m_axi_sequence_V_WUSER = ap_const_lv1_0;
}

void aes_sequence_to_matr::thread_m_axi_sequence_V_WVALID() {
    m_axi_sequence_V_WVALID = ap_const_logic_0;
}

void aes_sequence_to_matr::thread_matrix_out_V_address0() {
    matrix_out_V_address0 =  (sc_lv<4>) (zext_ln180_6_fu_188_p1.read());
}

void aes_sequence_to_matr::thread_matrix_out_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        matrix_out_V_ce0 = ap_const_logic_1;
    } else {
        matrix_out_V_ce0 = ap_const_logic_0;
    }
}

void aes_sequence_to_matr::thread_matrix_out_V_d0() {
    matrix_out_V_d0 = sequence_V_addr_read_reg_234.read();
}

void aes_sequence_to_matr::thread_matrix_out_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        matrix_out_V_we0 = ap_const_logic_1;
    } else {
        matrix_out_V_we0 = ap_const_logic_0;
    }
}

void aes_sequence_to_matr::thread_ret_V_2_fu_164_p2() {
    ret_V_2_fu_164_p2 = (!ret_V_fu_156_p3.read().is_01() || !zext_ln223_reg_210.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ret_V_fu_156_p3.read()) + sc_biguint<4>(zext_ln223_reg_210.read()));
}

void aes_sequence_to_matr::thread_ret_V_fu_156_p3() {
    ret_V_fu_156_p3 = esl_concat<2,2>(trunc_ln1352_fu_152_p1.read(), ap_const_lv2_0);
}

void aes_sequence_to_matr::thread_sequence_V_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sequence_V_blk_n_AR = m_axi_sequence_V_ARREADY.read();
    } else {
        sequence_V_blk_n_AR = ap_const_logic_1;
    }
}

void aes_sequence_to_matr::thread_sequence_V_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sequence_V_blk_n_R = m_axi_sequence_V_RVALID.read();
    } else {
        sequence_V_blk_n_R = ap_const_logic_1;
    }
}

void aes_sequence_to_matr::thread_sequence_V_offset_ca_fu_99_p1() {
    sequence_V_offset_ca_fu_99_p1 = esl_zext<32,31>(sequence_V_offset.read());
}

void aes_sequence_to_matr::thread_tmp_fu_115_p3() {
    tmp_fu_115_p3 = esl_concat<3,2>(i_op_assign_1_reg_77.read(), ap_const_lv2_0);
}

void aes_sequence_to_matr::thread_trunc_ln1352_fu_152_p1() {
    trunc_ln1352_fu_152_p1 = i_op_assign_reg_88.read().range(2-1, 0);
}

void aes_sequence_to_matr::thread_zext_ln180_6_fu_188_p1() {
    zext_ln180_6_fu_188_p1 = esl_zext<64,6>(add_ln180_reg_223.read());
}

void aes_sequence_to_matr::thread_zext_ln180_7_fu_169_p1() {
    zext_ln180_7_fu_169_p1 = esl_zext<32,4>(ret_V_2_fu_164_p2.read());
}

void aes_sequence_to_matr::thread_zext_ln180_8_fu_178_p1() {
    zext_ln180_8_fu_178_p1 = esl_zext<64,32>(add_ln180_4_fu_173_p2.read());
}

void aes_sequence_to_matr::thread_zext_ln180_fu_143_p1() {
    zext_ln180_fu_143_p1 = esl_zext<6,3>(i_op_assign_reg_88.read());
}

void aes_sequence_to_matr::thread_zext_ln223_1_fu_123_p1() {
    zext_ln223_1_fu_123_p1 = esl_zext<6,5>(tmp_fu_115_p3.read());
}

void aes_sequence_to_matr::thread_zext_ln223_fu_127_p1() {
    zext_ln223_fu_127_p1 = esl_zext<4,3>(i_op_assign_1_reg_77.read());
}

void aes_sequence_to_matr::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln221_fu_103_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln223_fu_131_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(m_axi_sequence_V_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(m_axi_sequence_V_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXX";
            break;
    }
}

}

