// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_expand_key (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_key_V_AWVALID,
        m_axi_key_V_AWREADY,
        m_axi_key_V_AWADDR,
        m_axi_key_V_AWID,
        m_axi_key_V_AWLEN,
        m_axi_key_V_AWSIZE,
        m_axi_key_V_AWBURST,
        m_axi_key_V_AWLOCK,
        m_axi_key_V_AWCACHE,
        m_axi_key_V_AWPROT,
        m_axi_key_V_AWQOS,
        m_axi_key_V_AWREGION,
        m_axi_key_V_AWUSER,
        m_axi_key_V_WVALID,
        m_axi_key_V_WREADY,
        m_axi_key_V_WDATA,
        m_axi_key_V_WSTRB,
        m_axi_key_V_WLAST,
        m_axi_key_V_WID,
        m_axi_key_V_WUSER,
        m_axi_key_V_ARVALID,
        m_axi_key_V_ARREADY,
        m_axi_key_V_ARADDR,
        m_axi_key_V_ARID,
        m_axi_key_V_ARLEN,
        m_axi_key_V_ARSIZE,
        m_axi_key_V_ARBURST,
        m_axi_key_V_ARLOCK,
        m_axi_key_V_ARCACHE,
        m_axi_key_V_ARPROT,
        m_axi_key_V_ARQOS,
        m_axi_key_V_ARREGION,
        m_axi_key_V_ARUSER,
        m_axi_key_V_RVALID,
        m_axi_key_V_RREADY,
        m_axi_key_V_RDATA,
        m_axi_key_V_RLAST,
        m_axi_key_V_RID,
        m_axi_key_V_RUSER,
        m_axi_key_V_RRESP,
        m_axi_key_V_BVALID,
        m_axi_key_V_BREADY,
        m_axi_key_V_BRESP,
        m_axi_key_V_BID,
        m_axi_key_V_BUSER,
        key_V_offset,
        key_V_offset_offset,
        s_box_V_address0,
        s_box_V_ce0,
        s_box_V_q0,
        expanded_key_matrix_V_address0,
        expanded_key_matrix_V_ce0,
        expanded_key_matrix_V_we0,
        expanded_key_matrix_V_d0
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_key_V_AWVALID;
input   m_axi_key_V_AWREADY;
output  [31:0] m_axi_key_V_AWADDR;
output  [0:0] m_axi_key_V_AWID;
output  [31:0] m_axi_key_V_AWLEN;
output  [2:0] m_axi_key_V_AWSIZE;
output  [1:0] m_axi_key_V_AWBURST;
output  [1:0] m_axi_key_V_AWLOCK;
output  [3:0] m_axi_key_V_AWCACHE;
output  [2:0] m_axi_key_V_AWPROT;
output  [3:0] m_axi_key_V_AWQOS;
output  [3:0] m_axi_key_V_AWREGION;
output  [0:0] m_axi_key_V_AWUSER;
output   m_axi_key_V_WVALID;
input   m_axi_key_V_WREADY;
output  [15:0] m_axi_key_V_WDATA;
output  [1:0] m_axi_key_V_WSTRB;
output   m_axi_key_V_WLAST;
output  [0:0] m_axi_key_V_WID;
output  [0:0] m_axi_key_V_WUSER;
output   m_axi_key_V_ARVALID;
input   m_axi_key_V_ARREADY;
output  [31:0] m_axi_key_V_ARADDR;
output  [0:0] m_axi_key_V_ARID;
output  [31:0] m_axi_key_V_ARLEN;
output  [2:0] m_axi_key_V_ARSIZE;
output  [1:0] m_axi_key_V_ARBURST;
output  [1:0] m_axi_key_V_ARLOCK;
output  [3:0] m_axi_key_V_ARCACHE;
output  [2:0] m_axi_key_V_ARPROT;
output  [3:0] m_axi_key_V_ARQOS;
output  [3:0] m_axi_key_V_ARREGION;
output  [0:0] m_axi_key_V_ARUSER;
input   m_axi_key_V_RVALID;
output   m_axi_key_V_RREADY;
input  [15:0] m_axi_key_V_RDATA;
input   m_axi_key_V_RLAST;
input  [0:0] m_axi_key_V_RID;
input  [0:0] m_axi_key_V_RUSER;
input  [1:0] m_axi_key_V_RRESP;
input   m_axi_key_V_BVALID;
output   m_axi_key_V_BREADY;
input  [1:0] m_axi_key_V_BRESP;
input  [0:0] m_axi_key_V_BID;
input  [0:0] m_axi_key_V_BUSER;
input  [30:0] key_V_offset;
input  [7:0] key_V_offset_offset;
output  [9:0] s_box_V_address0;
output   s_box_V_ce0;
input  [7:0] s_box_V_q0;
output  [7:0] expanded_key_matrix_V_address0;
output   expanded_key_matrix_V_ce0;
output   expanded_key_matrix_V_we0;
output  [15:0] expanded_key_matrix_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_key_V_ARVALID;
reg m_axi_key_V_RREADY;
reg[9:0] s_box_V_address0;
reg s_box_V_ce0;
reg expanded_key_matrix_V_ce0;
reg expanded_key_matrix_V_we0;

(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] rcon_address0;
reg    rcon_ce0;
wire   [7:0] rcon_q0;
reg    key_V_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    key_V_blk_n_R;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln152_fu_1058_p2;
reg   [31:0] key_V_addr_reg_1536;
wire   [5:0] i_fu_1064_p2;
reg   [5:0] i_reg_1545;
reg    ap_block_state9;
reg   [15:0] key_V_addr_read_reg_1550;
wire   [2:0] i_4_fu_1092_p2;
reg   [2:0] i_4_reg_1568;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln163_fu_1086_p2;
wire   [1:0] trunc_ln180_1_fu_1119_p1;
reg   [1:0] trunc_ln180_1_reg_1578;
wire   [0:0] icmp_ln879_fu_1123_p2;
reg   [0:0] icmp_ln879_reg_1582;
wire   [15:0] expanded_key_V_q0;
wire    ap_CS_fsm_state13;
wire   [2:0] i_7_fu_1141_p2;
reg   [2:0] i_7_reg_1600;
wire    ap_CS_fsm_state15;
wire   [1:0] trunc_ln192_fu_1147_p1;
reg   [1:0] trunc_ln192_reg_1605;
wire   [0:0] icmp_ln190_fu_1135_p2;
wire   [15:0] temporary_key_0_V_8_fu_1180_p1;
wire    ap_CS_fsm_state16;
wire   [1:0] i_6_fu_1190_p2;
reg   [1:0] i_6_reg_1625;
wire    ap_CS_fsm_state18;
wire   [2:0] i_8_fu_1202_p2;
reg   [2:0] i_8_reg_1633;
wire    ap_CS_fsm_state21;
wire   [1:0] trunc_ln179_fu_1208_p1;
reg   [1:0] trunc_ln179_reg_1638;
wire   [0:0] icmp_ln177_fu_1196_p2;
wire   [15:0] temporary_key_0_V_7_fu_1260_p1;
wire    ap_CS_fsm_state22;
wire   [2:0] i_10_fu_1281_p2;
reg   [2:0] i_10_reg_1663;
wire    ap_CS_fsm_state25;
wire   [0:0] icmp_ln200_fu_1275_p2;
wire   [1:0] trunc_ln719_fu_1310_p1;
reg   [1:0] trunc_ln719_reg_1673;
wire   [2:0] i_11_fu_1343_p2;
wire    ap_CS_fsm_state27;
wire   [3:0] select_ln1372_fu_1437_p3;
wire   [0:0] icmp_ln205_fu_1337_p2;
wire   [7:0] cur_len_V_fu_1445_p2;
wire   [7:0] zext_ln214_fu_1451_p1;
reg   [7:0] zext_ln214_reg_1696;
wire    ap_CS_fsm_state28;
wire   [2:0] i_5_fu_1461_p2;
reg   [2:0] i_5_reg_1704;
wire   [8:0] sub_ln180_fu_1487_p2;
reg   [8:0] sub_ln180_reg_1709;
wire   [0:0] icmp_ln214_fu_1455_p2;
wire   [5:0] j_fu_1499_p2;
reg   [5:0] j_reg_1717;
wire    ap_CS_fsm_state29;
wire   [8:0] add_ln180_9_fu_1509_p2;
reg   [8:0] add_ln180_9_reg_1722;
wire   [0:0] icmp_ln216_fu_1493_p2;
reg   [7:0] expanded_key_V_address0;
reg    expanded_key_V_ce0;
reg    expanded_key_V_we0;
reg   [15:0] expanded_key_V_d0;
reg   [5:0] i_0_reg_234;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state8;
reg   [15:0] temporary_key_3_V_9_reg_866;
reg   [15:0] temporary_key_3_V_0_reg_246;
reg   [15:0] temporary_key_2_V_11_reg_878;
reg   [15:0] temporary_key_2_V_0_reg_258;
reg   [15:0] temporary_key_1_V_11_reg_890;
reg   [15:0] temporary_key_1_V_0_reg_270;
reg   [15:0] temporary_key_0_V_116_reg_902;
reg   [15:0] temporary_key_0_V_0_reg_282;
reg  signed [3:0] p_0216_0_reg_294;
reg   [7:0] p_084_0_reg_306;
reg   [15:0] temporary_key_3_V_1_reg_318;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln887_fu_1080_p2;
wire    ap_CS_fsm_state14;
reg   [15:0] temporary_key_2_V_1_reg_329;
reg   [15:0] temporary_key_1_V_1_reg_340;
reg   [15:0] temporary_key_3_V_reg_351;
reg   [2:0] i2_0_reg_362;
reg   [15:0] temporary_key_3_V_1_1_reg_373;
reg   [15:0] temporary_key_2_V_1_3_reg_391;
reg   [15:0] temporary_key_1_V_1_3_reg_409;
reg   [15:0] temporary_key_3_V_b_reg_427;
reg   [15:0] temporary_key_3_V_5_reg_445;
wire   [0:0] icmp_ln879_1_fu_1129_p2;
wire    ap_CS_fsm_state17;
reg   [15:0] temporary_key_2_V_7_reg_456;
reg   [15:0] temporary_key_1_V_7_reg_467;
reg   [15:0] temporary_key_0_V_72_reg_478;
reg   [2:0] i5_0_reg_489;
reg   [15:0] temporary_key_3_V_5_1_reg_500;
reg   [15:0] temporary_key_2_V_7_1_reg_518;
reg   [15:0] temporary_key_1_V_7_1_reg_536;
reg   [15:0] temporary_key_0_V_7_1_reg_554;
reg   [15:0] temporary_key_2_V_3_reg_572;
wire    ap_CS_fsm_state20;
reg   [15:0] temporary_key_1_V_3_reg_583;
reg   [15:0] temporary_key_0_V_3_reg_594;
wire   [1:0] ap_phi_mux_i3_0_phi_fu_609_p4;
reg   [1:0] i3_0_reg_605;
reg   [15:0] temporary_key_0_V_6_reg_617;
wire   [0:0] icmp_ln171_fu_1184_p2;
reg   [15:0] temporary_key_2_V_3_1_reg_632;
wire    ap_CS_fsm_state19;
reg   [15:0] temporary_key_1_V_3_1_reg_648;
reg   [15:0] temporary_key_0_V_3_1_reg_664;
reg   [15:0] temporary_key_3_V_3_reg_680;
wire    ap_CS_fsm_state23;
reg   [15:0] temporary_key_2_V_5_reg_691;
reg   [15:0] temporary_key_1_V_5_reg_702;
reg   [15:0] temporary_key_0_V_5_reg_713;
reg   [2:0] i4_0_reg_724;
reg   [15:0] temporary_key_3_V_3_1_reg_735;
reg   [15:0] temporary_key_2_V_5_1_reg_753;
reg   [15:0] temporary_key_1_V_5_1_reg_771;
reg   [15:0] temporary_key_0_V_5_1_reg_789;
reg   [15:0] ap_phi_mux_temporary_key_3_V_9_1_phi_fu_810_p6;
reg   [15:0] temporary_key_3_V_9_1_reg_807;
wire    ap_CS_fsm_state24;
reg   [15:0] ap_phi_mux_temporary_key_2_V_1_1_phi_fu_825_p6;
reg   [15:0] temporary_key_2_V_1_1_reg_822;
reg   [15:0] ap_phi_mux_temporary_key_1_V_1_1_phi_fu_840_p6;
reg   [15:0] temporary_key_1_V_1_1_reg_837;
wire   [15:0] temporary_key_0_V_1_fu_1268_p2;
reg   [15:0] ap_phi_mux_temporary_key_0_V_1_1_phi_fu_855_p6;
reg   [15:0] temporary_key_0_V_1_1_reg_852;
reg   [15:0] ap_phi_mux_temporary_key_3_V_9_2_phi_fu_929_p8;
wire    ap_CS_fsm_state26;
reg   [15:0] ap_phi_mux_temporary_key_2_V_1_2_phi_fu_947_p8;
reg   [15:0] ap_phi_mux_temporary_key_1_V_1_2_phi_fu_965_p8;
reg   [15:0] ap_phi_mux_temporary_key_0_V_1_2_phi_fu_983_p8;
reg   [2:0] i7_0_reg_914;
wire   [15:0] temporary_key_0_V_9_fu_1327_p2;
reg   [2:0] i_op_assign_4_reg_997;
reg   [2:0] i9_0_reg_1008;
reg   [5:0] j_0_reg_1019;
wire    ap_CS_fsm_state30;
wire   [63:0] zext_ln154_fu_1075_p1;
wire   [63:0] zext_ln544_fu_1114_p1;
wire  signed [63:0] sext_ln78_fu_1175_p1;
wire  signed [63:0] sext_ln78_7_fu_1236_p1;
wire  signed [63:0] sext_ln544_fu_1244_p1;
wire   [63:0] zext_ln544_1_fu_1305_p1;
wire   [63:0] zext_ln544_2_fu_1359_p1;
wire   [63:0] zext_ln218_fu_1527_p1;
wire  signed [63:0] sext_ln180_fu_1532_p1;
wire   [63:0] zext_ln180_19_fu_1048_p1;
reg   [15:0] n_V_1_fu_118;
wire   [15:0] n_V_fu_1249_p2;
wire   [15:0] tmp_s_fu_1368_p6;
wire   [5:0] trunc_ln180_fu_1034_p1;
wire   [31:0] key_V_offset_cast_fu_1030_p1;
wire   [31:0] zext_ln180_fu_1038_p1;
wire   [31:0] add_ln180_fu_1042_p2;
wire   [2:0] xor_ln165_fu_1098_p2;
wire  signed [7:0] sext_ln215_fu_1104_p1;
wire   [7:0] ret_V_fu_1108_p2;
wire   [1:0] temp_V_fu_1151_p5;
wire   [15:0] temp_V_fu_1151_p6;
wire   [10:0] trunc_ln78_fu_1165_p1;
wire   [10:0] add_ln78_fu_1169_p2;
wire   [1:0] temp_V_1_fu_1212_p5;
wire   [15:0] temp_V_1_fu_1212_p6;
wire   [10:0] trunc_ln78_7_fu_1226_p1;
wire   [10:0] add_ln78_7_fu_1230_p2;
wire  signed [15:0] sext_ln544_fu_1244_p0;
wire  signed [15:0] n_V_fu_1249_p0;
wire   [15:0] zext_ln719_fu_1264_p1;
wire   [5:0] i_op_assign_3_fu_1287_p3;
wire  signed [7:0] sext_ln215_1_fu_1295_p1;
wire   [7:0] ret_V_4_fu_1299_p2;
wire   [15:0] tmp_fu_1314_p6;
wire   [7:0] zext_ln215_fu_1349_p1;
wire   [7:0] ret_V_6_fu_1353_p2;
wire   [1:0] tmp_s_fu_1368_p5;
wire  signed [4:0] sext_ln215_2_fu_1383_p1;
wire   [4:0] ret_V_5_fu_1387_p2;
wire   [2:0] trunc_ln1372_1_fu_1405_p1;
wire   [2:0] xor_ln1372_fu_1409_p2;
wire   [3:0] tmp_2_fu_1415_p3;
wire   [2:0] trunc_ln1372_fu_1401_p1;
wire   [0:0] tmp_1_fu_1393_p3;
wire   [3:0] sub_ln180_1_fu_1423_p2;
wire   [3:0] tmp_23_fu_1429_p3;
wire   [4:0] tmp_22_fu_1475_p3;
wire   [8:0] tmp_21_fu_1467_p3;
wire   [8:0] zext_ln180_20_fu_1483_p1;
wire   [8:0] zext_ln180_21_fu_1505_p1;
wire   [7:0] shl_ln_fu_1514_p3;
wire   [7:0] add_ln218_fu_1522_p2;
reg   [29:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
end

aes_expand_key_rcon #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rcon_address0),
    .ce0(rcon_ce0),
    .q0(rcon_q0)
);

aes_expand_key_exbkb #(
    .DataWidth( 16 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
expanded_key_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(expanded_key_V_address0),
    .ce0(expanded_key_V_ce0),
    .we0(expanded_key_V_we0),
    .d0(expanded_key_V_d0),
    .q0(expanded_key_V_q0)
);

xts_aes_mux_42_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
xts_aes_mux_42_16cud_U1(
    .din0(temporary_key_0_V_72_reg_478),
    .din1(temporary_key_1_V_7_reg_467),
    .din2(temporary_key_2_V_7_reg_456),
    .din3(temporary_key_3_V_5_reg_445),
    .din4(temp_V_fu_1151_p5),
    .dout(temp_V_fu_1151_p6)
);

xts_aes_mux_42_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
xts_aes_mux_42_16cud_U2(
    .din0(temporary_key_0_V_5_reg_713),
    .din1(temporary_key_1_V_5_reg_702),
    .din2(temporary_key_2_V_5_reg_691),
    .din3(temporary_key_3_V_3_reg_680),
    .din4(temp_V_1_fu_1212_p5),
    .dout(temp_V_1_fu_1212_p6)
);

xts_aes_mux_42_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
xts_aes_mux_42_16cud_U3(
    .din0(temporary_key_0_V_116_reg_902),
    .din1(temporary_key_1_V_11_reg_890),
    .din2(temporary_key_2_V_11_reg_878),
    .din3(temporary_key_3_V_9_reg_866),
    .din4(trunc_ln719_reg_1673),
    .dout(tmp_fu_1314_p6)
);

xts_aes_mux_42_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
xts_aes_mux_42_16cud_U4(
    .din0(temporary_key_0_V_116_reg_902),
    .din1(temporary_key_1_V_11_reg_890),
    .din2(temporary_key_2_V_11_reg_878),
    .din3(temporary_key_3_V_9_reg_866),
    .din4(tmp_s_fu_1368_p5),
    .dout(tmp_s_fu_1368_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i2_0_reg_362 <= i_4_reg_1568;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln887_fu_1080_p2 == 1'd1))) begin
        i2_0_reg_362 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i3_0_reg_605 <= i_6_reg_1625;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_fu_1123_p2 == 1'd1) & (icmp_ln163_fu_1086_p2 == 1'd1))) begin
        i3_0_reg_605 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i4_0_reg_724 <= i_8_reg_1633;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln171_fu_1184_p2 == 1'd1))) begin
        i4_0_reg_724 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i5_0_reg_489 <= i_7_reg_1600;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_1_fu_1129_p2 == 1'd1) & (icmp_ln163_fu_1086_p2 == 1'd1) & (icmp_ln879_fu_1123_p2 == 1'd0))) begin
        i5_0_reg_489 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i7_0_reg_914 <= i_10_reg_1663;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        i7_0_reg_914 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln887_fu_1080_p2 == 1'd0))) begin
        i9_0_reg_1008 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state29) & (icmp_ln216_fu_1493_p2 == 1'd1))) begin
        i9_0_reg_1008 <= i_5_reg_1704;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_reg_234 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_0_reg_234 <= i_reg_1545;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln200_fu_1275_p2 == 1'd1))) begin
        i_op_assign_4_reg_997 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln205_fu_1337_p2 == 1'd0))) begin
        i_op_assign_4_reg_997 <= i_11_fu_1343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln214_fu_1455_p2 == 1'd0))) begin
        j_0_reg_1019 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        j_0_reg_1019 <= j_reg_1717;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln177_fu_1196_p2 == 1'd1))) begin
        n_V_1_fu_118 <= n_V_fu_1249_p2;
    end else if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln152_fu_1058_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln152_fu_1058_p2 == 1'd1))) begin
        n_V_1_fu_118 <= 16'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln152_fu_1058_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln152_fu_1058_p2 == 1'd1))) begin
        p_0216_0_reg_294 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln205_fu_1337_p2 == 1'd1))) begin
        p_0216_0_reg_294 <= select_ln1372_fu_1437_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln152_fu_1058_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln152_fu_1058_p2 == 1'd1))) begin
        p_084_0_reg_306 <= 8'd32;
    end else if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln205_fu_1337_p2 == 1'd1))) begin
        p_084_0_reg_306 <= cur_len_V_fu_1445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        temporary_key_0_V_116_reg_902 <= ap_phi_mux_temporary_key_0_V_1_2_phi_fu_983_p8;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temporary_key_0_V_116_reg_902 <= ap_phi_mux_temporary_key_0_V_1_1_phi_fu_855_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln190_fu_1135_p2 == 1'd1))) begin
        temporary_key_0_V_1_1_reg_852 <= temporary_key_0_V_72_reg_478;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln163_fu_1086_p2 == 1'd1) & (icmp_ln879_1_fu_1129_p2 == 1'd0) & (icmp_ln879_fu_1123_p2 == 1'd0))) begin
        temporary_key_0_V_1_1_reg_852 <= temporary_key_3_V_reg_351;
    end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln879_reg_1582 == 1'd1))) begin
        temporary_key_0_V_1_1_reg_852 <= temporary_key_0_V_1_fu_1268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (i3_0_reg_605 == 2'd0))) begin
        temporary_key_0_V_3_1_reg_664 <= temporary_key_0_V_6_reg_617;
    end else if ((((i3_0_reg_605 == 2'd1) & (1'b1 == ap_CS_fsm_state19)) | (~(i3_0_reg_605 == 2'd1) & ~(i3_0_reg_605 == 2'd0) & (1'b1 == ap_CS_fsm_state19)))) begin
        temporary_key_0_V_3_1_reg_664 <= temporary_key_0_V_3_reg_594;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        temporary_key_0_V_3_reg_594 <= temporary_key_0_V_3_1_reg_664;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_fu_1123_p2 == 1'd1) & (icmp_ln163_fu_1086_p2 == 1'd1))) begin
        temporary_key_0_V_3_reg_594 <= temporary_key_3_V_reg_351;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (trunc_ln179_reg_1638 == 2'd0))) begin
        temporary_key_0_V_5_1_reg_789 <= temporary_key_0_V_7_fu_1260_p1;
    end else if ((((trunc_ln179_reg_1638 == 2'd1) & (1'b1 == ap_CS_fsm_state22)) | ((trunc_ln179_reg_1638 == 2'd2) & (1'b1 == ap_CS_fsm_state22)) | ((trunc_ln179_reg_1638 == 2'd3) & (1'b1 == ap_CS_fsm_state22)))) begin
        temporary_key_0_V_5_1_reg_789 <= temporary_key_0_V_5_reg_713;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        temporary_key_0_V_5_reg_713 <= temporary_key_0_V_5_1_reg_789;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln171_fu_1184_p2 == 1'd1))) begin
        temporary_key_0_V_5_reg_713 <= temporary_key_0_V_3_reg_594;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln171_fu_1184_p2 == 1'd0))) begin
        if ((~(ap_phi_mux_i3_0_phi_fu_609_p4 == 2'd1) & ~(ap_phi_mux_i3_0_phi_fu_609_p4 == 2'd0))) begin
            temporary_key_0_V_6_reg_617 <= temporary_key_3_V_1_reg_318;
        end else if ((ap_phi_mux_i3_0_phi_fu_609_p4 == 2'd1)) begin
            temporary_key_0_V_6_reg_617 <= temporary_key_2_V_3_reg_572;
        end else if ((ap_phi_mux_i3_0_phi_fu_609_p4 == 2'd0)) begin
            temporary_key_0_V_6_reg_617 <= temporary_key_1_V_3_reg_583;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        temporary_key_0_V_72_reg_478 <= temporary_key_0_V_7_1_reg_554;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_1_fu_1129_p2 == 1'd1) & (icmp_ln163_fu_1086_p2 == 1'd1) & (icmp_ln879_fu_1123_p2 == 1'd0))) begin
        temporary_key_0_V_72_reg_478 <= temporary_key_3_V_reg_351;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd0))) begin
        temporary_key_0_V_7_1_reg_554 <= temporary_key_0_V_8_fu_1180_p1;
    end else if ((((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd1)) | ((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd2)) | ((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd3)))) begin
        temporary_key_0_V_7_1_reg_554 <= temporary_key_0_V_72_reg_478;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        temporary_key_1_V_11_reg_890 <= ap_phi_mux_temporary_key_1_V_1_2_phi_fu_965_p8;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temporary_key_1_V_11_reg_890 <= ap_phi_mux_temporary_key_1_V_1_1_phi_fu_840_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln190_fu_1135_p2 == 1'd1))) begin
        temporary_key_1_V_1_1_reg_837 <= temporary_key_1_V_7_reg_467;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln163_fu_1086_p2 == 1'd1) & (icmp_ln879_1_fu_1129_p2 == 1'd0) & (icmp_ln879_fu_1123_p2 == 1'd0))) begin
        temporary_key_1_V_1_1_reg_837 <= temporary_key_1_V_1_reg_340;
    end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln879_reg_1582 == 1'd1))) begin
        temporary_key_1_V_1_1_reg_837 <= temporary_key_1_V_5_reg_702;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd1))) begin
        temporary_key_1_V_1_3_reg_409 <= expanded_key_V_q0;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd2)) | ((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd3)))) begin
        temporary_key_1_V_1_3_reg_409 <= temporary_key_1_V_1_reg_340;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        temporary_key_1_V_1_reg_340 <= temporary_key_1_V_1_3_reg_409;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln887_fu_1080_p2 == 1'd1))) begin
        temporary_key_1_V_1_reg_340 <= temporary_key_1_V_0_reg_270;
    end
end

always @ (posedge ap_clk) begin
    if (((i3_0_reg_605 == 2'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        temporary_key_1_V_3_1_reg_648 <= temporary_key_0_V_6_reg_617;
    end else if (((~(i3_0_reg_605 == 2'd1) & ~(i3_0_reg_605 == 2'd0) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == ap_CS_fsm_state19) & (i3_0_reg_605 == 2'd0)))) begin
        temporary_key_1_V_3_1_reg_648 <= temporary_key_1_V_3_reg_583;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        temporary_key_1_V_3_reg_583 <= temporary_key_1_V_3_1_reg_648;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_fu_1123_p2 == 1'd1) & (icmp_ln163_fu_1086_p2 == 1'd1))) begin
        temporary_key_1_V_3_reg_583 <= temporary_key_1_V_1_reg_340;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln179_reg_1638 == 2'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        temporary_key_1_V_5_1_reg_771 <= temporary_key_0_V_7_fu_1260_p1;
    end else if ((((1'b1 == ap_CS_fsm_state22) & (trunc_ln179_reg_1638 == 2'd0)) | ((trunc_ln179_reg_1638 == 2'd2) & (1'b1 == ap_CS_fsm_state22)) | ((trunc_ln179_reg_1638 == 2'd3) & (1'b1 == ap_CS_fsm_state22)))) begin
        temporary_key_1_V_5_1_reg_771 <= temporary_key_1_V_5_reg_702;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        temporary_key_1_V_5_reg_702 <= temporary_key_1_V_5_1_reg_771;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln171_fu_1184_p2 == 1'd1))) begin
        temporary_key_1_V_5_reg_702 <= temporary_key_1_V_3_reg_583;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd1))) begin
        temporary_key_1_V_7_1_reg_536 <= temporary_key_0_V_8_fu_1180_p1;
    end else if ((((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd0)) | ((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd2)) | ((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd3)))) begin
        temporary_key_1_V_7_1_reg_536 <= temporary_key_1_V_7_reg_467;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        temporary_key_1_V_7_reg_467 <= temporary_key_1_V_7_1_reg_536;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_1_fu_1129_p2 == 1'd1) & (icmp_ln163_fu_1086_p2 == 1'd1) & (icmp_ln879_fu_1123_p2 == 1'd0))) begin
        temporary_key_1_V_7_reg_467 <= temporary_key_1_V_1_reg_340;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        temporary_key_2_V_11_reg_878 <= ap_phi_mux_temporary_key_2_V_1_2_phi_fu_947_p8;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temporary_key_2_V_11_reg_878 <= ap_phi_mux_temporary_key_2_V_1_1_phi_fu_825_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln190_fu_1135_p2 == 1'd1))) begin
        temporary_key_2_V_1_1_reg_822 <= temporary_key_2_V_7_reg_456;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln163_fu_1086_p2 == 1'd1) & (icmp_ln879_1_fu_1129_p2 == 1'd0) & (icmp_ln879_fu_1123_p2 == 1'd0))) begin
        temporary_key_2_V_1_1_reg_822 <= temporary_key_2_V_1_reg_329;
    end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln879_reg_1582 == 1'd1))) begin
        temporary_key_2_V_1_1_reg_822 <= temporary_key_2_V_5_reg_691;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd2))) begin
        temporary_key_2_V_1_3_reg_391 <= expanded_key_V_q0;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd3)))) begin
        temporary_key_2_V_1_3_reg_391 <= temporary_key_2_V_1_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        temporary_key_2_V_1_reg_329 <= temporary_key_2_V_1_3_reg_391;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln887_fu_1080_p2 == 1'd1))) begin
        temporary_key_2_V_1_reg_329 <= temporary_key_2_V_0_reg_258;
    end
end

always @ (posedge ap_clk) begin
    if ((((i3_0_reg_605 == 2'd1) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == ap_CS_fsm_state19) & (i3_0_reg_605 == 2'd0)))) begin
        temporary_key_2_V_3_1_reg_632 <= temporary_key_2_V_3_reg_572;
    end else if ((~(i3_0_reg_605 == 2'd1) & ~(i3_0_reg_605 == 2'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        temporary_key_2_V_3_1_reg_632 <= temporary_key_0_V_6_reg_617;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        temporary_key_2_V_3_reg_572 <= temporary_key_2_V_3_1_reg_632;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_fu_1123_p2 == 1'd1) & (icmp_ln163_fu_1086_p2 == 1'd1))) begin
        temporary_key_2_V_3_reg_572 <= temporary_key_2_V_1_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln179_reg_1638 == 2'd2) & (1'b1 == ap_CS_fsm_state22))) begin
        temporary_key_2_V_5_1_reg_753 <= temporary_key_0_V_7_fu_1260_p1;
    end else if ((((1'b1 == ap_CS_fsm_state22) & (trunc_ln179_reg_1638 == 2'd0)) | ((trunc_ln179_reg_1638 == 2'd1) & (1'b1 == ap_CS_fsm_state22)) | ((trunc_ln179_reg_1638 == 2'd3) & (1'b1 == ap_CS_fsm_state22)))) begin
        temporary_key_2_V_5_1_reg_753 <= temporary_key_2_V_5_reg_691;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        temporary_key_2_V_5_reg_691 <= temporary_key_2_V_5_1_reg_753;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln171_fu_1184_p2 == 1'd1))) begin
        temporary_key_2_V_5_reg_691 <= temporary_key_2_V_3_reg_572;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd2))) begin
        temporary_key_2_V_7_1_reg_518 <= temporary_key_0_V_8_fu_1180_p1;
    end else if ((((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd0)) | ((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd1)) | ((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd3)))) begin
        temporary_key_2_V_7_1_reg_518 <= temporary_key_2_V_7_reg_456;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        temporary_key_2_V_7_reg_456 <= temporary_key_2_V_7_1_reg_518;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_1_fu_1129_p2 == 1'd1) & (icmp_ln163_fu_1086_p2 == 1'd1) & (icmp_ln879_fu_1123_p2 == 1'd0))) begin
        temporary_key_2_V_7_reg_456 <= temporary_key_2_V_1_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd2)))) begin
        temporary_key_3_V_1_1_reg_373 <= temporary_key_3_V_1_reg_318;
    end else if (((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd3))) begin
        temporary_key_3_V_1_1_reg_373 <= expanded_key_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        temporary_key_3_V_1_reg_318 <= temporary_key_3_V_1_1_reg_373;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln887_fu_1080_p2 == 1'd1))) begin
        temporary_key_3_V_1_reg_318 <= temporary_key_3_V_0_reg_246;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state22) & (trunc_ln179_reg_1638 == 2'd0)) | ((trunc_ln179_reg_1638 == 2'd1) & (1'b1 == ap_CS_fsm_state22)) | ((trunc_ln179_reg_1638 == 2'd2) & (1'b1 == ap_CS_fsm_state22)))) begin
        temporary_key_3_V_3_1_reg_735 <= temporary_key_3_V_3_reg_680;
    end else if (((trunc_ln179_reg_1638 == 2'd3) & (1'b1 == ap_CS_fsm_state22))) begin
        temporary_key_3_V_3_1_reg_735 <= temporary_key_0_V_7_fu_1260_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        temporary_key_3_V_3_reg_680 <= temporary_key_3_V_3_1_reg_735;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln171_fu_1184_p2 == 1'd1))) begin
        temporary_key_3_V_3_reg_680 <= temporary_key_3_V_reg_351;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd0)) | ((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd1)) | ((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd2)))) begin
        temporary_key_3_V_5_1_reg_500 <= temporary_key_3_V_5_reg_445;
    end else if (((1'b1 == ap_CS_fsm_state16) & (trunc_ln192_reg_1605 == 2'd3))) begin
        temporary_key_3_V_5_1_reg_500 <= temporary_key_0_V_8_fu_1180_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        temporary_key_3_V_5_reg_445 <= temporary_key_3_V_5_1_reg_500;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_1_fu_1129_p2 == 1'd1) & (icmp_ln163_fu_1086_p2 == 1'd1) & (icmp_ln879_fu_1123_p2 == 1'd0))) begin
        temporary_key_3_V_5_reg_445 <= temporary_key_3_V_1_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln190_fu_1135_p2 == 1'd1))) begin
        temporary_key_3_V_9_1_reg_807 <= temporary_key_3_V_5_reg_445;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln163_fu_1086_p2 == 1'd1) & (icmp_ln879_1_fu_1129_p2 == 1'd0) & (icmp_ln879_fu_1123_p2 == 1'd0))) begin
        temporary_key_3_V_9_1_reg_807 <= temporary_key_3_V_1_reg_318;
    end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln879_reg_1582 == 1'd1))) begin
        temporary_key_3_V_9_1_reg_807 <= temporary_key_3_V_3_reg_680;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        temporary_key_3_V_9_reg_866 <= ap_phi_mux_temporary_key_3_V_9_2_phi_fu_929_p8;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temporary_key_3_V_9_reg_866 <= ap_phi_mux_temporary_key_3_V_9_1_phi_fu_810_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd0))) begin
        temporary_key_3_V_b_reg_427 <= expanded_key_V_q0;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd2)) | ((1'b1 == ap_CS_fsm_state13) & (trunc_ln180_1_reg_1578 == 2'd3)))) begin
        temporary_key_3_V_b_reg_427 <= temporary_key_3_V_reg_351;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        temporary_key_3_V_reg_351 <= temporary_key_3_V_b_reg_427;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln887_fu_1080_p2 == 1'd1))) begin
        temporary_key_3_V_reg_351 <= temporary_key_0_V_0_reg_282;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (icmp_ln216_fu_1493_p2 == 1'd0))) begin
        add_ln180_9_reg_1722 <= add_ln180_9_fu_1509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i_10_reg_1663 <= i_10_fu_1281_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_4_reg_1568 <= i_4_fu_1092_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_5_reg_1704 <= i_5_fu_1461_p2;
        zext_ln214_reg_1696[2 : 0] <= zext_ln214_fu_1451_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_6_reg_1625 <= i_6_fu_1190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_7_reg_1600 <= i_7_fu_1141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_8_reg_1633 <= i_8_fu_1202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln152_fu_1058_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9))) begin
        i_reg_1545 <= i_fu_1064_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln163_fu_1086_p2 == 1'd1))) begin
        icmp_ln879_reg_1582 <= icmp_ln879_fu_1123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        j_reg_1717 <= j_fu_1499_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln152_fu_1058_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln152_fu_1058_p2 == 1'd0))) begin
        key_V_addr_read_reg_1550 <= m_axi_key_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        key_V_addr_reg_1536 <= zext_ln180_19_fu_1048_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln214_fu_1455_p2 == 1'd0))) begin
        sub_ln180_reg_1709[8 : 2] <= sub_ln180_fu_1487_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln205_fu_1337_p2 == 1'd1))) begin
        temporary_key_0_V_0_reg_282 <= temporary_key_0_V_116_reg_902;
        temporary_key_1_V_0_reg_270 <= temporary_key_1_V_11_reg_890;
        temporary_key_2_V_0_reg_258 <= temporary_key_2_V_11_reg_878;
        temporary_key_3_V_0_reg_246 <= temporary_key_3_V_9_reg_866;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln177_fu_1196_p2 == 1'd0))) begin
        trunc_ln179_reg_1638 <= trunc_ln179_fu_1208_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln163_fu_1086_p2 == 1'd0))) begin
        trunc_ln180_1_reg_1578 <= trunc_ln180_1_fu_1119_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln190_fu_1135_p2 == 1'd0))) begin
        trunc_ln192_reg_1605 <= trunc_ln192_fu_1147_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln200_fu_1275_p2 == 1'd0))) begin
        trunc_ln719_reg_1673 <= trunc_ln719_fu_1310_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln214_fu_1455_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln879_reg_1582 == 1'd1))) begin
        ap_phi_mux_temporary_key_0_V_1_1_phi_fu_855_p6 = temporary_key_0_V_1_fu_1268_p2;
    end else begin
        ap_phi_mux_temporary_key_0_V_1_1_phi_fu_855_p6 = temporary_key_0_V_1_1_reg_852;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (trunc_ln719_reg_1673 == 2'd0))) begin
        ap_phi_mux_temporary_key_0_V_1_2_phi_fu_983_p8 = temporary_key_0_V_9_fu_1327_p2;
    end else if ((((trunc_ln719_reg_1673 == 2'd1) & (1'b1 == ap_CS_fsm_state26)) | ((trunc_ln719_reg_1673 == 2'd2) & (1'b1 == ap_CS_fsm_state26)) | ((trunc_ln719_reg_1673 == 2'd3) & (1'b1 == ap_CS_fsm_state26)))) begin
        ap_phi_mux_temporary_key_0_V_1_2_phi_fu_983_p8 = temporary_key_0_V_116_reg_902;
    end else begin
        ap_phi_mux_temporary_key_0_V_1_2_phi_fu_983_p8 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln879_reg_1582 == 1'd1))) begin
        ap_phi_mux_temporary_key_1_V_1_1_phi_fu_840_p6 = temporary_key_1_V_5_reg_702;
    end else begin
        ap_phi_mux_temporary_key_1_V_1_1_phi_fu_840_p6 = temporary_key_1_V_1_1_reg_837;
    end
end

always @ (*) begin
    if (((trunc_ln719_reg_1673 == 2'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_phi_mux_temporary_key_1_V_1_2_phi_fu_965_p8 = temporary_key_0_V_9_fu_1327_p2;
    end else if ((((1'b1 == ap_CS_fsm_state26) & (trunc_ln719_reg_1673 == 2'd0)) | ((trunc_ln719_reg_1673 == 2'd2) & (1'b1 == ap_CS_fsm_state26)) | ((trunc_ln719_reg_1673 == 2'd3) & (1'b1 == ap_CS_fsm_state26)))) begin
        ap_phi_mux_temporary_key_1_V_1_2_phi_fu_965_p8 = temporary_key_1_V_11_reg_890;
    end else begin
        ap_phi_mux_temporary_key_1_V_1_2_phi_fu_965_p8 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln879_reg_1582 == 1'd1))) begin
        ap_phi_mux_temporary_key_2_V_1_1_phi_fu_825_p6 = temporary_key_2_V_5_reg_691;
    end else begin
        ap_phi_mux_temporary_key_2_V_1_1_phi_fu_825_p6 = temporary_key_2_V_1_1_reg_822;
    end
end

always @ (*) begin
    if (((trunc_ln719_reg_1673 == 2'd2) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_phi_mux_temporary_key_2_V_1_2_phi_fu_947_p8 = temporary_key_0_V_9_fu_1327_p2;
    end else if ((((1'b1 == ap_CS_fsm_state26) & (trunc_ln719_reg_1673 == 2'd0)) | ((trunc_ln719_reg_1673 == 2'd1) & (1'b1 == ap_CS_fsm_state26)) | ((trunc_ln719_reg_1673 == 2'd3) & (1'b1 == ap_CS_fsm_state26)))) begin
        ap_phi_mux_temporary_key_2_V_1_2_phi_fu_947_p8 = temporary_key_2_V_11_reg_878;
    end else begin
        ap_phi_mux_temporary_key_2_V_1_2_phi_fu_947_p8 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln879_reg_1582 == 1'd1))) begin
        ap_phi_mux_temporary_key_3_V_9_1_phi_fu_810_p6 = temporary_key_3_V_3_reg_680;
    end else begin
        ap_phi_mux_temporary_key_3_V_9_1_phi_fu_810_p6 = temporary_key_3_V_9_1_reg_807;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state26) & (trunc_ln719_reg_1673 == 2'd0)) | ((trunc_ln719_reg_1673 == 2'd1) & (1'b1 == ap_CS_fsm_state26)) | ((trunc_ln719_reg_1673 == 2'd2) & (1'b1 == ap_CS_fsm_state26)))) begin
        ap_phi_mux_temporary_key_3_V_9_2_phi_fu_929_p8 = temporary_key_3_V_9_reg_866;
    end else if (((trunc_ln719_reg_1673 == 2'd3) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_phi_mux_temporary_key_3_V_9_2_phi_fu_929_p8 = temporary_key_0_V_9_fu_1327_p2;
    end else begin
        ap_phi_mux_temporary_key_3_V_9_2_phi_fu_929_p8 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln214_fu_1455_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        expanded_key_V_address0 = zext_ln218_fu_1527_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        expanded_key_V_address0 = zext_ln544_2_fu_1359_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        expanded_key_V_address0 = zext_ln544_1_fu_1305_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        expanded_key_V_address0 = zext_ln544_fu_1114_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        expanded_key_V_address0 = zext_ln154_fu_1075_p1;
    end else begin
        expanded_key_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state12))) begin
        expanded_key_V_ce0 = 1'b1;
    end else begin
        expanded_key_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        expanded_key_V_d0 = tmp_s_fu_1368_p6;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        expanded_key_V_d0 = key_V_addr_read_reg_1550;
    end else begin
        expanded_key_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state27) & (icmp_ln205_fu_1337_p2 == 1'd0)))) begin
        expanded_key_V_we0 = 1'b1;
    end else begin
        expanded_key_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        expanded_key_matrix_V_ce0 = 1'b1;
    end else begin
        expanded_key_matrix_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        expanded_key_matrix_V_we0 = 1'b1;
    end else begin
        expanded_key_matrix_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        key_V_blk_n_AR = m_axi_key_V_ARREADY;
    end else begin
        key_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln152_fu_1058_p2 == 1'd0))) begin
        key_V_blk_n_R = m_axi_key_V_RVALID;
    end else begin
        key_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_key_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_key_V_ARVALID = 1'b1;
    end else begin
        m_axi_key_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln152_fu_1058_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln152_fu_1058_p2 == 1'd0))) begin
        m_axi_key_V_RREADY = 1'b1;
    end else begin
        m_axi_key_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        rcon_ce0 = 1'b1;
    end else begin
        rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        s_box_V_address0 = sext_ln78_7_fu_1236_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        s_box_V_address0 = sext_ln78_fu_1175_p1;
    end else begin
        s_box_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15))) begin
        s_box_V_ce0 = 1'b1;
    end else begin
        s_box_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_key_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln152_fu_1058_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln152_fu_1058_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln152_fu_1058_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln152_fu_1058_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln887_fu_1080_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_fu_1123_p2 == 1'd1) & (icmp_ln163_fu_1086_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln879_1_fu_1129_p2 == 1'd1) & (icmp_ln163_fu_1086_p2 == 1'd1) & (icmp_ln879_fu_1123_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln163_fu_1086_p2 == 1'd1) & (icmp_ln879_1_fu_1129_p2 == 1'd0) & (icmp_ln879_fu_1123_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln190_fu_1135_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln171_fu_1184_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln177_fu_1196_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln200_fu_1275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln205_fu_1337_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln214_fu_1455_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (icmp_ln216_fu_1493_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln180_9_fu_1509_p2 = (zext_ln180_21_fu_1505_p1 + sub_ln180_reg_1709);

assign add_ln180_fu_1042_p2 = (key_V_offset_cast_fu_1030_p1 + zext_ln180_fu_1038_p1);

assign add_ln218_fu_1522_p2 = (zext_ln214_reg_1696 + shl_ln_fu_1514_p3);

assign add_ln78_7_fu_1230_p2 = (11'd256 + trunc_ln78_7_fu_1226_p1);

assign add_ln78_fu_1169_p2 = (11'd256 + trunc_ln78_fu_1165_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state9 = ((m_axi_key_V_RVALID == 1'b0) & (icmp_ln152_fu_1058_p2 == 1'd0));
end

assign ap_phi_mux_i3_0_phi_fu_609_p4 = i3_0_reg_605;

assign cur_len_V_fu_1445_p2 = (8'd4 + p_084_0_reg_306);

assign expanded_key_matrix_V_address0 = sext_ln180_fu_1532_p1;

assign expanded_key_matrix_V_d0 = expanded_key_V_q0;

assign i_10_fu_1281_p2 = (i7_0_reg_914 + 3'd1);

assign i_11_fu_1343_p2 = (i_op_assign_4_reg_997 + 3'd1);

assign i_4_fu_1092_p2 = (i2_0_reg_362 + 3'd1);

assign i_5_fu_1461_p2 = (i9_0_reg_1008 + 3'd1);

assign i_6_fu_1190_p2 = (i3_0_reg_605 + 2'd1);

assign i_7_fu_1141_p2 = (i5_0_reg_489 + 3'd1);

assign i_8_fu_1202_p2 = (i4_0_reg_724 + 3'd1);

assign i_fu_1064_p2 = (i_0_reg_234 + 6'd1);

assign i_op_assign_3_fu_1287_p3 = {{3'd4}, {i7_0_reg_914}};

assign icmp_ln152_fu_1058_p2 = ((i_0_reg_234 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln163_fu_1086_p2 = ((i2_0_reg_362 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_1184_p2 = ((i3_0_reg_605 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_1196_p2 = ((i4_0_reg_724 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln190_fu_1135_p2 = ((i5_0_reg_489 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_1275_p2 = ((i7_0_reg_914 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln205_fu_1337_p2 = ((i_op_assign_4_reg_997 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln214_fu_1455_p2 = ((i9_0_reg_1008 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_1493_p2 = ((j_0_reg_1019 == 6'd60) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_1129_p2 = ((p_0216_0_reg_294 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1123_p2 = ((p_0216_0_reg_294 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_1080_p2 = ((p_084_0_reg_306 < 8'd240) ? 1'b1 : 1'b0);

assign j_fu_1499_p2 = (j_0_reg_1019 + 6'd1);

assign key_V_offset_cast_fu_1030_p1 = key_V_offset;

assign m_axi_key_V_ARADDR = key_V_addr_reg_1536;

assign m_axi_key_V_ARBURST = 2'd0;

assign m_axi_key_V_ARCACHE = 4'd0;

assign m_axi_key_V_ARID = 1'd0;

assign m_axi_key_V_ARLEN = 32'd32;

assign m_axi_key_V_ARLOCK = 2'd0;

assign m_axi_key_V_ARPROT = 3'd0;

assign m_axi_key_V_ARQOS = 4'd0;

assign m_axi_key_V_ARREGION = 4'd0;

assign m_axi_key_V_ARSIZE = 3'd0;

assign m_axi_key_V_ARUSER = 1'd0;

assign m_axi_key_V_AWADDR = 32'd0;

assign m_axi_key_V_AWBURST = 2'd0;

assign m_axi_key_V_AWCACHE = 4'd0;

assign m_axi_key_V_AWID = 1'd0;

assign m_axi_key_V_AWLEN = 32'd0;

assign m_axi_key_V_AWLOCK = 2'd0;

assign m_axi_key_V_AWPROT = 3'd0;

assign m_axi_key_V_AWQOS = 4'd0;

assign m_axi_key_V_AWREGION = 4'd0;

assign m_axi_key_V_AWSIZE = 3'd0;

assign m_axi_key_V_AWUSER = 1'd0;

assign m_axi_key_V_AWVALID = 1'b0;

assign m_axi_key_V_BREADY = 1'b0;

assign m_axi_key_V_WDATA = 16'd0;

assign m_axi_key_V_WID = 1'd0;

assign m_axi_key_V_WLAST = 1'b0;

assign m_axi_key_V_WSTRB = 2'd0;

assign m_axi_key_V_WUSER = 1'd0;

assign m_axi_key_V_WVALID = 1'b0;

assign n_V_fu_1249_p0 = n_V_1_fu_118;

assign n_V_fu_1249_p2 = ($signed(n_V_fu_1249_p0) + $signed(16'd1));

assign rcon_address0 = sext_ln544_fu_1244_p1;

assign ret_V_4_fu_1299_p2 = ($signed(p_084_0_reg_306) + $signed(sext_ln215_1_fu_1295_p1));

assign ret_V_5_fu_1387_p2 = ($signed(5'd1) + $signed(sext_ln215_2_fu_1383_p1));

assign ret_V_6_fu_1353_p2 = (zext_ln215_fu_1349_p1 + p_084_0_reg_306);

assign ret_V_fu_1108_p2 = ($signed(sext_ln215_fu_1104_p1) + $signed(p_084_0_reg_306));

assign select_ln1372_fu_1437_p3 = ((tmp_1_fu_1393_p3[0:0] === 1'b1) ? sub_ln180_1_fu_1423_p2 : tmp_23_fu_1429_p3);

assign sext_ln180_fu_1532_p1 = $signed(add_ln180_9_reg_1722);

assign sext_ln215_1_fu_1295_p1 = $signed(i_op_assign_3_fu_1287_p3);

assign sext_ln215_2_fu_1383_p1 = p_0216_0_reg_294;

assign sext_ln215_fu_1104_p1 = $signed(xor_ln165_fu_1098_p2);

assign sext_ln544_fu_1244_p0 = n_V_1_fu_118;

assign sext_ln544_fu_1244_p1 = sext_ln544_fu_1244_p0;

assign sext_ln78_7_fu_1236_p1 = $signed(add_ln78_7_fu_1230_p2);

assign sext_ln78_fu_1175_p1 = $signed(add_ln78_fu_1169_p2);

assign shl_ln_fu_1514_p3 = {{j_0_reg_1019}, {2'd0}};

assign sub_ln180_1_fu_1423_p2 = (4'd0 - tmp_2_fu_1415_p3);

assign sub_ln180_fu_1487_p2 = (tmp_21_fu_1467_p3 - zext_ln180_20_fu_1483_p1);

assign temp_V_1_fu_1212_p5 = i4_0_reg_724[1:0];

assign temp_V_fu_1151_p5 = i5_0_reg_489[1:0];

assign temporary_key_0_V_1_fu_1268_p2 = (zext_ln719_fu_1264_p1 ^ temporary_key_0_V_5_reg_713);

assign temporary_key_0_V_7_fu_1260_p1 = s_box_V_q0;

assign temporary_key_0_V_8_fu_1180_p1 = s_box_V_q0;

assign temporary_key_0_V_9_fu_1327_p2 = (tmp_fu_1314_p6 ^ expanded_key_V_q0);

assign tmp_1_fu_1393_p3 = ret_V_5_fu_1387_p2[32'd4];

assign tmp_21_fu_1467_p3 = {{i9_0_reg_1008}, {6'd0}};

assign tmp_22_fu_1475_p3 = {{i9_0_reg_1008}, {2'd0}};

assign tmp_23_fu_1429_p3 = {{1'd0}, {trunc_ln1372_fu_1401_p1}};

assign tmp_2_fu_1415_p3 = {{1'd0}, {xor_ln1372_fu_1409_p2}};

assign tmp_s_fu_1368_p5 = i_op_assign_4_reg_997[1:0];

assign trunc_ln1372_1_fu_1405_p1 = p_0216_0_reg_294[2:0];

assign trunc_ln1372_fu_1401_p1 = ret_V_5_fu_1387_p2[2:0];

assign trunc_ln179_fu_1208_p1 = i4_0_reg_724[1:0];

assign trunc_ln180_1_fu_1119_p1 = i2_0_reg_362[1:0];

assign trunc_ln180_fu_1034_p1 = key_V_offset_offset[5:0];

assign trunc_ln192_fu_1147_p1 = i5_0_reg_489[1:0];

assign trunc_ln719_fu_1310_p1 = i7_0_reg_914[1:0];

assign trunc_ln78_7_fu_1226_p1 = temp_V_1_fu_1212_p6[10:0];

assign trunc_ln78_fu_1165_p1 = temp_V_fu_1151_p6[10:0];

assign xor_ln1372_fu_1409_p2 = (trunc_ln1372_1_fu_1405_p1 ^ 3'd7);

assign xor_ln165_fu_1098_p2 = (i2_0_reg_362 ^ 3'd4);

assign zext_ln154_fu_1075_p1 = i_0_reg_234;

assign zext_ln180_19_fu_1048_p1 = add_ln180_fu_1042_p2;

assign zext_ln180_20_fu_1483_p1 = tmp_22_fu_1475_p3;

assign zext_ln180_21_fu_1505_p1 = j_0_reg_1019;

assign zext_ln180_fu_1038_p1 = trunc_ln180_fu_1034_p1;

assign zext_ln214_fu_1451_p1 = i9_0_reg_1008;

assign zext_ln215_fu_1349_p1 = i_op_assign_4_reg_997;

assign zext_ln218_fu_1527_p1 = add_ln218_fu_1522_p2;

assign zext_ln544_1_fu_1305_p1 = ret_V_4_fu_1299_p2;

assign zext_ln544_2_fu_1359_p1 = ret_V_6_fu_1353_p2;

assign zext_ln544_fu_1114_p1 = ret_V_fu_1108_p2;

assign zext_ln719_fu_1264_p1 = rcon_q0;

always @ (posedge ap_clk) begin
    zext_ln214_reg_1696[7:3] <= 5'b00000;
    sub_ln180_reg_1709[1:0] <= 2'b00;
end

endmodule //aes_expand_key
