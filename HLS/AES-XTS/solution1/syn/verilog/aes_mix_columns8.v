// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_mix_columns8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_matrix_V_address0,
        state_matrix_V_ce0,
        state_matrix_V_we0,
        state_matrix_V_d0,
        state_matrix_V_q0,
        state_matrix_V_address1,
        state_matrix_V_ce1,
        state_matrix_V_we1,
        state_matrix_V_d1,
        state_matrix_V_q1,
        constant_matrix_V_offset,
        multiplication_V_address0,
        multiplication_V_ce0,
        multiplication_V_q0,
        multiplication_V_address1,
        multiplication_V_ce1,
        multiplication_V_q1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_pp0_stage3 = 10'd16;
parameter    ap_ST_fsm_pp0_stage4 = 10'd32;
parameter    ap_ST_fsm_pp0_stage5 = 10'd64;
parameter    ap_ST_fsm_pp0_stage6 = 10'd128;
parameter    ap_ST_fsm_pp0_stage7 = 10'd256;
parameter    ap_ST_fsm_state13 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_matrix_V_address0;
output   state_matrix_V_ce0;
output   state_matrix_V_we0;
output  [15:0] state_matrix_V_d0;
input  [15:0] state_matrix_V_q0;
output  [3:0] state_matrix_V_address1;
output   state_matrix_V_ce1;
output   state_matrix_V_we1;
output  [15:0] state_matrix_V_d1;
input  [15:0] state_matrix_V_q1;
input  [1:0] constant_matrix_V_offset;
output  [11:0] multiplication_V_address0;
output   multiplication_V_ce0;
input  [7:0] multiplication_V_q0;
output  [11:0] multiplication_V_address1;
output   multiplication_V_ce1;
input  [7:0] multiplication_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_matrix_V_address0;
reg state_matrix_V_ce0;
reg state_matrix_V_we0;
reg[15:0] state_matrix_V_d0;
reg[3:0] state_matrix_V_address1;
reg state_matrix_V_ce1;
reg state_matrix_V_we1;
reg[15:0] state_matrix_V_d1;
reg[11:0] multiplication_V_address0;
reg multiplication_V_ce0;
reg[11:0] multiplication_V_address1;
reg multiplication_V_ce1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] column_index_0_reg_247;
reg   [7:0] reg_258;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state12_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln103_reg_966;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] reg_262;
wire   [0:0] icmp_ln103_fu_266_p2;
reg   [0:0] icmp_ln103_reg_966_pp0_iter1_reg;
wire   [2:0] column_index_fu_272_p2;
reg   [2:0] column_index_reg_970;
reg   [3:0] state_matrix_V_addr_reg_975;
wire  signed [2:0] xor_ln180_fu_283_p2;
reg  signed [2:0] xor_ln180_reg_981;
reg   [3:0] state_matrix_V_addr_11_reg_986;
reg   [3:0] state_matrix_V_addr_12_reg_992;
reg   [3:0] state_matrix_V_addr_13_reg_998;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state11_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [3:0] state_matrix_V_addr_13_reg_998_pp0_iter1_reg;
wire   [12:0] trunc_ln544_fu_311_p1;
reg   [12:0] trunc_ln544_reg_1004;
wire   [12:0] trunc_ln544_1_fu_315_p1;
reg   [12:0] trunc_ln544_1_reg_1011;
wire   [12:0] trunc_ln544_2_fu_387_p1;
reg   [12:0] trunc_ln544_2_reg_1028;
wire   [12:0] trunc_ln544_3_fu_391_p1;
reg   [12:0] trunc_ln544_3_reg_1035;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [12:0] add_ln78_6_fu_796_p2;
reg   [12:0] add_ln78_6_reg_1092;
wire   [12:0] add_ln719_9_fu_824_p2;
reg   [12:0] add_ln719_9_reg_1097;
wire   [12:0] add_ln719_10_fu_852_p2;
reg   [12:0] add_ln719_10_reg_1102;
wire   [12:0] add_ln719_11_fu_880_p2;
reg   [12:0] add_ln719_11_reg_1107;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [7:0] xor_ln719_11_fu_936_p2;
reg   [7:0] xor_ln719_11_reg_1132;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage2_subdone;
reg   [2:0] ap_phi_mux_column_index_0_phi_fu_251_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln106_fu_278_p1;
wire   [63:0] zext_ln180_fu_289_p1;
wire   [63:0] tmp_16_fu_294_p3;
wire   [63:0] zext_ln180_18_fu_306_p1;
wire    ap_block_pp0_stage1;
wire  signed [63:0] sext_ln78_fu_348_p1;
wire  signed [63:0] sext_ln719_fu_382_p1;
wire  signed [63:0] sext_ln719_1_fu_424_p1;
wire    ap_block_pp0_stage2;
wire  signed [63:0] sext_ln719_2_fu_458_p1;
wire  signed [63:0] sext_ln78_4_fu_514_p1;
wire    ap_block_pp0_stage3;
wire  signed [63:0] sext_ln719_3_fu_547_p1;
wire  signed [63:0] sext_ln719_4_fu_580_p1;
wire    ap_block_pp0_stage4;
wire  signed [63:0] sext_ln719_5_fu_613_p1;
wire  signed [63:0] sext_ln78_5_fu_669_p1;
wire    ap_block_pp0_stage5;
wire  signed [63:0] sext_ln719_6_fu_702_p1;
wire  signed [63:0] sext_ln719_7_fu_735_p1;
wire    ap_block_pp0_stage6;
wire  signed [63:0] sext_ln719_8_fu_768_p1;
wire  signed [63:0] sext_ln78_6_fu_908_p1;
wire    ap_block_pp0_stage7;
wire  signed [63:0] sext_ln719_9_fu_912_p1;
wire  signed [63:0] sext_ln719_10_fu_916_p1;
wire  signed [63:0] sext_ln719_11_fu_920_p1;
wire   [15:0] zext_ln719_fu_481_p1;
wire   [15:0] zext_ln719_1_fu_636_p1;
wire   [15:0] zext_ln719_2_fu_903_p1;
wire   [15:0] zext_ln719_3_fu_942_p1;
wire  signed [3:0] sext_ln180_fu_303_p1;
wire   [7:0] tmp_1_fu_319_p5;
wire   [4:0] trunc_ln78_fu_330_p1;
wire   [12:0] zext_ln78_cast_fu_334_p3;
wire   [12:0] add_ln78_fu_342_p2;
wire   [7:0] tmp_2_fu_353_p5;
wire   [4:0] trunc_ln719_fu_364_p1;
wire   [12:0] zext_ln719_4_cast_fu_368_p3;
wire   [12:0] add_ln719_fu_376_p2;
wire   [7:0] tmp_3_fu_395_p5;
wire   [4:0] trunc_ln719_1_fu_406_p1;
wire   [12:0] zext_ln719_5_cast_fu_410_p3;
wire   [12:0] add_ln719_1_fu_418_p2;
wire   [7:0] tmp_4_fu_429_p5;
wire   [4:0] trunc_ln719_2_fu_440_p1;
wire   [12:0] zext_ln719_6_cast_fu_444_p3;
wire   [12:0] add_ln719_2_fu_452_p2;
wire   [7:0] xor_ln719_1_fu_469_p2;
wire   [7:0] xor_ln719_fu_463_p2;
wire   [7:0] xor_ln719_2_fu_475_p2;
wire   [7:0] tmp_5_fu_486_p5;
wire   [4:0] trunc_ln78_4_fu_497_p1;
wire   [12:0] zext_ln78_5_cast_fu_501_p3;
wire   [12:0] add_ln78_4_fu_509_p2;
wire   [7:0] tmp_6_fu_519_p5;
wire   [4:0] trunc_ln719_3_fu_530_p1;
wire   [12:0] zext_ln719_7_cast_fu_534_p3;
wire   [12:0] add_ln719_3_fu_542_p2;
wire   [7:0] tmp_7_fu_552_p5;
wire   [4:0] trunc_ln719_4_fu_563_p1;
wire   [12:0] zext_ln719_8_cast_fu_567_p3;
wire   [12:0] add_ln719_4_fu_575_p2;
wire   [7:0] tmp_8_fu_585_p5;
wire   [4:0] trunc_ln719_5_fu_596_p1;
wire   [12:0] zext_ln719_9_cast_fu_600_p3;
wire   [12:0] add_ln719_5_fu_608_p2;
wire   [7:0] xor_ln719_4_fu_624_p2;
wire   [7:0] xor_ln719_3_fu_618_p2;
wire   [7:0] xor_ln719_5_fu_630_p2;
wire   [7:0] tmp_9_fu_641_p5;
wire   [4:0] trunc_ln78_5_fu_652_p1;
wire   [12:0] zext_ln78_6_cast_fu_656_p3;
wire   [12:0] add_ln78_5_fu_664_p2;
wire   [7:0] tmp_s_fu_674_p5;
wire   [4:0] trunc_ln719_6_fu_685_p1;
wire   [12:0] zext_ln719_10_cast_fu_689_p3;
wire   [12:0] add_ln719_6_fu_697_p2;
wire   [7:0] tmp_10_fu_707_p5;
wire   [4:0] trunc_ln719_7_fu_718_p1;
wire   [12:0] zext_ln719_11_cast_fu_722_p3;
wire   [12:0] add_ln719_7_fu_730_p2;
wire   [7:0] tmp_11_fu_740_p5;
wire   [4:0] trunc_ln719_8_fu_751_p1;
wire   [12:0] zext_ln719_12_cast_fu_755_p3;
wire   [12:0] add_ln719_8_fu_763_p2;
wire   [7:0] tmp_12_fu_773_p5;
wire   [4:0] trunc_ln78_6_fu_784_p1;
wire   [12:0] zext_ln78_7_cast_fu_788_p3;
wire   [7:0] tmp_13_fu_801_p5;
wire   [4:0] trunc_ln719_9_fu_812_p1;
wire   [12:0] zext_ln719_13_cast_fu_816_p3;
wire   [7:0] tmp_14_fu_829_p5;
wire   [4:0] trunc_ln719_10_fu_840_p1;
wire   [12:0] zext_ln719_14_cast_fu_844_p3;
wire   [7:0] tmp_15_fu_857_p5;
wire   [4:0] trunc_ln719_11_fu_868_p1;
wire   [12:0] zext_ln719_15_cast_fu_872_p3;
wire   [7:0] xor_ln719_7_fu_891_p2;
wire   [7:0] xor_ln719_6_fu_885_p2;
wire   [7:0] xor_ln719_8_fu_897_p2;
wire   [7:0] xor_ln719_10_fu_930_p2;
wire   [7:0] xor_ln719_9_fu_924_p2;
wire    ap_CS_fsm_state13;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U26(
    .din0(8'd0),
    .din1(8'd2),
    .din2(8'd14),
    .din3(constant_matrix_V_offset),
    .dout(tmp_1_fu_319_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U27(
    .din0(8'd0),
    .din1(8'd3),
    .din2(8'd11),
    .din3(constant_matrix_V_offset),
    .dout(tmp_2_fu_353_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U28(
    .din0(8'd0),
    .din1(8'd1),
    .din2(8'd13),
    .din3(constant_matrix_V_offset),
    .dout(tmp_3_fu_395_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U29(
    .din0(8'd0),
    .din1(8'd1),
    .din2(8'd9),
    .din3(constant_matrix_V_offset),
    .dout(tmp_4_fu_429_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U30(
    .din0(8'd0),
    .din1(8'd1),
    .din2(8'd9),
    .din3(constant_matrix_V_offset),
    .dout(tmp_5_fu_486_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U31(
    .din0(8'd0),
    .din1(8'd2),
    .din2(8'd14),
    .din3(constant_matrix_V_offset),
    .dout(tmp_6_fu_519_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U32(
    .din0(8'd0),
    .din1(8'd3),
    .din2(8'd11),
    .din3(constant_matrix_V_offset),
    .dout(tmp_7_fu_552_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U33(
    .din0(8'd0),
    .din1(8'd1),
    .din2(8'd13),
    .din3(constant_matrix_V_offset),
    .dout(tmp_8_fu_585_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U34(
    .din0(8'd0),
    .din1(8'd1),
    .din2(8'd13),
    .din3(constant_matrix_V_offset),
    .dout(tmp_9_fu_641_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U35(
    .din0(8'd0),
    .din1(8'd1),
    .din2(8'd9),
    .din3(constant_matrix_V_offset),
    .dout(tmp_s_fu_674_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U36(
    .din0(8'd0),
    .din1(8'd2),
    .din2(8'd14),
    .din3(constant_matrix_V_offset),
    .dout(tmp_10_fu_707_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U37(
    .din0(8'd0),
    .din1(8'd3),
    .din2(8'd11),
    .din3(constant_matrix_V_offset),
    .dout(tmp_11_fu_740_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U38(
    .din0(8'd0),
    .din1(8'd3),
    .din2(8'd11),
    .din3(constant_matrix_V_offset),
    .dout(tmp_12_fu_773_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U39(
    .din0(8'd0),
    .din1(8'd1),
    .din2(8'd13),
    .din3(constant_matrix_V_offset),
    .dout(tmp_13_fu_801_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U40(
    .din0(8'd0),
    .din1(8'd1),
    .din2(8'd9),
    .din3(constant_matrix_V_offset),
    .dout(tmp_14_fu_829_p5)
);

xts_aes_mux_32_8_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
xts_aes_mux_32_8_dEe_U41(
    .din0(8'd0),
    .din1(8'd2),
    .din2(8'd14),
    .din3(constant_matrix_V_offset),
    .dout(tmp_15_fu_857_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_reg_966 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        column_index_0_reg_247 <= column_index_reg_970;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        column_index_0_reg_247 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln103_reg_966 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_ln719_10_reg_1102 <= add_ln719_10_fu_852_p2;
        add_ln719_11_reg_1107 <= add_ln719_11_fu_880_p2;
        add_ln719_9_reg_1097 <= add_ln719_9_fu_824_p2;
        add_ln78_6_reg_1092 <= add_ln78_6_fu_796_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        column_index_reg_970 <= column_index_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln103_reg_966 <= icmp_ln103_fu_266_p2;
        icmp_ln103_reg_966_pp0_iter1_reg <= icmp_ln103_reg_966;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln103_reg_966 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln103_reg_966 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln103_reg_966 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln103_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_258 <= multiplication_V_q0;
        reg_262 <= multiplication_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        state_matrix_V_addr_11_reg_986[2 : 0] <= zext_ln180_fu_289_p1[2 : 0];
        state_matrix_V_addr_12_reg_992[2 : 0] <= tmp_16_fu_294_p3[2 : 0];
        state_matrix_V_addr_reg_975[2 : 0] <= zext_ln106_fu_278_p1[2 : 0];
        xor_ln180_reg_981 <= xor_ln180_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_reg_966 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        state_matrix_V_addr_13_reg_998 <= zext_ln180_18_fu_306_p1;
        trunc_ln544_1_reg_1011 <= trunc_ln544_1_fu_315_p1;
        trunc_ln544_reg_1004 <= trunc_ln544_fu_311_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        state_matrix_V_addr_13_reg_998_pp0_iter1_reg <= state_matrix_V_addr_13_reg_998;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        trunc_ln544_2_reg_1028 <= trunc_ln544_2_fu_387_p1;
        trunc_ln544_3_reg_1035 <= trunc_ln544_3_fu_391_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_reg_966_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        xor_ln719_11_reg_1132 <= xor_ln719_11_fu_936_p2;
    end
end

always @ (*) begin
    if ((icmp_ln103_fu_266_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln103_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_column_index_0_phi_fu_251_p4 = column_index_reg_970;
    end else begin
        ap_phi_mux_column_index_0_phi_fu_251_p4 = column_index_0_reg_247;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        multiplication_V_address0 = sext_ln719_10_fu_916_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        multiplication_V_address0 = sext_ln78_6_fu_908_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        multiplication_V_address0 = sext_ln719_7_fu_735_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        multiplication_V_address0 = sext_ln78_5_fu_669_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        multiplication_V_address0 = sext_ln719_4_fu_580_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        multiplication_V_address0 = sext_ln78_4_fu_514_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        multiplication_V_address0 = sext_ln719_1_fu_424_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        multiplication_V_address0 = sext_ln78_fu_348_p1;
    end else begin
        multiplication_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        multiplication_V_address1 = sext_ln719_11_fu_920_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        multiplication_V_address1 = sext_ln719_9_fu_912_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        multiplication_V_address1 = sext_ln719_8_fu_768_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        multiplication_V_address1 = sext_ln719_6_fu_702_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        multiplication_V_address1 = sext_ln719_5_fu_613_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        multiplication_V_address1 = sext_ln719_3_fu_547_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        multiplication_V_address1 = sext_ln719_2_fu_458_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        multiplication_V_address1 = sext_ln719_fu_382_p1;
    end else begin
        multiplication_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        multiplication_V_ce0 = 1'b1;
    end else begin
        multiplication_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        multiplication_V_ce1 = 1'b1;
    end else begin
        multiplication_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        state_matrix_V_address0 = state_matrix_V_addr_13_reg_998_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        state_matrix_V_address0 = state_matrix_V_addr_11_reg_986;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        state_matrix_V_address0 = state_matrix_V_addr_12_reg_992;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_matrix_V_address0 = zext_ln106_fu_278_p1;
    end else begin
        state_matrix_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            state_matrix_V_address1 = state_matrix_V_addr_12_reg_992;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            state_matrix_V_address1 = state_matrix_V_addr_reg_975;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            state_matrix_V_address1 = zext_ln180_18_fu_306_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            state_matrix_V_address1 = zext_ln180_fu_289_p1;
        end else begin
            state_matrix_V_address1 = 'bx;
        end
    end else begin
        state_matrix_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        state_matrix_V_ce0 = 1'b1;
    end else begin
        state_matrix_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        state_matrix_V_ce1 = 1'b1;
    end else begin
        state_matrix_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        state_matrix_V_d0 = zext_ln719_3_fu_942_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        state_matrix_V_d0 = zext_ln719_1_fu_636_p1;
    end else begin
        state_matrix_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            state_matrix_V_d1 = zext_ln719_2_fu_903_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            state_matrix_V_d1 = zext_ln719_fu_481_p1;
        end else begin
            state_matrix_V_d1 = 'bx;
        end
    end else begin
        state_matrix_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln103_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln103_reg_966_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        state_matrix_V_we0 = 1'b1;
    end else begin
        state_matrix_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln103_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln103_reg_966 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        state_matrix_V_we1 = 1'b1;
    end else begin
        state_matrix_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln103_fu_266_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln103_fu_266_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln719_10_fu_852_p2 = (zext_ln719_14_cast_fu_844_p3 + trunc_ln544_2_reg_1028);

assign add_ln719_11_fu_880_p2 = (zext_ln719_15_cast_fu_872_p3 + trunc_ln544_3_reg_1035);

assign add_ln719_1_fu_418_p2 = (zext_ln719_5_cast_fu_410_p3 + trunc_ln544_2_fu_387_p1);

assign add_ln719_2_fu_452_p2 = (zext_ln719_6_cast_fu_444_p3 + trunc_ln544_3_fu_391_p1);

assign add_ln719_3_fu_542_p2 = (zext_ln719_7_cast_fu_534_p3 + trunc_ln544_1_reg_1011);

assign add_ln719_4_fu_575_p2 = (zext_ln719_8_cast_fu_567_p3 + trunc_ln544_2_reg_1028);

assign add_ln719_5_fu_608_p2 = (zext_ln719_9_cast_fu_600_p3 + trunc_ln544_3_reg_1035);

assign add_ln719_6_fu_697_p2 = (zext_ln719_10_cast_fu_689_p3 + trunc_ln544_1_reg_1011);

assign add_ln719_7_fu_730_p2 = (zext_ln719_11_cast_fu_722_p3 + trunc_ln544_2_reg_1028);

assign add_ln719_8_fu_763_p2 = (zext_ln719_12_cast_fu_755_p3 + trunc_ln544_3_reg_1035);

assign add_ln719_9_fu_824_p2 = (zext_ln719_13_cast_fu_816_p3 + trunc_ln544_1_reg_1011);

assign add_ln719_fu_376_p2 = (zext_ln719_4_cast_fu_368_p3 + trunc_ln544_1_fu_315_p1);

assign add_ln78_4_fu_509_p2 = (zext_ln78_5_cast_fu_501_p3 + trunc_ln544_reg_1004);

assign add_ln78_5_fu_664_p2 = (zext_ln78_6_cast_fu_656_p3 + trunc_ln544_reg_1004);

assign add_ln78_6_fu_796_p2 = (zext_ln78_7_cast_fu_788_p3 + trunc_ln544_reg_1004);

assign add_ln78_fu_342_p2 = (zext_ln78_cast_fu_334_p3 + trunc_ln544_fu_311_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign column_index_fu_272_p2 = (ap_phi_mux_column_index_0_phi_fu_251_p4 + 3'd1);

assign icmp_ln103_fu_266_p2 = ((ap_phi_mux_column_index_0_phi_fu_251_p4 == 3'd4) ? 1'b1 : 1'b0);

assign sext_ln180_fu_303_p1 = xor_ln180_reg_981;

assign sext_ln719_10_fu_916_p1 = $signed(add_ln719_10_reg_1102);

assign sext_ln719_11_fu_920_p1 = $signed(add_ln719_11_reg_1107);

assign sext_ln719_1_fu_424_p1 = $signed(add_ln719_1_fu_418_p2);

assign sext_ln719_2_fu_458_p1 = $signed(add_ln719_2_fu_452_p2);

assign sext_ln719_3_fu_547_p1 = $signed(add_ln719_3_fu_542_p2);

assign sext_ln719_4_fu_580_p1 = $signed(add_ln719_4_fu_575_p2);

assign sext_ln719_5_fu_613_p1 = $signed(add_ln719_5_fu_608_p2);

assign sext_ln719_6_fu_702_p1 = $signed(add_ln719_6_fu_697_p2);

assign sext_ln719_7_fu_735_p1 = $signed(add_ln719_7_fu_730_p2);

assign sext_ln719_8_fu_768_p1 = $signed(add_ln719_8_fu_763_p2);

assign sext_ln719_9_fu_912_p1 = $signed(add_ln719_9_reg_1097);

assign sext_ln719_fu_382_p1 = $signed(add_ln719_fu_376_p2);

assign sext_ln78_4_fu_514_p1 = $signed(add_ln78_4_fu_509_p2);

assign sext_ln78_5_fu_669_p1 = $signed(add_ln78_5_fu_664_p2);

assign sext_ln78_6_fu_908_p1 = $signed(add_ln78_6_reg_1092);

assign sext_ln78_fu_348_p1 = $signed(add_ln78_fu_342_p2);

assign tmp_16_fu_294_p3 = {{61'd1}, {ap_phi_mux_column_index_0_phi_fu_251_p4}};

assign trunc_ln544_1_fu_315_p1 = state_matrix_V_q1[12:0];

assign trunc_ln544_2_fu_387_p1 = state_matrix_V_q0[12:0];

assign trunc_ln544_3_fu_391_p1 = state_matrix_V_q1[12:0];

assign trunc_ln544_fu_311_p1 = state_matrix_V_q0[12:0];

assign trunc_ln719_10_fu_840_p1 = tmp_14_fu_829_p5[4:0];

assign trunc_ln719_11_fu_868_p1 = tmp_15_fu_857_p5[4:0];

assign trunc_ln719_1_fu_406_p1 = tmp_3_fu_395_p5[4:0];

assign trunc_ln719_2_fu_440_p1 = tmp_4_fu_429_p5[4:0];

assign trunc_ln719_3_fu_530_p1 = tmp_6_fu_519_p5[4:0];

assign trunc_ln719_4_fu_563_p1 = tmp_7_fu_552_p5[4:0];

assign trunc_ln719_5_fu_596_p1 = tmp_8_fu_585_p5[4:0];

assign trunc_ln719_6_fu_685_p1 = tmp_s_fu_674_p5[4:0];

assign trunc_ln719_7_fu_718_p1 = tmp_10_fu_707_p5[4:0];

assign trunc_ln719_8_fu_751_p1 = tmp_11_fu_740_p5[4:0];

assign trunc_ln719_9_fu_812_p1 = tmp_13_fu_801_p5[4:0];

assign trunc_ln719_fu_364_p1 = tmp_2_fu_353_p5[4:0];

assign trunc_ln78_4_fu_497_p1 = tmp_5_fu_486_p5[4:0];

assign trunc_ln78_5_fu_652_p1 = tmp_9_fu_641_p5[4:0];

assign trunc_ln78_6_fu_784_p1 = tmp_12_fu_773_p5[4:0];

assign trunc_ln78_fu_330_p1 = tmp_1_fu_319_p5[4:0];

assign xor_ln180_fu_283_p2 = (ap_phi_mux_column_index_0_phi_fu_251_p4 ^ 3'd4);

assign xor_ln719_10_fu_930_p2 = (multiplication_V_q1 ^ multiplication_V_q0);

assign xor_ln719_11_fu_936_p2 = (xor_ln719_9_fu_924_p2 ^ xor_ln719_10_fu_930_p2);

assign xor_ln719_1_fu_469_p2 = (multiplication_V_q1 ^ multiplication_V_q0);

assign xor_ln719_2_fu_475_p2 = (xor_ln719_fu_463_p2 ^ xor_ln719_1_fu_469_p2);

assign xor_ln719_3_fu_618_p2 = (reg_262 ^ reg_258);

assign xor_ln719_4_fu_624_p2 = (multiplication_V_q1 ^ multiplication_V_q0);

assign xor_ln719_5_fu_630_p2 = (xor_ln719_4_fu_624_p2 ^ xor_ln719_3_fu_618_p2);

assign xor_ln719_6_fu_885_p2 = (reg_262 ^ reg_258);

assign xor_ln719_7_fu_891_p2 = (multiplication_V_q1 ^ multiplication_V_q0);

assign xor_ln719_8_fu_897_p2 = (xor_ln719_7_fu_891_p2 ^ xor_ln719_6_fu_885_p2);

assign xor_ln719_9_fu_924_p2 = (reg_262 ^ reg_258);

assign xor_ln719_fu_463_p2 = (reg_262 ^ reg_258);

assign zext_ln106_fu_278_p1 = ap_phi_mux_column_index_0_phi_fu_251_p4;

assign zext_ln180_18_fu_306_p1 = $unsigned(sext_ln180_fu_303_p1);

assign zext_ln180_fu_289_p1 = $unsigned(xor_ln180_fu_283_p2);

assign zext_ln719_10_cast_fu_689_p3 = {{trunc_ln719_6_fu_685_p1}, {8'd0}};

assign zext_ln719_11_cast_fu_722_p3 = {{trunc_ln719_7_fu_718_p1}, {8'd0}};

assign zext_ln719_12_cast_fu_755_p3 = {{trunc_ln719_8_fu_751_p1}, {8'd0}};

assign zext_ln719_13_cast_fu_816_p3 = {{trunc_ln719_9_fu_812_p1}, {8'd0}};

assign zext_ln719_14_cast_fu_844_p3 = {{trunc_ln719_10_fu_840_p1}, {8'd0}};

assign zext_ln719_15_cast_fu_872_p3 = {{trunc_ln719_11_fu_868_p1}, {8'd0}};

assign zext_ln719_1_fu_636_p1 = xor_ln719_5_fu_630_p2;

assign zext_ln719_2_fu_903_p1 = xor_ln719_8_fu_897_p2;

assign zext_ln719_3_fu_942_p1 = xor_ln719_11_reg_1132;

assign zext_ln719_4_cast_fu_368_p3 = {{trunc_ln719_fu_364_p1}, {8'd0}};

assign zext_ln719_5_cast_fu_410_p3 = {{trunc_ln719_1_fu_406_p1}, {8'd0}};

assign zext_ln719_6_cast_fu_444_p3 = {{trunc_ln719_2_fu_440_p1}, {8'd0}};

assign zext_ln719_7_cast_fu_534_p3 = {{trunc_ln719_3_fu_530_p1}, {8'd0}};

assign zext_ln719_8_cast_fu_567_p3 = {{trunc_ln719_4_fu_563_p1}, {8'd0}};

assign zext_ln719_9_cast_fu_600_p3 = {{trunc_ln719_5_fu_596_p1}, {8'd0}};

assign zext_ln719_fu_481_p1 = xor_ln719_2_fu_475_p2;

assign zext_ln78_5_cast_fu_501_p3 = {{trunc_ln78_4_fu_497_p1}, {8'd0}};

assign zext_ln78_6_cast_fu_656_p3 = {{trunc_ln78_5_fu_652_p1}, {8'd0}};

assign zext_ln78_7_cast_fu_788_p3 = {{trunc_ln78_6_fu_784_p1}, {8'd0}};

assign zext_ln78_cast_fu_334_p3 = {{trunc_ln78_fu_330_p1}, {8'd0}};

always @ (posedge ap_clk) begin
    state_matrix_V_addr_reg_975[3] <= 1'b0;
    state_matrix_V_addr_11_reg_986[3] <= 1'b0;
    state_matrix_V_addr_12_reg_992[3] <= 1'b1;
end

endmodule //aes_mix_columns8
