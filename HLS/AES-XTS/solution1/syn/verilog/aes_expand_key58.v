// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_expand_key58 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_key_V_AWVALID,
        m_axi_key_V_AWREADY,
        m_axi_key_V_AWADDR,
        m_axi_key_V_AWID,
        m_axi_key_V_AWLEN,
        m_axi_key_V_AWSIZE,
        m_axi_key_V_AWBURST,
        m_axi_key_V_AWLOCK,
        m_axi_key_V_AWCACHE,
        m_axi_key_V_AWPROT,
        m_axi_key_V_AWQOS,
        m_axi_key_V_AWREGION,
        m_axi_key_V_AWUSER,
        m_axi_key_V_WVALID,
        m_axi_key_V_WREADY,
        m_axi_key_V_WDATA,
        m_axi_key_V_WSTRB,
        m_axi_key_V_WLAST,
        m_axi_key_V_WID,
        m_axi_key_V_WUSER,
        m_axi_key_V_ARVALID,
        m_axi_key_V_ARREADY,
        m_axi_key_V_ARADDR,
        m_axi_key_V_ARID,
        m_axi_key_V_ARLEN,
        m_axi_key_V_ARSIZE,
        m_axi_key_V_ARBURST,
        m_axi_key_V_ARLOCK,
        m_axi_key_V_ARCACHE,
        m_axi_key_V_ARPROT,
        m_axi_key_V_ARQOS,
        m_axi_key_V_ARREGION,
        m_axi_key_V_ARUSER,
        m_axi_key_V_RVALID,
        m_axi_key_V_RREADY,
        m_axi_key_V_RDATA,
        m_axi_key_V_RLAST,
        m_axi_key_V_RID,
        m_axi_key_V_RUSER,
        m_axi_key_V_RRESP,
        m_axi_key_V_BVALID,
        m_axi_key_V_BREADY,
        m_axi_key_V_BRESP,
        m_axi_key_V_BID,
        m_axi_key_V_BUSER,
        key_V_offset,
        m_axi_s_box_V_AWVALID,
        m_axi_s_box_V_AWREADY,
        m_axi_s_box_V_AWADDR,
        m_axi_s_box_V_AWID,
        m_axi_s_box_V_AWLEN,
        m_axi_s_box_V_AWSIZE,
        m_axi_s_box_V_AWBURST,
        m_axi_s_box_V_AWLOCK,
        m_axi_s_box_V_AWCACHE,
        m_axi_s_box_V_AWPROT,
        m_axi_s_box_V_AWQOS,
        m_axi_s_box_V_AWREGION,
        m_axi_s_box_V_AWUSER,
        m_axi_s_box_V_WVALID,
        m_axi_s_box_V_WREADY,
        m_axi_s_box_V_WDATA,
        m_axi_s_box_V_WSTRB,
        m_axi_s_box_V_WLAST,
        m_axi_s_box_V_WID,
        m_axi_s_box_V_WUSER,
        m_axi_s_box_V_ARVALID,
        m_axi_s_box_V_ARREADY,
        m_axi_s_box_V_ARADDR,
        m_axi_s_box_V_ARID,
        m_axi_s_box_V_ARLEN,
        m_axi_s_box_V_ARSIZE,
        m_axi_s_box_V_ARBURST,
        m_axi_s_box_V_ARLOCK,
        m_axi_s_box_V_ARCACHE,
        m_axi_s_box_V_ARPROT,
        m_axi_s_box_V_ARQOS,
        m_axi_s_box_V_ARREGION,
        m_axi_s_box_V_ARUSER,
        m_axi_s_box_V_RVALID,
        m_axi_s_box_V_RREADY,
        m_axi_s_box_V_RDATA,
        m_axi_s_box_V_RLAST,
        m_axi_s_box_V_RID,
        m_axi_s_box_V_RUSER,
        m_axi_s_box_V_RRESP,
        m_axi_s_box_V_BVALID,
        m_axi_s_box_V_BREADY,
        m_axi_s_box_V_BRESP,
        m_axi_s_box_V_BID,
        m_axi_s_box_V_BUSER,
        s_box_V_offset,
        m_axi_rcon_V_AWVALID,
        m_axi_rcon_V_AWREADY,
        m_axi_rcon_V_AWADDR,
        m_axi_rcon_V_AWID,
        m_axi_rcon_V_AWLEN,
        m_axi_rcon_V_AWSIZE,
        m_axi_rcon_V_AWBURST,
        m_axi_rcon_V_AWLOCK,
        m_axi_rcon_V_AWCACHE,
        m_axi_rcon_V_AWPROT,
        m_axi_rcon_V_AWQOS,
        m_axi_rcon_V_AWREGION,
        m_axi_rcon_V_AWUSER,
        m_axi_rcon_V_WVALID,
        m_axi_rcon_V_WREADY,
        m_axi_rcon_V_WDATA,
        m_axi_rcon_V_WSTRB,
        m_axi_rcon_V_WLAST,
        m_axi_rcon_V_WID,
        m_axi_rcon_V_WUSER,
        m_axi_rcon_V_ARVALID,
        m_axi_rcon_V_ARREADY,
        m_axi_rcon_V_ARADDR,
        m_axi_rcon_V_ARID,
        m_axi_rcon_V_ARLEN,
        m_axi_rcon_V_ARSIZE,
        m_axi_rcon_V_ARBURST,
        m_axi_rcon_V_ARLOCK,
        m_axi_rcon_V_ARCACHE,
        m_axi_rcon_V_ARPROT,
        m_axi_rcon_V_ARQOS,
        m_axi_rcon_V_ARREGION,
        m_axi_rcon_V_ARUSER,
        m_axi_rcon_V_RVALID,
        m_axi_rcon_V_RREADY,
        m_axi_rcon_V_RDATA,
        m_axi_rcon_V_RLAST,
        m_axi_rcon_V_RID,
        m_axi_rcon_V_RUSER,
        m_axi_rcon_V_RRESP,
        m_axi_rcon_V_BVALID,
        m_axi_rcon_V_BREADY,
        m_axi_rcon_V_BRESP,
        m_axi_rcon_V_BID,
        m_axi_rcon_V_BUSER,
        rcon_V_offset,
        expanded_key_matrix_V_address0,
        expanded_key_matrix_V_ce0,
        expanded_key_matrix_V_we0,
        expanded_key_matrix_V_d0
);

parameter    ap_ST_fsm_state1 = 53'd1;
parameter    ap_ST_fsm_state2 = 53'd2;
parameter    ap_ST_fsm_state3 = 53'd4;
parameter    ap_ST_fsm_state4 = 53'd8;
parameter    ap_ST_fsm_state5 = 53'd16;
parameter    ap_ST_fsm_state6 = 53'd32;
parameter    ap_ST_fsm_state7 = 53'd64;
parameter    ap_ST_fsm_state8 = 53'd128;
parameter    ap_ST_fsm_state9 = 53'd256;
parameter    ap_ST_fsm_state10 = 53'd512;
parameter    ap_ST_fsm_state11 = 53'd1024;
parameter    ap_ST_fsm_state12 = 53'd2048;
parameter    ap_ST_fsm_state13 = 53'd4096;
parameter    ap_ST_fsm_state14 = 53'd8192;
parameter    ap_ST_fsm_state15 = 53'd16384;
parameter    ap_ST_fsm_state16 = 53'd32768;
parameter    ap_ST_fsm_state17 = 53'd65536;
parameter    ap_ST_fsm_state18 = 53'd131072;
parameter    ap_ST_fsm_state19 = 53'd262144;
parameter    ap_ST_fsm_state20 = 53'd524288;
parameter    ap_ST_fsm_state21 = 53'd1048576;
parameter    ap_ST_fsm_state22 = 53'd2097152;
parameter    ap_ST_fsm_state23 = 53'd4194304;
parameter    ap_ST_fsm_state24 = 53'd8388608;
parameter    ap_ST_fsm_state25 = 53'd16777216;
parameter    ap_ST_fsm_state26 = 53'd33554432;
parameter    ap_ST_fsm_state27 = 53'd67108864;
parameter    ap_ST_fsm_state28 = 53'd134217728;
parameter    ap_ST_fsm_state29 = 53'd268435456;
parameter    ap_ST_fsm_state30 = 53'd536870912;
parameter    ap_ST_fsm_state31 = 53'd1073741824;
parameter    ap_ST_fsm_state32 = 53'd2147483648;
parameter    ap_ST_fsm_state33 = 53'd4294967296;
parameter    ap_ST_fsm_state34 = 53'd8589934592;
parameter    ap_ST_fsm_state35 = 53'd17179869184;
parameter    ap_ST_fsm_state36 = 53'd34359738368;
parameter    ap_ST_fsm_state37 = 53'd68719476736;
parameter    ap_ST_fsm_state38 = 53'd137438953472;
parameter    ap_ST_fsm_state39 = 53'd274877906944;
parameter    ap_ST_fsm_state40 = 53'd549755813888;
parameter    ap_ST_fsm_state41 = 53'd1099511627776;
parameter    ap_ST_fsm_state42 = 53'd2199023255552;
parameter    ap_ST_fsm_state43 = 53'd4398046511104;
parameter    ap_ST_fsm_state44 = 53'd8796093022208;
parameter    ap_ST_fsm_state45 = 53'd17592186044416;
parameter    ap_ST_fsm_state46 = 53'd35184372088832;
parameter    ap_ST_fsm_state47 = 53'd70368744177664;
parameter    ap_ST_fsm_state48 = 53'd140737488355328;
parameter    ap_ST_fsm_state49 = 53'd281474976710656;
parameter    ap_ST_fsm_state50 = 53'd562949953421312;
parameter    ap_ST_fsm_state51 = 53'd1125899906842624;
parameter    ap_ST_fsm_state52 = 53'd2251799813685248;
parameter    ap_ST_fsm_state53 = 53'd4503599627370496;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_key_V_AWVALID;
input   m_axi_key_V_AWREADY;
output  [31:0] m_axi_key_V_AWADDR;
output  [0:0] m_axi_key_V_AWID;
output  [31:0] m_axi_key_V_AWLEN;
output  [2:0] m_axi_key_V_AWSIZE;
output  [1:0] m_axi_key_V_AWBURST;
output  [1:0] m_axi_key_V_AWLOCK;
output  [3:0] m_axi_key_V_AWCACHE;
output  [2:0] m_axi_key_V_AWPROT;
output  [3:0] m_axi_key_V_AWQOS;
output  [3:0] m_axi_key_V_AWREGION;
output  [0:0] m_axi_key_V_AWUSER;
output   m_axi_key_V_WVALID;
input   m_axi_key_V_WREADY;
output  [15:0] m_axi_key_V_WDATA;
output  [1:0] m_axi_key_V_WSTRB;
output   m_axi_key_V_WLAST;
output  [0:0] m_axi_key_V_WID;
output  [0:0] m_axi_key_V_WUSER;
output   m_axi_key_V_ARVALID;
input   m_axi_key_V_ARREADY;
output  [31:0] m_axi_key_V_ARADDR;
output  [0:0] m_axi_key_V_ARID;
output  [31:0] m_axi_key_V_ARLEN;
output  [2:0] m_axi_key_V_ARSIZE;
output  [1:0] m_axi_key_V_ARBURST;
output  [1:0] m_axi_key_V_ARLOCK;
output  [3:0] m_axi_key_V_ARCACHE;
output  [2:0] m_axi_key_V_ARPROT;
output  [3:0] m_axi_key_V_ARQOS;
output  [3:0] m_axi_key_V_ARREGION;
output  [0:0] m_axi_key_V_ARUSER;
input   m_axi_key_V_RVALID;
output   m_axi_key_V_RREADY;
input  [15:0] m_axi_key_V_RDATA;
input   m_axi_key_V_RLAST;
input  [0:0] m_axi_key_V_RID;
input  [0:0] m_axi_key_V_RUSER;
input  [1:0] m_axi_key_V_RRESP;
input   m_axi_key_V_BVALID;
output   m_axi_key_V_BREADY;
input  [1:0] m_axi_key_V_BRESP;
input  [0:0] m_axi_key_V_BID;
input  [0:0] m_axi_key_V_BUSER;
input  [30:0] key_V_offset;
output   m_axi_s_box_V_AWVALID;
input   m_axi_s_box_V_AWREADY;
output  [31:0] m_axi_s_box_V_AWADDR;
output  [0:0] m_axi_s_box_V_AWID;
output  [31:0] m_axi_s_box_V_AWLEN;
output  [2:0] m_axi_s_box_V_AWSIZE;
output  [1:0] m_axi_s_box_V_AWBURST;
output  [1:0] m_axi_s_box_V_AWLOCK;
output  [3:0] m_axi_s_box_V_AWCACHE;
output  [2:0] m_axi_s_box_V_AWPROT;
output  [3:0] m_axi_s_box_V_AWQOS;
output  [3:0] m_axi_s_box_V_AWREGION;
output  [0:0] m_axi_s_box_V_AWUSER;
output   m_axi_s_box_V_WVALID;
input   m_axi_s_box_V_WREADY;
output  [7:0] m_axi_s_box_V_WDATA;
output  [0:0] m_axi_s_box_V_WSTRB;
output   m_axi_s_box_V_WLAST;
output  [0:0] m_axi_s_box_V_WID;
output  [0:0] m_axi_s_box_V_WUSER;
output   m_axi_s_box_V_ARVALID;
input   m_axi_s_box_V_ARREADY;
output  [31:0] m_axi_s_box_V_ARADDR;
output  [0:0] m_axi_s_box_V_ARID;
output  [31:0] m_axi_s_box_V_ARLEN;
output  [2:0] m_axi_s_box_V_ARSIZE;
output  [1:0] m_axi_s_box_V_ARBURST;
output  [1:0] m_axi_s_box_V_ARLOCK;
output  [3:0] m_axi_s_box_V_ARCACHE;
output  [2:0] m_axi_s_box_V_ARPROT;
output  [3:0] m_axi_s_box_V_ARQOS;
output  [3:0] m_axi_s_box_V_ARREGION;
output  [0:0] m_axi_s_box_V_ARUSER;
input   m_axi_s_box_V_RVALID;
output   m_axi_s_box_V_RREADY;
input  [7:0] m_axi_s_box_V_RDATA;
input   m_axi_s_box_V_RLAST;
input  [0:0] m_axi_s_box_V_RID;
input  [0:0] m_axi_s_box_V_RUSER;
input  [1:0] m_axi_s_box_V_RRESP;
input   m_axi_s_box_V_BVALID;
output   m_axi_s_box_V_BREADY;
input  [1:0] m_axi_s_box_V_BRESP;
input  [0:0] m_axi_s_box_V_BID;
input  [0:0] m_axi_s_box_V_BUSER;
input  [31:0] s_box_V_offset;
output   m_axi_rcon_V_AWVALID;
input   m_axi_rcon_V_AWREADY;
output  [31:0] m_axi_rcon_V_AWADDR;
output  [0:0] m_axi_rcon_V_AWID;
output  [31:0] m_axi_rcon_V_AWLEN;
output  [2:0] m_axi_rcon_V_AWSIZE;
output  [1:0] m_axi_rcon_V_AWBURST;
output  [1:0] m_axi_rcon_V_AWLOCK;
output  [3:0] m_axi_rcon_V_AWCACHE;
output  [2:0] m_axi_rcon_V_AWPROT;
output  [3:0] m_axi_rcon_V_AWQOS;
output  [3:0] m_axi_rcon_V_AWREGION;
output  [0:0] m_axi_rcon_V_AWUSER;
output   m_axi_rcon_V_WVALID;
input   m_axi_rcon_V_WREADY;
output  [63:0] m_axi_rcon_V_WDATA;
output  [7:0] m_axi_rcon_V_WSTRB;
output   m_axi_rcon_V_WLAST;
output  [0:0] m_axi_rcon_V_WID;
output  [0:0] m_axi_rcon_V_WUSER;
output   m_axi_rcon_V_ARVALID;
input   m_axi_rcon_V_ARREADY;
output  [31:0] m_axi_rcon_V_ARADDR;
output  [0:0] m_axi_rcon_V_ARID;
output  [31:0] m_axi_rcon_V_ARLEN;
output  [2:0] m_axi_rcon_V_ARSIZE;
output  [1:0] m_axi_rcon_V_ARBURST;
output  [1:0] m_axi_rcon_V_ARLOCK;
output  [3:0] m_axi_rcon_V_ARCACHE;
output  [2:0] m_axi_rcon_V_ARPROT;
output  [3:0] m_axi_rcon_V_ARQOS;
output  [3:0] m_axi_rcon_V_ARREGION;
output  [0:0] m_axi_rcon_V_ARUSER;
input   m_axi_rcon_V_RVALID;
output   m_axi_rcon_V_RREADY;
input  [63:0] m_axi_rcon_V_RDATA;
input   m_axi_rcon_V_RLAST;
input  [0:0] m_axi_rcon_V_RID;
input  [0:0] m_axi_rcon_V_RUSER;
input  [1:0] m_axi_rcon_V_RRESP;
input   m_axi_rcon_V_BVALID;
output   m_axi_rcon_V_BREADY;
input  [1:0] m_axi_rcon_V_BRESP;
input  [0:0] m_axi_rcon_V_BID;
input  [0:0] m_axi_rcon_V_BUSER;
input  [28:0] rcon_V_offset;
output  [7:0] expanded_key_matrix_V_address0;
output   expanded_key_matrix_V_ce0;
output   expanded_key_matrix_V_we0;
output  [15:0] expanded_key_matrix_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_key_V_ARVALID;
reg m_axi_key_V_RREADY;
reg m_axi_s_box_V_ARVALID;
reg[31:0] m_axi_s_box_V_ARADDR;
reg m_axi_s_box_V_RREADY;
reg m_axi_rcon_V_ARVALID;
reg m_axi_rcon_V_RREADY;
reg expanded_key_matrix_V_ce0;
reg expanded_key_matrix_V_we0;

(* fsm_encoding = "none" *) reg   [52:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    key_V_blk_n_AR;
reg    key_V_blk_n_R;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln145_fu_1071_p2;
reg    s_box_V_blk_n_AR;
wire    ap_CS_fsm_state29;
reg    s_box_V_blk_n_R;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state22;
reg    rcon_V_blk_n_AR;
wire    ap_CS_fsm_state39;
reg    rcon_V_blk_n_R;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state7;
wire   [5:0] i_fu_1077_p2;
reg   [5:0] i_reg_1651;
reg    ap_block_state8;
reg   [15:0] key_V_addr_read_reg_1656;
wire  signed [32:0] sext_ln719_9_fu_1083_p1;
reg  signed [32:0] sext_ln719_9_reg_1668;
wire   [61:0] zext_ln887_fu_1086_p1;
reg   [61:0] zext_ln887_reg_1674;
wire   [2:0] i_5_fu_1111_p2;
reg   [2:0] i_5_reg_1685;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln156_fu_1105_p2;
wire   [1:0] trunc_ln180_fu_1138_p1;
reg   [1:0] trunc_ln180_reg_1695;
wire   [0:0] icmp_ln879_fu_1142_p2;
reg   [0:0] icmp_ln879_reg_1699;
wire   [15:0] expanded_key_V_q0;
wire    ap_CS_fsm_state12;
wire   [2:0] i_8_fu_1160_p2;
reg   [2:0] i_8_reg_1717;
wire    ap_CS_fsm_state14;
wire   [1:0] trunc_ln185_fu_1166_p1;
reg   [1:0] trunc_ln185_reg_1722;
wire   [0:0] icmp_ln183_fu_1154_p2;
reg   [31:0] s_box_V_addr_reg_1726;
reg   [7:0] s_box_V_addr_read_reg_1732;
wire   [15:0] temporary_key_0_V_8_fu_1213_p1;
wire    ap_CS_fsm_state23;
wire   [1:0] i_7_fu_1222_p2;
reg   [1:0] i_7_reg_1748;
wire    ap_CS_fsm_state25;
wire   [2:0] i_9_fu_1234_p2;
reg   [2:0] i_9_reg_1756;
wire    ap_CS_fsm_state28;
wire   [1:0] trunc_ln172_fu_1240_p1;
reg   [1:0] trunc_ln172_reg_1761;
wire   [0:0] icmp_ln170_fu_1228_p2;
reg   [31:0] s_box_V_addr_1_reg_1765;
reg   [15:0] n_V_1_load_reg_1771;
wire   [61:0] add_ln719_fu_1308_p2;
reg   [61:0] add_ln719_reg_1777;
reg   [7:0] s_box_V_addr_1_read_reg_1782;
wire   [15:0] temporary_key_0_V_7_fu_1313_p1;
wire    ap_CS_fsm_state37;
reg   [63:0] rcon_V_addr_read_reg_1801;
wire   [2:0] i_10_fu_1377_p2;
reg   [2:0] i_10_reg_1809;
wire    ap_CS_fsm_state48;
wire   [0:0] icmp_ln193_fu_1371_p2;
wire   [1:0] trunc_ln719_10_fu_1406_p1;
reg   [1:0] trunc_ln719_10_reg_1819;
wire   [2:0] i_11_fu_1439_p2;
wire    ap_CS_fsm_state50;
wire   [3:0] select_ln1372_fu_1533_p3;
wire   [0:0] icmp_ln198_fu_1433_p2;
wire   [7:0] cur_len_V_fu_1541_p2;
wire   [7:0] zext_ln207_fu_1547_p1;
reg   [7:0] zext_ln207_reg_1842;
wire    ap_CS_fsm_state51;
wire   [2:0] i_6_fu_1557_p2;
reg   [2:0] i_6_reg_1850;
wire   [8:0] sub_ln180_fu_1583_p2;
reg   [8:0] sub_ln180_reg_1855;
wire   [0:0] icmp_ln207_fu_1551_p2;
wire   [5:0] j_fu_1595_p2;
reg   [5:0] j_reg_1863;
wire    ap_CS_fsm_state52;
wire   [8:0] add_ln180_fu_1605_p2;
reg   [8:0] add_ln180_reg_1868;
wire   [0:0] icmp_ln209_fu_1589_p2;
reg   [7:0] expanded_key_V_address0;
reg    expanded_key_V_ce0;
reg    expanded_key_V_we0;
reg   [15:0] expanded_key_V_d0;
reg   [5:0] i_0_reg_264;
wire    ap_CS_fsm_state9;
reg   [15:0] temporary_key_3_V_9_reg_896;
reg   [15:0] temporary_key_3_V_0_reg_276;
reg   [15:0] temporary_key_2_V_11_reg_908;
reg   [15:0] temporary_key_2_V_0_reg_288;
reg   [15:0] temporary_key_1_V_11_reg_920;
reg   [15:0] temporary_key_1_V_0_reg_300;
reg   [15:0] temporary_key_0_V_116_reg_932;
reg   [15:0] temporary_key_0_V_0_reg_312;
reg  signed [3:0] p_0216_0_reg_324;
reg   [7:0] p_084_0_reg_336;
reg   [15:0] temporary_key_3_V_1_reg_348;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln887_fu_1099_p2;
wire    ap_CS_fsm_state13;
reg   [15:0] temporary_key_2_V_1_reg_359;
reg   [15:0] temporary_key_1_V_1_reg_370;
reg   [15:0] temporary_key_3_V_reg_381;
reg   [2:0] i2_0_reg_392;
reg   [15:0] temporary_key_3_V_1_1_reg_403;
reg   [15:0] temporary_key_2_V_1_3_reg_421;
reg   [15:0] temporary_key_1_V_1_3_reg_439;
reg   [15:0] temporary_key_3_V_b_reg_457;
reg   [15:0] temporary_key_3_V_5_reg_475;
wire   [0:0] icmp_ln879_1_fu_1148_p2;
wire    ap_CS_fsm_state24;
reg   [15:0] temporary_key_2_V_7_reg_486;
reg   [15:0] temporary_key_1_V_7_reg_497;
reg   [15:0] temporary_key_0_V_72_reg_508;
reg   [2:0] i5_0_reg_519;
reg   [15:0] temporary_key_3_V_5_1_reg_530;
reg   [15:0] temporary_key_2_V_7_1_reg_548;
reg   [15:0] temporary_key_1_V_7_1_reg_566;
reg   [15:0] temporary_key_0_V_7_1_reg_584;
reg   [15:0] temporary_key_2_V_3_reg_602;
wire    ap_CS_fsm_state27;
reg   [15:0] temporary_key_1_V_3_reg_613;
reg   [15:0] temporary_key_0_V_3_reg_624;
wire   [1:0] ap_phi_mux_i3_0_phi_fu_639_p4;
reg   [1:0] i3_0_reg_635;
reg   [15:0] temporary_key_0_V_6_reg_647;
wire   [0:0] icmp_ln164_fu_1216_p2;
reg   [15:0] temporary_key_2_V_3_1_reg_662;
wire    ap_CS_fsm_state26;
reg   [15:0] temporary_key_1_V_3_1_reg_678;
reg   [15:0] temporary_key_0_V_3_1_reg_694;
reg   [15:0] temporary_key_3_V_3_reg_710;
wire    ap_CS_fsm_state38;
reg   [15:0] temporary_key_2_V_5_reg_721;
reg   [15:0] temporary_key_1_V_5_reg_732;
reg   [15:0] temporary_key_0_V_5_reg_743;
reg   [2:0] i4_0_reg_754;
reg   [15:0] temporary_key_3_V_3_1_reg_765;
reg   [15:0] temporary_key_2_V_5_1_reg_783;
reg   [15:0] temporary_key_1_V_5_1_reg_801;
reg   [15:0] temporary_key_0_V_5_1_reg_819;
reg   [15:0] ap_phi_mux_temporary_key_3_V_9_1_phi_fu_840_p6;
reg   [15:0] temporary_key_3_V_9_1_reg_837;
wire    ap_CS_fsm_state47;
reg   [15:0] ap_phi_mux_temporary_key_2_V_1_1_phi_fu_855_p6;
reg   [15:0] temporary_key_2_V_1_1_reg_852;
reg   [15:0] ap_phi_mux_temporary_key_1_V_1_1_phi_fu_870_p6;
reg   [15:0] temporary_key_1_V_1_1_reg_867;
wire   [15:0] temporary_key_0_V_1_fu_1354_p2;
reg   [15:0] ap_phi_mux_temporary_key_0_V_1_1_phi_fu_885_p6;
reg   [15:0] temporary_key_0_V_1_1_reg_882;
reg   [15:0] ap_phi_mux_temporary_key_3_V_9_2_phi_fu_959_p8;
wire    ap_CS_fsm_state49;
reg   [15:0] ap_phi_mux_temporary_key_2_V_1_2_phi_fu_977_p8;
reg   [15:0] ap_phi_mux_temporary_key_1_V_1_2_phi_fu_995_p8;
reg   [15:0] ap_phi_mux_temporary_key_0_V_1_2_phi_fu_1013_p8;
reg   [2:0] i7_0_reg_944;
wire   [15:0] temporary_key_0_V_9_fu_1423_p2;
reg   [2:0] i_op_assign_4_reg_1027;
reg   [2:0] i9_0_reg_1038;
reg   [5:0] j_0_reg_1049;
wire    ap_CS_fsm_state53;
wire   [63:0] zext_ln147_fu_1094_p1;
wire   [63:0] zext_ln544_fu_1133_p1;
wire   [63:0] zext_ln544_4_fu_1401_p1;
wire   [63:0] zext_ln544_5_fu_1455_p1;
wire   [63:0] zext_ln211_fu_1623_p1;
wire  signed [63:0] sext_ln180_fu_1628_p1;
wire   [63:0] zext_ln180_fu_1060_p1;
wire  signed [63:0] sext_ln78_4_fu_1203_p1;
wire  signed [63:0] sext_ln78_7_fu_1277_p1;
wire   [63:0] zext_ln719_24_fu_1316_p1;
reg   [15:0] n_V_1_fu_140;
wire   [15:0] n_V_fu_1361_p2;
wire   [15:0] tmp_1_fu_1464_p6;
wire   [2:0] xor_ln158_fu_1117_p2;
wire  signed [7:0] sext_ln215_fu_1123_p1;
wire   [7:0] ret_V_fu_1127_p2;
wire   [1:0] temp_V_fu_1170_p5;
wire   [15:0] temp_V_fu_1170_p6;
wire  signed [16:0] sext_ln78_fu_1184_p1;
wire   [16:0] add_ln78_fu_1188_p2;
wire  signed [32:0] sext_ln78_3_fu_1194_p1;
wire   [32:0] add_ln78_7_fu_1198_p2;
wire   [1:0] temp_V_1_fu_1244_p5;
wire   [15:0] temp_V_1_fu_1244_p6;
wire  signed [16:0] sext_ln78_5_fu_1258_p1;
wire   [16:0] add_ln78_8_fu_1262_p2;
wire  signed [32:0] sext_ln78_6_fu_1268_p1;
wire   [32:0] add_ln78_9_fu_1272_p2;
wire   [12:0] tmp_62_fu_1290_p4;
wire  signed [60:0] sext_ln719_fu_1300_p1;
wire   [61:0] zext_ln719_22_fu_1304_p1;
wire   [2:0] trunc_ln719_fu_1326_p1;
wire   [5:0] tmp_64_fu_1329_p3;
wire   [63:0] zext_ln719_23_fu_1337_p1;
wire   [63:0] lshr_ln719_fu_1341_p2;
wire   [7:0] trunc_ln719_9_fu_1346_p1;
wire   [15:0] zext_ln719_fu_1350_p1;
wire   [5:0] i_op_assign_3_fu_1383_p3;
wire  signed [7:0] sext_ln215_1_fu_1391_p1;
wire   [7:0] ret_V_5_fu_1395_p2;
wire   [15:0] tmp_fu_1410_p6;
wire   [7:0] zext_ln215_fu_1445_p1;
wire   [7:0] ret_V_7_fu_1449_p2;
wire   [1:0] tmp_1_fu_1464_p5;
wire  signed [4:0] sext_ln215_2_fu_1479_p1;
wire   [4:0] ret_V_6_fu_1483_p2;
wire   [2:0] trunc_ln1372_1_fu_1501_p1;
wire   [2:0] xor_ln1372_fu_1505_p2;
wire   [3:0] tmp_66_fu_1511_p3;
wire   [2:0] trunc_ln1372_fu_1497_p1;
wire   [0:0] tmp_65_fu_1489_p3;
wire   [3:0] sub_ln180_1_fu_1519_p2;
wire   [3:0] tmp_63_fu_1525_p3;
wire   [4:0] tmp_61_fu_1571_p3;
wire   [8:0] tmp_s_fu_1563_p3;
wire   [8:0] zext_ln180_39_fu_1579_p1;
wire   [8:0] zext_ln180_40_fu_1601_p1;
wire   [7:0] shl_ln_fu_1610_p3;
wire   [7:0] add_ln211_fu_1618_p2;
reg   [52:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 53'd1;
end

aes_expand_key58_bkb #(
    .DataWidth( 16 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
expanded_key_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(expanded_key_V_address0),
    .ce0(expanded_key_V_ce0),
    .we0(expanded_key_V_we0),
    .d0(expanded_key_V_d0),
    .q0(expanded_key_V_q0)
);

xts_aes_mux_42_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
xts_aes_mux_42_16cud_U1(
    .din0(temporary_key_0_V_72_reg_508),
    .din1(temporary_key_1_V_7_reg_497),
    .din2(temporary_key_2_V_7_reg_486),
    .din3(temporary_key_3_V_5_reg_475),
    .din4(temp_V_fu_1170_p5),
    .dout(temp_V_fu_1170_p6)
);

xts_aes_mux_42_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
xts_aes_mux_42_16cud_U2(
    .din0(temporary_key_0_V_5_reg_743),
    .din1(temporary_key_1_V_5_reg_732),
    .din2(temporary_key_2_V_5_reg_721),
    .din3(temporary_key_3_V_3_reg_710),
    .din4(temp_V_1_fu_1244_p5),
    .dout(temp_V_1_fu_1244_p6)
);

xts_aes_mux_42_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
xts_aes_mux_42_16cud_U3(
    .din0(temporary_key_0_V_116_reg_932),
    .din1(temporary_key_1_V_11_reg_920),
    .din2(temporary_key_2_V_11_reg_908),
    .din3(temporary_key_3_V_9_reg_896),
    .din4(trunc_ln719_10_reg_1819),
    .dout(tmp_fu_1410_p6)
);

xts_aes_mux_42_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
xts_aes_mux_42_16cud_U4(
    .din0(temporary_key_0_V_116_reg_932),
    .din1(temporary_key_1_V_11_reg_920),
    .din2(temporary_key_2_V_11_reg_908),
    .din3(temporary_key_3_V_9_reg_896),
    .din4(tmp_1_fu_1464_p5),
    .dout(tmp_1_fu_1464_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i2_0_reg_392 <= i_5_reg_1685;
    end else if (((icmp_ln887_fu_1099_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i2_0_reg_392 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i3_0_reg_635 <= i_7_reg_1748;
    end else if (((icmp_ln879_fu_1142_p2 == 1'd1) & (icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i3_0_reg_635 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        i4_0_reg_754 <= i_9_reg_1756;
    end else if (((icmp_ln164_fu_1216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        i4_0_reg_754 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i5_0_reg_519 <= i_8_reg_1717;
    end else if (((icmp_ln879_1_fu_1148_p2 == 1'd1) & (icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln879_fu_1142_p2 == 1'd0))) begin
        i5_0_reg_519 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        i7_0_reg_944 <= i_10_reg_1809;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        i7_0_reg_944 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln887_fu_1099_p2 == 1'd0))) begin
        i9_0_reg_1038 <= 3'd0;
    end else if (((icmp_ln209_fu_1589_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        i9_0_reg_1038 <= i_6_reg_1850;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_264 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_reg_264 <= i_reg_1651;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln193_fu_1371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        i_op_assign_4_reg_1027 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state50) & (icmp_ln198_fu_1433_p2 == 1'd0))) begin
        i_op_assign_4_reg_1027 <= i_11_fu_1439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln207_fu_1551_p2 == 1'd0))) begin
        j_0_reg_1049 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        j_0_reg_1049 <= j_reg_1863;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln879_reg_1699 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        n_V_1_fu_140 <= n_V_fu_1361_p2;
    end else if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln145_fu_1071_p2 == 1'd0)) & (icmp_ln145_fu_1071_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        n_V_1_fu_140 <= 16'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln145_fu_1071_p2 == 1'd0)) & (icmp_ln145_fu_1071_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        p_0216_0_reg_324 <= 4'd0;
    end else if (((icmp_ln198_fu_1433_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        p_0216_0_reg_324 <= select_ln1372_fu_1533_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln145_fu_1071_p2 == 1'd0)) & (icmp_ln145_fu_1071_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        p_084_0_reg_336 <= 8'd32;
    end else if (((icmp_ln198_fu_1433_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        p_084_0_reg_336 <= cur_len_V_fu_1541_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        temporary_key_0_V_116_reg_932 <= ap_phi_mux_temporary_key_0_V_1_2_phi_fu_1013_p8;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temporary_key_0_V_116_reg_932 <= ap_phi_mux_temporary_key_0_V_1_1_phi_fu_885_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_fu_1154_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        temporary_key_0_V_1_1_reg_882 <= temporary_key_0_V_72_reg_508;
    end else if (((icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln879_1_fu_1148_p2 == 1'd0) & (icmp_ln879_fu_1142_p2 == 1'd0))) begin
        temporary_key_0_V_1_1_reg_882 <= temporary_key_3_V_reg_381;
    end else if (((icmp_ln879_reg_1699 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        temporary_key_0_V_1_1_reg_882 <= temporary_key_0_V_1_fu_1354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (i3_0_reg_635 == 2'd0))) begin
        temporary_key_0_V_3_1_reg_694 <= temporary_key_0_V_6_reg_647;
    end else if ((((i3_0_reg_635 == 2'd1) & (1'b1 == ap_CS_fsm_state26)) | (~(i3_0_reg_635 == 2'd1) & ~(i3_0_reg_635 == 2'd0) & (1'b1 == ap_CS_fsm_state26)))) begin
        temporary_key_0_V_3_1_reg_694 <= temporary_key_0_V_3_reg_624;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        temporary_key_0_V_3_reg_624 <= temporary_key_0_V_3_1_reg_694;
    end else if (((icmp_ln879_fu_1142_p2 == 1'd1) & (icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        temporary_key_0_V_3_reg_624 <= temporary_key_3_V_reg_381;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (trunc_ln172_reg_1761 == 2'd0))) begin
        temporary_key_0_V_5_1_reg_819 <= temporary_key_0_V_7_fu_1313_p1;
    end else if ((((trunc_ln172_reg_1761 == 2'd1) & (1'b1 == ap_CS_fsm_state37)) | ((trunc_ln172_reg_1761 == 2'd2) & (1'b1 == ap_CS_fsm_state37)) | ((trunc_ln172_reg_1761 == 2'd3) & (1'b1 == ap_CS_fsm_state37)))) begin
        temporary_key_0_V_5_1_reg_819 <= temporary_key_0_V_5_reg_743;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        temporary_key_0_V_5_reg_743 <= temporary_key_0_V_5_1_reg_819;
    end else if (((icmp_ln164_fu_1216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        temporary_key_0_V_5_reg_743 <= temporary_key_0_V_3_reg_624;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln164_fu_1216_p2 == 1'd0))) begin
        if ((~(ap_phi_mux_i3_0_phi_fu_639_p4 == 2'd1) & ~(ap_phi_mux_i3_0_phi_fu_639_p4 == 2'd0))) begin
            temporary_key_0_V_6_reg_647 <= temporary_key_3_V_1_reg_348;
        end else if ((ap_phi_mux_i3_0_phi_fu_639_p4 == 2'd1)) begin
            temporary_key_0_V_6_reg_647 <= temporary_key_2_V_3_reg_602;
        end else if ((ap_phi_mux_i3_0_phi_fu_639_p4 == 2'd0)) begin
            temporary_key_0_V_6_reg_647 <= temporary_key_1_V_3_reg_613;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        temporary_key_0_V_72_reg_508 <= temporary_key_0_V_7_1_reg_584;
    end else if (((icmp_ln879_1_fu_1148_p2 == 1'd1) & (icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln879_fu_1142_p2 == 1'd0))) begin
        temporary_key_0_V_72_reg_508 <= temporary_key_3_V_reg_381;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (trunc_ln185_reg_1722 == 2'd0))) begin
        temporary_key_0_V_7_1_reg_584 <= temporary_key_0_V_8_fu_1213_p1;
    end else if ((((trunc_ln185_reg_1722 == 2'd1) & (1'b1 == ap_CS_fsm_state23)) | ((trunc_ln185_reg_1722 == 2'd2) & (1'b1 == ap_CS_fsm_state23)) | ((trunc_ln185_reg_1722 == 2'd3) & (1'b1 == ap_CS_fsm_state23)))) begin
        temporary_key_0_V_7_1_reg_584 <= temporary_key_0_V_72_reg_508;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        temporary_key_1_V_11_reg_920 <= ap_phi_mux_temporary_key_1_V_1_2_phi_fu_995_p8;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temporary_key_1_V_11_reg_920 <= ap_phi_mux_temporary_key_1_V_1_1_phi_fu_870_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_fu_1154_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        temporary_key_1_V_1_1_reg_867 <= temporary_key_1_V_7_reg_497;
    end else if (((icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln879_1_fu_1148_p2 == 1'd0) & (icmp_ln879_fu_1142_p2 == 1'd0))) begin
        temporary_key_1_V_1_1_reg_867 <= temporary_key_1_V_1_reg_370;
    end else if (((icmp_ln879_reg_1699 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        temporary_key_1_V_1_1_reg_867 <= temporary_key_1_V_5_reg_732;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln180_reg_1695 == 2'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        temporary_key_1_V_1_3_reg_439 <= expanded_key_V_q0;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (trunc_ln180_reg_1695 == 2'd0)) | ((trunc_ln180_reg_1695 == 2'd2) & (1'b1 == ap_CS_fsm_state12)) | ((trunc_ln180_reg_1695 == 2'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        temporary_key_1_V_1_3_reg_439 <= temporary_key_1_V_1_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        temporary_key_1_V_1_reg_370 <= temporary_key_1_V_1_3_reg_439;
    end else if (((icmp_ln887_fu_1099_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        temporary_key_1_V_1_reg_370 <= temporary_key_1_V_0_reg_300;
    end
end

always @ (posedge ap_clk) begin
    if (((i3_0_reg_635 == 2'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        temporary_key_1_V_3_1_reg_678 <= temporary_key_0_V_6_reg_647;
    end else if (((~(i3_0_reg_635 == 2'd1) & ~(i3_0_reg_635 == 2'd0) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == ap_CS_fsm_state26) & (i3_0_reg_635 == 2'd0)))) begin
        temporary_key_1_V_3_1_reg_678 <= temporary_key_1_V_3_reg_613;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        temporary_key_1_V_3_reg_613 <= temporary_key_1_V_3_1_reg_678;
    end else if (((icmp_ln879_fu_1142_p2 == 1'd1) & (icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        temporary_key_1_V_3_reg_613 <= temporary_key_1_V_1_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln172_reg_1761 == 2'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        temporary_key_1_V_5_1_reg_801 <= temporary_key_0_V_7_fu_1313_p1;
    end else if ((((1'b1 == ap_CS_fsm_state37) & (trunc_ln172_reg_1761 == 2'd0)) | ((trunc_ln172_reg_1761 == 2'd2) & (1'b1 == ap_CS_fsm_state37)) | ((trunc_ln172_reg_1761 == 2'd3) & (1'b1 == ap_CS_fsm_state37)))) begin
        temporary_key_1_V_5_1_reg_801 <= temporary_key_1_V_5_reg_732;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        temporary_key_1_V_5_reg_732 <= temporary_key_1_V_5_1_reg_801;
    end else if (((icmp_ln164_fu_1216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        temporary_key_1_V_5_reg_732 <= temporary_key_1_V_3_reg_613;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln185_reg_1722 == 2'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        temporary_key_1_V_7_1_reg_566 <= temporary_key_0_V_8_fu_1213_p1;
    end else if ((((1'b1 == ap_CS_fsm_state23) & (trunc_ln185_reg_1722 == 2'd0)) | ((trunc_ln185_reg_1722 == 2'd2) & (1'b1 == ap_CS_fsm_state23)) | ((trunc_ln185_reg_1722 == 2'd3) & (1'b1 == ap_CS_fsm_state23)))) begin
        temporary_key_1_V_7_1_reg_566 <= temporary_key_1_V_7_reg_497;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        temporary_key_1_V_7_reg_497 <= temporary_key_1_V_7_1_reg_566;
    end else if (((icmp_ln879_1_fu_1148_p2 == 1'd1) & (icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln879_fu_1142_p2 == 1'd0))) begin
        temporary_key_1_V_7_reg_497 <= temporary_key_1_V_1_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        temporary_key_2_V_11_reg_908 <= ap_phi_mux_temporary_key_2_V_1_2_phi_fu_977_p8;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temporary_key_2_V_11_reg_908 <= ap_phi_mux_temporary_key_2_V_1_1_phi_fu_855_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_fu_1154_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        temporary_key_2_V_1_1_reg_852 <= temporary_key_2_V_7_reg_486;
    end else if (((icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln879_1_fu_1148_p2 == 1'd0) & (icmp_ln879_fu_1142_p2 == 1'd0))) begin
        temporary_key_2_V_1_1_reg_852 <= temporary_key_2_V_1_reg_359;
    end else if (((icmp_ln879_reg_1699 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        temporary_key_2_V_1_1_reg_852 <= temporary_key_2_V_5_reg_721;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln180_reg_1695 == 2'd2) & (1'b1 == ap_CS_fsm_state12))) begin
        temporary_key_2_V_1_3_reg_421 <= expanded_key_V_q0;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (trunc_ln180_reg_1695 == 2'd0)) | ((trunc_ln180_reg_1695 == 2'd1) & (1'b1 == ap_CS_fsm_state12)) | ((trunc_ln180_reg_1695 == 2'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        temporary_key_2_V_1_3_reg_421 <= temporary_key_2_V_1_reg_359;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        temporary_key_2_V_1_reg_359 <= temporary_key_2_V_1_3_reg_421;
    end else if (((icmp_ln887_fu_1099_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        temporary_key_2_V_1_reg_359 <= temporary_key_2_V_0_reg_288;
    end
end

always @ (posedge ap_clk) begin
    if ((((i3_0_reg_635 == 2'd1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == ap_CS_fsm_state26) & (i3_0_reg_635 == 2'd0)))) begin
        temporary_key_2_V_3_1_reg_662 <= temporary_key_2_V_3_reg_602;
    end else if ((~(i3_0_reg_635 == 2'd1) & ~(i3_0_reg_635 == 2'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        temporary_key_2_V_3_1_reg_662 <= temporary_key_0_V_6_reg_647;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        temporary_key_2_V_3_reg_602 <= temporary_key_2_V_3_1_reg_662;
    end else if (((icmp_ln879_fu_1142_p2 == 1'd1) & (icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        temporary_key_2_V_3_reg_602 <= temporary_key_2_V_1_reg_359;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln172_reg_1761 == 2'd2) & (1'b1 == ap_CS_fsm_state37))) begin
        temporary_key_2_V_5_1_reg_783 <= temporary_key_0_V_7_fu_1313_p1;
    end else if ((((1'b1 == ap_CS_fsm_state37) & (trunc_ln172_reg_1761 == 2'd0)) | ((trunc_ln172_reg_1761 == 2'd1) & (1'b1 == ap_CS_fsm_state37)) | ((trunc_ln172_reg_1761 == 2'd3) & (1'b1 == ap_CS_fsm_state37)))) begin
        temporary_key_2_V_5_1_reg_783 <= temporary_key_2_V_5_reg_721;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        temporary_key_2_V_5_reg_721 <= temporary_key_2_V_5_1_reg_783;
    end else if (((icmp_ln164_fu_1216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        temporary_key_2_V_5_reg_721 <= temporary_key_2_V_3_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln185_reg_1722 == 2'd2) & (1'b1 == ap_CS_fsm_state23))) begin
        temporary_key_2_V_7_1_reg_548 <= temporary_key_0_V_8_fu_1213_p1;
    end else if ((((1'b1 == ap_CS_fsm_state23) & (trunc_ln185_reg_1722 == 2'd0)) | ((trunc_ln185_reg_1722 == 2'd1) & (1'b1 == ap_CS_fsm_state23)) | ((trunc_ln185_reg_1722 == 2'd3) & (1'b1 == ap_CS_fsm_state23)))) begin
        temporary_key_2_V_7_1_reg_548 <= temporary_key_2_V_7_reg_486;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        temporary_key_2_V_7_reg_486 <= temporary_key_2_V_7_1_reg_548;
    end else if (((icmp_ln879_1_fu_1148_p2 == 1'd1) & (icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln879_fu_1142_p2 == 1'd0))) begin
        temporary_key_2_V_7_reg_486 <= temporary_key_2_V_1_reg_359;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (trunc_ln180_reg_1695 == 2'd0)) | ((trunc_ln180_reg_1695 == 2'd1) & (1'b1 == ap_CS_fsm_state12)) | ((trunc_ln180_reg_1695 == 2'd2) & (1'b1 == ap_CS_fsm_state12)))) begin
        temporary_key_3_V_1_1_reg_403 <= temporary_key_3_V_1_reg_348;
    end else if (((trunc_ln180_reg_1695 == 2'd3) & (1'b1 == ap_CS_fsm_state12))) begin
        temporary_key_3_V_1_1_reg_403 <= expanded_key_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        temporary_key_3_V_1_reg_348 <= temporary_key_3_V_1_1_reg_403;
    end else if (((icmp_ln887_fu_1099_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        temporary_key_3_V_1_reg_348 <= temporary_key_3_V_0_reg_276;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state37) & (trunc_ln172_reg_1761 == 2'd0)) | ((trunc_ln172_reg_1761 == 2'd1) & (1'b1 == ap_CS_fsm_state37)) | ((trunc_ln172_reg_1761 == 2'd2) & (1'b1 == ap_CS_fsm_state37)))) begin
        temporary_key_3_V_3_1_reg_765 <= temporary_key_3_V_3_reg_710;
    end else if (((trunc_ln172_reg_1761 == 2'd3) & (1'b1 == ap_CS_fsm_state37))) begin
        temporary_key_3_V_3_1_reg_765 <= temporary_key_0_V_7_fu_1313_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        temporary_key_3_V_3_reg_710 <= temporary_key_3_V_3_1_reg_765;
    end else if (((icmp_ln164_fu_1216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        temporary_key_3_V_3_reg_710 <= temporary_key_3_V_reg_381;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state23) & (trunc_ln185_reg_1722 == 2'd0)) | ((trunc_ln185_reg_1722 == 2'd1) & (1'b1 == ap_CS_fsm_state23)) | ((trunc_ln185_reg_1722 == 2'd2) & (1'b1 == ap_CS_fsm_state23)))) begin
        temporary_key_3_V_5_1_reg_530 <= temporary_key_3_V_5_reg_475;
    end else if (((trunc_ln185_reg_1722 == 2'd3) & (1'b1 == ap_CS_fsm_state23))) begin
        temporary_key_3_V_5_1_reg_530 <= temporary_key_0_V_8_fu_1213_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        temporary_key_3_V_5_reg_475 <= temporary_key_3_V_5_1_reg_530;
    end else if (((icmp_ln879_1_fu_1148_p2 == 1'd1) & (icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln879_fu_1142_p2 == 1'd0))) begin
        temporary_key_3_V_5_reg_475 <= temporary_key_3_V_1_reg_348;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_fu_1154_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        temporary_key_3_V_9_1_reg_837 <= temporary_key_3_V_5_reg_475;
    end else if (((icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln879_1_fu_1148_p2 == 1'd0) & (icmp_ln879_fu_1142_p2 == 1'd0))) begin
        temporary_key_3_V_9_1_reg_837 <= temporary_key_3_V_1_reg_348;
    end else if (((icmp_ln879_reg_1699 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        temporary_key_3_V_9_1_reg_837 <= temporary_key_3_V_3_reg_710;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        temporary_key_3_V_9_reg_896 <= ap_phi_mux_temporary_key_3_V_9_2_phi_fu_959_p8;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temporary_key_3_V_9_reg_896 <= ap_phi_mux_temporary_key_3_V_9_1_phi_fu_840_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (trunc_ln180_reg_1695 == 2'd0))) begin
        temporary_key_3_V_b_reg_457 <= expanded_key_V_q0;
    end else if ((((trunc_ln180_reg_1695 == 2'd1) & (1'b1 == ap_CS_fsm_state12)) | ((trunc_ln180_reg_1695 == 2'd2) & (1'b1 == ap_CS_fsm_state12)) | ((trunc_ln180_reg_1695 == 2'd3) & (1'b1 == ap_CS_fsm_state12)))) begin
        temporary_key_3_V_b_reg_457 <= temporary_key_3_V_reg_381;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        temporary_key_3_V_reg_381 <= temporary_key_3_V_b_reg_457;
    end else if (((icmp_ln887_fu_1099_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        temporary_key_3_V_reg_381 <= temporary_key_0_V_0_reg_312;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln209_fu_1589_p2 == 1'd0))) begin
        add_ln180_reg_1868 <= add_ln180_fu_1605_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln170_fu_1228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        add_ln719_reg_1777 <= add_ln719_fu_1308_p2;
        n_V_1_load_reg_1771 <= n_V_1_fu_140;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        i_10_reg_1809 <= i_10_fu_1377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_5_reg_1685 <= i_5_fu_1111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        i_6_reg_1850 <= i_6_fu_1557_p2;
        zext_ln207_reg_1842[2 : 0] <= zext_ln207_fu_1547_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i_7_reg_1748 <= i_7_fu_1222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_8_reg_1717 <= i_8_fu_1160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_9_reg_1756 <= i_9_fu_1234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln145_fu_1071_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8))) begin
        i_reg_1651 <= i_fu_1077_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        icmp_ln879_reg_1699 <= icmp_ln879_fu_1142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        j_reg_1863 <= j_fu_1595_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln145_fu_1071_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln145_fu_1071_p2 == 1'd0))) begin
        key_V_addr_read_reg_1656 <= m_axi_key_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_rcon_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        rcon_V_addr_read_reg_1801 <= m_axi_rcon_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (m_axi_s_box_V_RVALID == 1'b1))) begin
        s_box_V_addr_1_read_reg_1782 <= m_axi_s_box_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln170_fu_1228_p2 == 1'd0))) begin
        s_box_V_addr_1_reg_1765 <= sext_ln78_7_fu_1277_p1;
        trunc_ln172_reg_1761 <= trunc_ln172_fu_1240_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (m_axi_s_box_V_RVALID == 1'b1))) begin
        s_box_V_addr_read_reg_1732 <= m_axi_s_box_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln183_fu_1154_p2 == 1'd0))) begin
        s_box_V_addr_reg_1726 <= sext_ln78_4_fu_1203_p1;
        trunc_ln185_reg_1722 <= trunc_ln185_fu_1166_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln145_fu_1071_p2 == 1'd0)) & (icmp_ln145_fu_1071_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        sext_ln719_9_reg_1668 <= sext_ln719_9_fu_1083_p1;
        zext_ln887_reg_1674[28 : 0] <= zext_ln887_fu_1086_p1[28 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln207_fu_1551_p2 == 1'd0))) begin
        sub_ln180_reg_1855[8 : 2] <= sub_ln180_fu_1583_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln198_fu_1433_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        temporary_key_0_V_0_reg_312 <= temporary_key_0_V_116_reg_932;
        temporary_key_1_V_0_reg_300 <= temporary_key_1_V_11_reg_920;
        temporary_key_2_V_0_reg_288 <= temporary_key_2_V_11_reg_908;
        temporary_key_3_V_0_reg_276 <= temporary_key_3_V_9_reg_896;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln156_fu_1105_p2 == 1'd0))) begin
        trunc_ln180_reg_1695 <= trunc_ln180_fu_1138_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln193_fu_1371_p2 == 1'd0))) begin
        trunc_ln719_10_reg_1819 <= trunc_ln719_10_fu_1406_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln207_fu_1551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln879_reg_1699 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        ap_phi_mux_temporary_key_0_V_1_1_phi_fu_885_p6 = temporary_key_0_V_1_fu_1354_p2;
    end else begin
        ap_phi_mux_temporary_key_0_V_1_1_phi_fu_885_p6 = temporary_key_0_V_1_1_reg_882;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) & (trunc_ln719_10_reg_1819 == 2'd0))) begin
        ap_phi_mux_temporary_key_0_V_1_2_phi_fu_1013_p8 = temporary_key_0_V_9_fu_1423_p2;
    end else if ((((trunc_ln719_10_reg_1819 == 2'd1) & (1'b1 == ap_CS_fsm_state49)) | ((trunc_ln719_10_reg_1819 == 2'd2) & (1'b1 == ap_CS_fsm_state49)) | ((trunc_ln719_10_reg_1819 == 2'd3) & (1'b1 == ap_CS_fsm_state49)))) begin
        ap_phi_mux_temporary_key_0_V_1_2_phi_fu_1013_p8 = temporary_key_0_V_116_reg_932;
    end else begin
        ap_phi_mux_temporary_key_0_V_1_2_phi_fu_1013_p8 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln879_reg_1699 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        ap_phi_mux_temporary_key_1_V_1_1_phi_fu_870_p6 = temporary_key_1_V_5_reg_732;
    end else begin
        ap_phi_mux_temporary_key_1_V_1_1_phi_fu_870_p6 = temporary_key_1_V_1_1_reg_867;
    end
end

always @ (*) begin
    if (((trunc_ln719_10_reg_1819 == 2'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        ap_phi_mux_temporary_key_1_V_1_2_phi_fu_995_p8 = temporary_key_0_V_9_fu_1423_p2;
    end else if ((((1'b1 == ap_CS_fsm_state49) & (trunc_ln719_10_reg_1819 == 2'd0)) | ((trunc_ln719_10_reg_1819 == 2'd2) & (1'b1 == ap_CS_fsm_state49)) | ((trunc_ln719_10_reg_1819 == 2'd3) & (1'b1 == ap_CS_fsm_state49)))) begin
        ap_phi_mux_temporary_key_1_V_1_2_phi_fu_995_p8 = temporary_key_1_V_11_reg_920;
    end else begin
        ap_phi_mux_temporary_key_1_V_1_2_phi_fu_995_p8 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln879_reg_1699 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        ap_phi_mux_temporary_key_2_V_1_1_phi_fu_855_p6 = temporary_key_2_V_5_reg_721;
    end else begin
        ap_phi_mux_temporary_key_2_V_1_1_phi_fu_855_p6 = temporary_key_2_V_1_1_reg_852;
    end
end

always @ (*) begin
    if (((trunc_ln719_10_reg_1819 == 2'd2) & (1'b1 == ap_CS_fsm_state49))) begin
        ap_phi_mux_temporary_key_2_V_1_2_phi_fu_977_p8 = temporary_key_0_V_9_fu_1423_p2;
    end else if ((((1'b1 == ap_CS_fsm_state49) & (trunc_ln719_10_reg_1819 == 2'd0)) | ((trunc_ln719_10_reg_1819 == 2'd1) & (1'b1 == ap_CS_fsm_state49)) | ((trunc_ln719_10_reg_1819 == 2'd3) & (1'b1 == ap_CS_fsm_state49)))) begin
        ap_phi_mux_temporary_key_2_V_1_2_phi_fu_977_p8 = temporary_key_2_V_11_reg_908;
    end else begin
        ap_phi_mux_temporary_key_2_V_1_2_phi_fu_977_p8 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln879_reg_1699 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        ap_phi_mux_temporary_key_3_V_9_1_phi_fu_840_p6 = temporary_key_3_V_3_reg_710;
    end else begin
        ap_phi_mux_temporary_key_3_V_9_1_phi_fu_840_p6 = temporary_key_3_V_9_1_reg_837;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state49) & (trunc_ln719_10_reg_1819 == 2'd0)) | ((trunc_ln719_10_reg_1819 == 2'd1) & (1'b1 == ap_CS_fsm_state49)) | ((trunc_ln719_10_reg_1819 == 2'd2) & (1'b1 == ap_CS_fsm_state49)))) begin
        ap_phi_mux_temporary_key_3_V_9_2_phi_fu_959_p8 = temporary_key_3_V_9_reg_896;
    end else if (((trunc_ln719_10_reg_1819 == 2'd3) & (1'b1 == ap_CS_fsm_state49))) begin
        ap_phi_mux_temporary_key_3_V_9_2_phi_fu_959_p8 = temporary_key_0_V_9_fu_1423_p2;
    end else begin
        ap_phi_mux_temporary_key_3_V_9_2_phi_fu_959_p8 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln207_fu_1551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        expanded_key_V_address0 = zext_ln211_fu_1623_p1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        expanded_key_V_address0 = zext_ln544_5_fu_1455_p1;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        expanded_key_V_address0 = zext_ln544_4_fu_1401_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        expanded_key_V_address0 = zext_ln544_fu_1133_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        expanded_key_V_address0 = zext_ln147_fu_1094_p1;
    end else begin
        expanded_key_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state11))) begin
        expanded_key_V_ce0 = 1'b1;
    end else begin
        expanded_key_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        expanded_key_V_d0 = tmp_1_fu_1464_p6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        expanded_key_V_d0 = key_V_addr_read_reg_1656;
    end else begin
        expanded_key_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state50) & (icmp_ln198_fu_1433_p2 == 1'd0)))) begin
        expanded_key_V_we0 = 1'b1;
    end else begin
        expanded_key_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        expanded_key_matrix_V_ce0 = 1'b1;
    end else begin
        expanded_key_matrix_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        expanded_key_matrix_V_we0 = 1'b1;
    end else begin
        expanded_key_matrix_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        key_V_blk_n_AR = m_axi_key_V_ARREADY;
    end else begin
        key_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln145_fu_1071_p2 == 1'd0))) begin
        key_V_blk_n_R = m_axi_key_V_RVALID;
    end else begin
        key_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_axi_key_V_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_key_V_ARVALID = 1'b1;
    end else begin
        m_axi_key_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln145_fu_1071_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln145_fu_1071_p2 == 1'd0))) begin
        m_axi_key_V_RREADY = 1'b1;
    end else begin
        m_axi_key_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_rcon_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        m_axi_rcon_V_ARVALID = 1'b1;
    end else begin
        m_axi_rcon_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_rcon_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        m_axi_rcon_V_RREADY = 1'b1;
    end else begin
        m_axi_rcon_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_s_box_V_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state29)) begin
            m_axi_s_box_V_ARADDR = s_box_V_addr_1_reg_1765;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            m_axi_s_box_V_ARADDR = s_box_V_addr_reg_1726;
        end else begin
            m_axi_s_box_V_ARADDR = 'bx;
        end
    end else begin
        m_axi_s_box_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state15) & (m_axi_s_box_V_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state29) & (m_axi_s_box_V_ARREADY == 1'b1)))) begin
        m_axi_s_box_V_ARVALID = 1'b1;
    end else begin
        m_axi_s_box_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state22) & (m_axi_s_box_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state36) & (m_axi_s_box_V_RVALID == 1'b1)))) begin
        m_axi_s_box_V_RREADY = 1'b1;
    end else begin
        m_axi_s_box_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        rcon_V_blk_n_AR = m_axi_rcon_V_ARREADY;
    end else begin
        rcon_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        rcon_V_blk_n_R = m_axi_rcon_V_RVALID;
    end else begin
        rcon_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state29))) begin
        s_box_V_blk_n_AR = m_axi_s_box_V_ARREADY;
    end else begin
        s_box_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state36))) begin
        s_box_V_blk_n_R = m_axi_s_box_V_RVALID;
    end else begin
        s_box_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_key_V_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln145_fu_1071_p2 == 1'd0)) & (icmp_ln145_fu_1071_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if ((~((m_axi_key_V_RVALID == 1'b0) & (icmp_ln145_fu_1071_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln145_fu_1071_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln887_fu_1099_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln879_fu_1142_p2 == 1'd1) & (icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((icmp_ln879_1_fu_1148_p2 == 1'd1) & (icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln879_fu_1142_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((icmp_ln156_fu_1105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln879_1_fu_1148_p2 == 1'd0) & (icmp_ln879_fu_1142_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln183_fu_1154_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (m_axi_s_box_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (m_axi_s_box_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state25 : begin
            if (((icmp_ln164_fu_1216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state28 : begin
            if (((icmp_ln170_fu_1228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (m_axi_s_box_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (m_axi_s_box_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state39 : begin
            if (((m_axi_rcon_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((m_axi_rcon_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((icmp_ln193_fu_1371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state50 : begin
            if (((icmp_ln198_fu_1433_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((icmp_ln207_fu_1551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((icmp_ln209_fu_1589_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln180_fu_1605_p2 = (zext_ln180_40_fu_1601_p1 + sub_ln180_reg_1855);

assign add_ln211_fu_1618_p2 = (zext_ln207_reg_1842 + shl_ln_fu_1610_p3);

assign add_ln719_fu_1308_p2 = (zext_ln719_22_fu_1304_p1 + zext_ln887_reg_1674);

assign add_ln78_7_fu_1198_p2 = ($signed(sext_ln719_9_reg_1668) + $signed(sext_ln78_3_fu_1194_p1));

assign add_ln78_8_fu_1262_p2 = ($signed(17'd256) + $signed(sext_ln78_5_fu_1258_p1));

assign add_ln78_9_fu_1272_p2 = ($signed(sext_ln719_9_reg_1668) + $signed(sext_ln78_6_fu_1268_p1));

assign add_ln78_fu_1188_p2 = ($signed(17'd256) + $signed(sext_ln78_fu_1184_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state8 = ((m_axi_key_V_RVALID == 1'b0) & (icmp_ln145_fu_1071_p2 == 1'd0));
end

assign ap_phi_mux_i3_0_phi_fu_639_p4 = i3_0_reg_635;

assign cur_len_V_fu_1541_p2 = (8'd4 + p_084_0_reg_336);

assign expanded_key_matrix_V_address0 = sext_ln180_fu_1628_p1;

assign expanded_key_matrix_V_d0 = expanded_key_V_q0;

assign i_10_fu_1377_p2 = (i7_0_reg_944 + 3'd1);

assign i_11_fu_1439_p2 = (i_op_assign_4_reg_1027 + 3'd1);

assign i_5_fu_1111_p2 = (i2_0_reg_392 + 3'd1);

assign i_6_fu_1557_p2 = (i9_0_reg_1038 + 3'd1);

assign i_7_fu_1222_p2 = (i3_0_reg_635 + 2'd1);

assign i_8_fu_1160_p2 = (i5_0_reg_519 + 3'd1);

assign i_9_fu_1234_p2 = (i4_0_reg_754 + 3'd1);

assign i_fu_1077_p2 = (i_0_reg_264 + 6'd1);

assign i_op_assign_3_fu_1383_p3 = {{3'd4}, {i7_0_reg_944}};

assign icmp_ln145_fu_1071_p2 = ((i_0_reg_264 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln156_fu_1105_p2 = ((i2_0_reg_392 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_1216_p2 = ((i3_0_reg_635 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln170_fu_1228_p2 = ((i4_0_reg_754 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln183_fu_1154_p2 = ((i5_0_reg_519 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln193_fu_1371_p2 = ((i7_0_reg_944 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln198_fu_1433_p2 = ((i_op_assign_4_reg_1027 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln207_fu_1551_p2 = ((i9_0_reg_1038 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln209_fu_1589_p2 = ((j_0_reg_1049 == 6'd60) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_1148_p2 = ((p_0216_0_reg_324 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1142_p2 = ((p_0216_0_reg_324 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_1099_p2 = ((p_084_0_reg_336 < 8'd240) ? 1'b1 : 1'b0);

assign j_fu_1595_p2 = (j_0_reg_1049 + 6'd1);

assign lshr_ln719_fu_1341_p2 = rcon_V_addr_read_reg_1801 >> zext_ln719_23_fu_1337_p1;

assign m_axi_key_V_ARADDR = zext_ln180_fu_1060_p1;

assign m_axi_key_V_ARBURST = 2'd0;

assign m_axi_key_V_ARCACHE = 4'd0;

assign m_axi_key_V_ARID = 1'd0;

assign m_axi_key_V_ARLEN = 32'd32;

assign m_axi_key_V_ARLOCK = 2'd0;

assign m_axi_key_V_ARPROT = 3'd0;

assign m_axi_key_V_ARQOS = 4'd0;

assign m_axi_key_V_ARREGION = 4'd0;

assign m_axi_key_V_ARSIZE = 3'd0;

assign m_axi_key_V_ARUSER = 1'd0;

assign m_axi_key_V_AWADDR = 32'd0;

assign m_axi_key_V_AWBURST = 2'd0;

assign m_axi_key_V_AWCACHE = 4'd0;

assign m_axi_key_V_AWID = 1'd0;

assign m_axi_key_V_AWLEN = 32'd0;

assign m_axi_key_V_AWLOCK = 2'd0;

assign m_axi_key_V_AWPROT = 3'd0;

assign m_axi_key_V_AWQOS = 4'd0;

assign m_axi_key_V_AWREGION = 4'd0;

assign m_axi_key_V_AWSIZE = 3'd0;

assign m_axi_key_V_AWUSER = 1'd0;

assign m_axi_key_V_AWVALID = 1'b0;

assign m_axi_key_V_BREADY = 1'b0;

assign m_axi_key_V_WDATA = 16'd0;

assign m_axi_key_V_WID = 1'd0;

assign m_axi_key_V_WLAST = 1'b0;

assign m_axi_key_V_WSTRB = 2'd0;

assign m_axi_key_V_WUSER = 1'd0;

assign m_axi_key_V_WVALID = 1'b0;

assign m_axi_rcon_V_ARADDR = zext_ln719_24_fu_1316_p1;

assign m_axi_rcon_V_ARBURST = 2'd0;

assign m_axi_rcon_V_ARCACHE = 4'd0;

assign m_axi_rcon_V_ARID = 1'd0;

assign m_axi_rcon_V_ARLEN = 32'd1;

assign m_axi_rcon_V_ARLOCK = 2'd0;

assign m_axi_rcon_V_ARPROT = 3'd0;

assign m_axi_rcon_V_ARQOS = 4'd0;

assign m_axi_rcon_V_ARREGION = 4'd0;

assign m_axi_rcon_V_ARSIZE = 3'd0;

assign m_axi_rcon_V_ARUSER = 1'd0;

assign m_axi_rcon_V_AWADDR = 32'd0;

assign m_axi_rcon_V_AWBURST = 2'd0;

assign m_axi_rcon_V_AWCACHE = 4'd0;

assign m_axi_rcon_V_AWID = 1'd0;

assign m_axi_rcon_V_AWLEN = 32'd0;

assign m_axi_rcon_V_AWLOCK = 2'd0;

assign m_axi_rcon_V_AWPROT = 3'd0;

assign m_axi_rcon_V_AWQOS = 4'd0;

assign m_axi_rcon_V_AWREGION = 4'd0;

assign m_axi_rcon_V_AWSIZE = 3'd0;

assign m_axi_rcon_V_AWUSER = 1'd0;

assign m_axi_rcon_V_AWVALID = 1'b0;

assign m_axi_rcon_V_BREADY = 1'b0;

assign m_axi_rcon_V_WDATA = 64'd0;

assign m_axi_rcon_V_WID = 1'd0;

assign m_axi_rcon_V_WLAST = 1'b0;

assign m_axi_rcon_V_WSTRB = 8'd0;

assign m_axi_rcon_V_WUSER = 1'd0;

assign m_axi_rcon_V_WVALID = 1'b0;

assign m_axi_s_box_V_ARBURST = 2'd0;

assign m_axi_s_box_V_ARCACHE = 4'd0;

assign m_axi_s_box_V_ARID = 1'd0;

assign m_axi_s_box_V_ARLEN = 32'd1;

assign m_axi_s_box_V_ARLOCK = 2'd0;

assign m_axi_s_box_V_ARPROT = 3'd0;

assign m_axi_s_box_V_ARQOS = 4'd0;

assign m_axi_s_box_V_ARREGION = 4'd0;

assign m_axi_s_box_V_ARSIZE = 3'd0;

assign m_axi_s_box_V_ARUSER = 1'd0;

assign m_axi_s_box_V_AWADDR = 32'd0;

assign m_axi_s_box_V_AWBURST = 2'd0;

assign m_axi_s_box_V_AWCACHE = 4'd0;

assign m_axi_s_box_V_AWID = 1'd0;

assign m_axi_s_box_V_AWLEN = 32'd0;

assign m_axi_s_box_V_AWLOCK = 2'd0;

assign m_axi_s_box_V_AWPROT = 3'd0;

assign m_axi_s_box_V_AWQOS = 4'd0;

assign m_axi_s_box_V_AWREGION = 4'd0;

assign m_axi_s_box_V_AWSIZE = 3'd0;

assign m_axi_s_box_V_AWUSER = 1'd0;

assign m_axi_s_box_V_AWVALID = 1'b0;

assign m_axi_s_box_V_BREADY = 1'b0;

assign m_axi_s_box_V_WDATA = 8'd0;

assign m_axi_s_box_V_WID = 1'd0;

assign m_axi_s_box_V_WLAST = 1'b0;

assign m_axi_s_box_V_WSTRB = 1'd0;

assign m_axi_s_box_V_WUSER = 1'd0;

assign m_axi_s_box_V_WVALID = 1'b0;

assign n_V_fu_1361_p2 = (16'd1 + n_V_1_load_reg_1771);

assign ret_V_5_fu_1395_p2 = ($signed(p_084_0_reg_336) + $signed(sext_ln215_1_fu_1391_p1));

assign ret_V_6_fu_1483_p2 = ($signed(5'd1) + $signed(sext_ln215_2_fu_1479_p1));

assign ret_V_7_fu_1449_p2 = (zext_ln215_fu_1445_p1 + p_084_0_reg_336);

assign ret_V_fu_1127_p2 = ($signed(sext_ln215_fu_1123_p1) + $signed(p_084_0_reg_336));

assign select_ln1372_fu_1533_p3 = ((tmp_65_fu_1489_p3[0:0] === 1'b1) ? sub_ln180_1_fu_1519_p2 : tmp_63_fu_1525_p3);

assign sext_ln180_fu_1628_p1 = $signed(add_ln180_reg_1868);

assign sext_ln215_1_fu_1391_p1 = $signed(i_op_assign_3_fu_1383_p3);

assign sext_ln215_2_fu_1479_p1 = p_0216_0_reg_324;

assign sext_ln215_fu_1123_p1 = $signed(xor_ln158_fu_1117_p2);

assign sext_ln719_9_fu_1083_p1 = $signed(s_box_V_offset);

assign sext_ln719_fu_1300_p1 = $signed(tmp_62_fu_1290_p4);

assign sext_ln78_3_fu_1194_p1 = $signed(add_ln78_fu_1188_p2);

assign sext_ln78_4_fu_1203_p1 = $signed(add_ln78_7_fu_1198_p2);

assign sext_ln78_5_fu_1258_p1 = $signed(temp_V_1_fu_1244_p6);

assign sext_ln78_6_fu_1268_p1 = $signed(add_ln78_8_fu_1262_p2);

assign sext_ln78_7_fu_1277_p1 = $signed(add_ln78_9_fu_1272_p2);

assign sext_ln78_fu_1184_p1 = $signed(temp_V_fu_1170_p6);

assign shl_ln_fu_1610_p3 = {{j_0_reg_1049}, {2'd0}};

assign sub_ln180_1_fu_1519_p2 = (4'd0 - tmp_66_fu_1511_p3);

assign sub_ln180_fu_1583_p2 = (tmp_s_fu_1563_p3 - zext_ln180_39_fu_1579_p1);

assign temp_V_1_fu_1244_p5 = i4_0_reg_754[1:0];

assign temp_V_fu_1170_p5 = i5_0_reg_519[1:0];

assign temporary_key_0_V_1_fu_1354_p2 = (zext_ln719_fu_1350_p1 ^ temporary_key_0_V_5_reg_743);

assign temporary_key_0_V_7_fu_1313_p1 = s_box_V_addr_1_read_reg_1782;

assign temporary_key_0_V_8_fu_1213_p1 = s_box_V_addr_read_reg_1732;

assign temporary_key_0_V_9_fu_1423_p2 = (tmp_fu_1410_p6 ^ expanded_key_V_q0);

assign tmp_1_fu_1464_p5 = i_op_assign_4_reg_1027[1:0];

assign tmp_61_fu_1571_p3 = {{i9_0_reg_1038}, {2'd0}};

assign tmp_62_fu_1290_p4 = {{n_V_1_fu_140[15:3]}};

assign tmp_63_fu_1525_p3 = {{1'd0}, {trunc_ln1372_fu_1497_p1}};

assign tmp_64_fu_1329_p3 = {{trunc_ln719_fu_1326_p1}, {3'd0}};

assign tmp_65_fu_1489_p3 = ret_V_6_fu_1483_p2[32'd4];

assign tmp_66_fu_1511_p3 = {{1'd0}, {xor_ln1372_fu_1505_p2}};

assign tmp_s_fu_1563_p3 = {{i9_0_reg_1038}, {6'd0}};

assign trunc_ln1372_1_fu_1501_p1 = p_0216_0_reg_324[2:0];

assign trunc_ln1372_fu_1497_p1 = ret_V_6_fu_1483_p2[2:0];

assign trunc_ln172_fu_1240_p1 = i4_0_reg_754[1:0];

assign trunc_ln180_fu_1138_p1 = i2_0_reg_392[1:0];

assign trunc_ln185_fu_1166_p1 = i5_0_reg_519[1:0];

assign trunc_ln719_10_fu_1406_p1 = i7_0_reg_944[1:0];

assign trunc_ln719_9_fu_1346_p1 = lshr_ln719_fu_1341_p2[7:0];

assign trunc_ln719_fu_1326_p1 = n_V_1_load_reg_1771[2:0];

assign xor_ln1372_fu_1505_p2 = (trunc_ln1372_1_fu_1501_p1 ^ 3'd7);

assign xor_ln158_fu_1117_p2 = (i2_0_reg_392 ^ 3'd4);

assign zext_ln147_fu_1094_p1 = i_0_reg_264;

assign zext_ln180_39_fu_1579_p1 = tmp_61_fu_1571_p3;

assign zext_ln180_40_fu_1601_p1 = j_0_reg_1049;

assign zext_ln180_fu_1060_p1 = key_V_offset;

assign zext_ln207_fu_1547_p1 = i9_0_reg_1038;

assign zext_ln211_fu_1623_p1 = add_ln211_fu_1618_p2;

assign zext_ln215_fu_1445_p1 = i_op_assign_4_reg_1027;

assign zext_ln544_4_fu_1401_p1 = ret_V_5_fu_1395_p2;

assign zext_ln544_5_fu_1455_p1 = ret_V_7_fu_1449_p2;

assign zext_ln544_fu_1133_p1 = ret_V_fu_1127_p2;

assign zext_ln719_22_fu_1304_p1 = $unsigned(sext_ln719_fu_1300_p1);

assign zext_ln719_23_fu_1337_p1 = tmp_64_fu_1329_p3;

assign zext_ln719_24_fu_1316_p1 = add_ln719_reg_1777;

assign zext_ln719_fu_1350_p1 = trunc_ln719_9_fu_1346_p1;

assign zext_ln887_fu_1086_p1 = rcon_V_offset;

always @ (posedge ap_clk) begin
    zext_ln887_reg_1674[61:29] <= 33'b000000000000000000000000000000000;
    zext_ln207_reg_1842[7:3] <= 5'b00000;
    sub_ln180_reg_1855[1:0] <= 2'b00;
end

endmodule //aes_expand_key58
