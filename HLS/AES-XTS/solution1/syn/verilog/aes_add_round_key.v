// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_add_round_key (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_matrix_V_address0,
        state_matrix_V_ce0,
        state_matrix_V_we0,
        state_matrix_V_d0,
        state_matrix_V_q0,
        state_matrix_V_address1,
        state_matrix_V_ce1,
        state_matrix_V_we1,
        state_matrix_V_d1,
        state_matrix_V_q1,
        round_key_matrix_V_address0,
        round_key_matrix_V_ce0,
        round_key_matrix_V_q0,
        round_key_matrix_V_address1,
        round_key_matrix_V_ce1,
        round_key_matrix_V_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_matrix_V_address0;
output   state_matrix_V_ce0;
output   state_matrix_V_we0;
output  [15:0] state_matrix_V_d0;
input  [15:0] state_matrix_V_q0;
output  [3:0] state_matrix_V_address1;
output   state_matrix_V_ce1;
output   state_matrix_V_we1;
output  [15:0] state_matrix_V_d1;
input  [15:0] state_matrix_V_q1;
output  [3:0] round_key_matrix_V_address0;
output   round_key_matrix_V_ce0;
input  [15:0] round_key_matrix_V_q0;
output  [3:0] round_key_matrix_V_address1;
output   round_key_matrix_V_ce1;
input  [15:0] round_key_matrix_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_matrix_V_address0;
reg state_matrix_V_ce0;
reg state_matrix_V_we0;
reg[3:0] state_matrix_V_address1;
reg state_matrix_V_ce1;
reg state_matrix_V_we1;
reg[3:0] round_key_matrix_V_address0;
reg round_key_matrix_V_ce0;
reg[3:0] round_key_matrix_V_address1;
reg round_key_matrix_V_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] grp_fu_141_p2;
reg   [15:0] reg_153;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [15:0] grp_fu_147_p2;
reg   [15:0] reg_158;
wire   [2:0] row_index_fu_169_p2;
reg   [2:0] row_index_reg_238;
wire    ap_CS_fsm_state2;
wire   [4:0] tmp_s_fu_175_p3;
reg   [4:0] tmp_s_reg_243;
wire   [0:0] icmp_ln124_fu_163_p2;
reg   [3:0] state_matrix_V_addr_reg_249;
reg   [3:0] state_matrix_V_addr_14_reg_254;
reg   [3:0] state_matrix_V_addr_15_reg_269;
reg   [3:0] state_matrix_V_addr_16_reg_274;
reg   [2:0] row_index_0_reg_130;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln719_fu_183_p1;
wire   [63:0] tmp_24_fu_195_p3;
wire   [63:0] tmp_25_fu_210_p3;
wire   [63:0] tmp_26_fu_225_p3;
wire   [4:0] or_ln719_fu_189_p2;
wire   [4:0] or_ln719_1_fu_205_p2;
wire   [4:0] or_ln719_2_fu_220_p2;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_index_0_reg_130 <= row_index_reg_238;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_index_0_reg_130 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_153 <= grp_fu_141_p2;
        reg_158 <= grp_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_index_reg_238 <= row_index_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        state_matrix_V_addr_14_reg_254[3 : 2] <= tmp_24_fu_195_p3[3 : 2];
        state_matrix_V_addr_reg_249[3 : 2] <= zext_ln719_fu_183_p1[3 : 2];
        tmp_s_reg_243[4 : 2] <= tmp_s_fu_175_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_matrix_V_addr_15_reg_269[3 : 2] <= tmp_25_fu_210_p3[3 : 2];
        state_matrix_V_addr_16_reg_274[3 : 2] <= tmp_26_fu_225_p3[3 : 2];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        round_key_matrix_V_address0 = tmp_25_fu_210_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        round_key_matrix_V_address0 = zext_ln719_fu_183_p1;
    end else begin
        round_key_matrix_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        round_key_matrix_V_address1 = tmp_26_fu_225_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        round_key_matrix_V_address1 = tmp_24_fu_195_p3;
    end else begin
        round_key_matrix_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        round_key_matrix_V_ce0 = 1'b1;
    end else begin
        round_key_matrix_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        round_key_matrix_V_ce1 = 1'b1;
    end else begin
        round_key_matrix_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_matrix_V_address0 = state_matrix_V_addr_15_reg_269;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_matrix_V_address0 = state_matrix_V_addr_reg_249;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_matrix_V_address0 = tmp_25_fu_210_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_matrix_V_address0 = zext_ln719_fu_183_p1;
    end else begin
        state_matrix_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_matrix_V_address1 = state_matrix_V_addr_16_reg_274;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_matrix_V_address1 = state_matrix_V_addr_14_reg_254;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_matrix_V_address1 = tmp_26_fu_225_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_matrix_V_address1 = tmp_24_fu_195_p3;
    end else begin
        state_matrix_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        state_matrix_V_ce0 = 1'b1;
    end else begin
        state_matrix_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        state_matrix_V_ce1 = 1'b1;
    end else begin
        state_matrix_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        state_matrix_V_we0 = 1'b1;
    end else begin
        state_matrix_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        state_matrix_V_we1 = 1'b1;
    end else begin
        state_matrix_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln124_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign grp_fu_141_p2 = (state_matrix_V_q0 ^ round_key_matrix_V_q0);

assign grp_fu_147_p2 = (state_matrix_V_q1 ^ round_key_matrix_V_q1);

assign icmp_ln124_fu_163_p2 = ((row_index_0_reg_130 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln719_1_fu_205_p2 = (tmp_s_reg_243 | 5'd2);

assign or_ln719_2_fu_220_p2 = (tmp_s_reg_243 | 5'd3);

assign or_ln719_fu_189_p2 = (tmp_s_fu_175_p3 | 5'd1);

assign row_index_fu_169_p2 = (row_index_0_reg_130 + 3'd1);

assign state_matrix_V_d0 = reg_153;

assign state_matrix_V_d1 = reg_158;

assign tmp_24_fu_195_p3 = {{59'd0}, {or_ln719_fu_189_p2}};

assign tmp_25_fu_210_p3 = {{59'd0}, {or_ln719_1_fu_205_p2}};

assign tmp_26_fu_225_p3 = {{59'd0}, {or_ln719_2_fu_220_p2}};

assign tmp_s_fu_175_p3 = {{row_index_0_reg_130}, {2'd0}};

assign zext_ln719_fu_183_p1 = tmp_s_fu_175_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_243[1:0] <= 2'b00;
    state_matrix_V_addr_reg_249[1:0] <= 2'b00;
    state_matrix_V_addr_14_reg_254[1:0] <= 2'b01;
    state_matrix_V_addr_15_reg_269[1:0] <= 2'b10;
    state_matrix_V_addr_16_reg_274[1:0] <= 2'b11;
end

endmodule //aes_add_round_key
