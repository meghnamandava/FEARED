// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_mix_columns84142_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_matrix_V_address0,
        state_matrix_V_ce0,
        state_matrix_V_we0,
        state_matrix_V_d0,
        state_matrix_V_q0,
        state_matrix_V_address1,
        state_matrix_V_ce1,
        state_matrix_V_q1,
        m_axi_constant_matrix_V_AWVALID,
        m_axi_constant_matrix_V_AWREADY,
        m_axi_constant_matrix_V_AWADDR,
        m_axi_constant_matrix_V_AWID,
        m_axi_constant_matrix_V_AWLEN,
        m_axi_constant_matrix_V_AWSIZE,
        m_axi_constant_matrix_V_AWBURST,
        m_axi_constant_matrix_V_AWLOCK,
        m_axi_constant_matrix_V_AWCACHE,
        m_axi_constant_matrix_V_AWPROT,
        m_axi_constant_matrix_V_AWQOS,
        m_axi_constant_matrix_V_AWREGION,
        m_axi_constant_matrix_V_AWUSER,
        m_axi_constant_matrix_V_WVALID,
        m_axi_constant_matrix_V_WREADY,
        m_axi_constant_matrix_V_WDATA,
        m_axi_constant_matrix_V_WSTRB,
        m_axi_constant_matrix_V_WLAST,
        m_axi_constant_matrix_V_WID,
        m_axi_constant_matrix_V_WUSER,
        m_axi_constant_matrix_V_ARVALID,
        m_axi_constant_matrix_V_ARREADY,
        m_axi_constant_matrix_V_ARADDR,
        m_axi_constant_matrix_V_ARID,
        m_axi_constant_matrix_V_ARLEN,
        m_axi_constant_matrix_V_ARSIZE,
        m_axi_constant_matrix_V_ARBURST,
        m_axi_constant_matrix_V_ARLOCK,
        m_axi_constant_matrix_V_ARCACHE,
        m_axi_constant_matrix_V_ARPROT,
        m_axi_constant_matrix_V_ARQOS,
        m_axi_constant_matrix_V_ARREGION,
        m_axi_constant_matrix_V_ARUSER,
        m_axi_constant_matrix_V_RVALID,
        m_axi_constant_matrix_V_RREADY,
        m_axi_constant_matrix_V_RDATA,
        m_axi_constant_matrix_V_RLAST,
        m_axi_constant_matrix_V_RID,
        m_axi_constant_matrix_V_RUSER,
        m_axi_constant_matrix_V_RRESP,
        m_axi_constant_matrix_V_BVALID,
        m_axi_constant_matrix_V_BREADY,
        m_axi_constant_matrix_V_BRESP,
        m_axi_constant_matrix_V_BID,
        m_axi_constant_matrix_V_BUSER,
        constant_matrix_V_offset,
        m_axi_multiplication_V_AWVALID,
        m_axi_multiplication_V_AWREADY,
        m_axi_multiplication_V_AWADDR,
        m_axi_multiplication_V_AWID,
        m_axi_multiplication_V_AWLEN,
        m_axi_multiplication_V_AWSIZE,
        m_axi_multiplication_V_AWBURST,
        m_axi_multiplication_V_AWLOCK,
        m_axi_multiplication_V_AWCACHE,
        m_axi_multiplication_V_AWPROT,
        m_axi_multiplication_V_AWQOS,
        m_axi_multiplication_V_AWREGION,
        m_axi_multiplication_V_AWUSER,
        m_axi_multiplication_V_WVALID,
        m_axi_multiplication_V_WREADY,
        m_axi_multiplication_V_WDATA,
        m_axi_multiplication_V_WSTRB,
        m_axi_multiplication_V_WLAST,
        m_axi_multiplication_V_WID,
        m_axi_multiplication_V_WUSER,
        m_axi_multiplication_V_ARVALID,
        m_axi_multiplication_V_ARREADY,
        m_axi_multiplication_V_ARADDR,
        m_axi_multiplication_V_ARID,
        m_axi_multiplication_V_ARLEN,
        m_axi_multiplication_V_ARSIZE,
        m_axi_multiplication_V_ARBURST,
        m_axi_multiplication_V_ARLOCK,
        m_axi_multiplication_V_ARCACHE,
        m_axi_multiplication_V_ARPROT,
        m_axi_multiplication_V_ARQOS,
        m_axi_multiplication_V_ARREGION,
        m_axi_multiplication_V_ARUSER,
        m_axi_multiplication_V_RVALID,
        m_axi_multiplication_V_RREADY,
        m_axi_multiplication_V_RDATA,
        m_axi_multiplication_V_RLAST,
        m_axi_multiplication_V_RID,
        m_axi_multiplication_V_RUSER,
        m_axi_multiplication_V_RRESP,
        m_axi_multiplication_V_BVALID,
        m_axi_multiplication_V_BREADY,
        m_axi_multiplication_V_BRESP,
        m_axi_multiplication_V_BID,
        m_axi_multiplication_V_BUSER,
        multiplication_V_offset
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_matrix_V_address0;
output   state_matrix_V_ce0;
output   state_matrix_V_we0;
output  [15:0] state_matrix_V_d0;
input  [15:0] state_matrix_V_q0;
output  [3:0] state_matrix_V_address1;
output   state_matrix_V_ce1;
input  [15:0] state_matrix_V_q1;
output   m_axi_constant_matrix_V_AWVALID;
input   m_axi_constant_matrix_V_AWREADY;
output  [31:0] m_axi_constant_matrix_V_AWADDR;
output  [0:0] m_axi_constant_matrix_V_AWID;
output  [31:0] m_axi_constant_matrix_V_AWLEN;
output  [2:0] m_axi_constant_matrix_V_AWSIZE;
output  [1:0] m_axi_constant_matrix_V_AWBURST;
output  [1:0] m_axi_constant_matrix_V_AWLOCK;
output  [3:0] m_axi_constant_matrix_V_AWCACHE;
output  [2:0] m_axi_constant_matrix_V_AWPROT;
output  [3:0] m_axi_constant_matrix_V_AWQOS;
output  [3:0] m_axi_constant_matrix_V_AWREGION;
output  [0:0] m_axi_constant_matrix_V_AWUSER;
output   m_axi_constant_matrix_V_WVALID;
input   m_axi_constant_matrix_V_WREADY;
output  [15:0] m_axi_constant_matrix_V_WDATA;
output  [1:0] m_axi_constant_matrix_V_WSTRB;
output   m_axi_constant_matrix_V_WLAST;
output  [0:0] m_axi_constant_matrix_V_WID;
output  [0:0] m_axi_constant_matrix_V_WUSER;
output   m_axi_constant_matrix_V_ARVALID;
input   m_axi_constant_matrix_V_ARREADY;
output  [31:0] m_axi_constant_matrix_V_ARADDR;
output  [0:0] m_axi_constant_matrix_V_ARID;
output  [31:0] m_axi_constant_matrix_V_ARLEN;
output  [2:0] m_axi_constant_matrix_V_ARSIZE;
output  [1:0] m_axi_constant_matrix_V_ARBURST;
output  [1:0] m_axi_constant_matrix_V_ARLOCK;
output  [3:0] m_axi_constant_matrix_V_ARCACHE;
output  [2:0] m_axi_constant_matrix_V_ARPROT;
output  [3:0] m_axi_constant_matrix_V_ARQOS;
output  [3:0] m_axi_constant_matrix_V_ARREGION;
output  [0:0] m_axi_constant_matrix_V_ARUSER;
input   m_axi_constant_matrix_V_RVALID;
output   m_axi_constant_matrix_V_RREADY;
input  [15:0] m_axi_constant_matrix_V_RDATA;
input   m_axi_constant_matrix_V_RLAST;
input  [0:0] m_axi_constant_matrix_V_RID;
input  [0:0] m_axi_constant_matrix_V_RUSER;
input  [1:0] m_axi_constant_matrix_V_RRESP;
input   m_axi_constant_matrix_V_BVALID;
output   m_axi_constant_matrix_V_BREADY;
input  [1:0] m_axi_constant_matrix_V_BRESP;
input  [0:0] m_axi_constant_matrix_V_BID;
input  [0:0] m_axi_constant_matrix_V_BUSER;
input  [30:0] constant_matrix_V_offset;
output   m_axi_multiplication_V_AWVALID;
input   m_axi_multiplication_V_AWREADY;
output  [31:0] m_axi_multiplication_V_AWADDR;
output  [0:0] m_axi_multiplication_V_AWID;
output  [31:0] m_axi_multiplication_V_AWLEN;
output  [2:0] m_axi_multiplication_V_AWSIZE;
output  [1:0] m_axi_multiplication_V_AWBURST;
output  [1:0] m_axi_multiplication_V_AWLOCK;
output  [3:0] m_axi_multiplication_V_AWCACHE;
output  [2:0] m_axi_multiplication_V_AWPROT;
output  [3:0] m_axi_multiplication_V_AWQOS;
output  [3:0] m_axi_multiplication_V_AWREGION;
output  [0:0] m_axi_multiplication_V_AWUSER;
output   m_axi_multiplication_V_WVALID;
input   m_axi_multiplication_V_WREADY;
output  [15:0] m_axi_multiplication_V_WDATA;
output  [1:0] m_axi_multiplication_V_WSTRB;
output   m_axi_multiplication_V_WLAST;
output  [0:0] m_axi_multiplication_V_WID;
output  [0:0] m_axi_multiplication_V_WUSER;
output   m_axi_multiplication_V_ARVALID;
input   m_axi_multiplication_V_ARREADY;
output  [31:0] m_axi_multiplication_V_ARADDR;
output  [0:0] m_axi_multiplication_V_ARID;
output  [31:0] m_axi_multiplication_V_ARLEN;
output  [2:0] m_axi_multiplication_V_ARSIZE;
output  [1:0] m_axi_multiplication_V_ARBURST;
output  [1:0] m_axi_multiplication_V_ARLOCK;
output  [3:0] m_axi_multiplication_V_ARCACHE;
output  [2:0] m_axi_multiplication_V_ARPROT;
output  [3:0] m_axi_multiplication_V_ARQOS;
output  [3:0] m_axi_multiplication_V_ARREGION;
output  [0:0] m_axi_multiplication_V_ARUSER;
input   m_axi_multiplication_V_RVALID;
output   m_axi_multiplication_V_RREADY;
input  [15:0] m_axi_multiplication_V_RDATA;
input   m_axi_multiplication_V_RLAST;
input  [0:0] m_axi_multiplication_V_RID;
input  [0:0] m_axi_multiplication_V_RUSER;
input  [1:0] m_axi_multiplication_V_RRESP;
input   m_axi_multiplication_V_BVALID;
output   m_axi_multiplication_V_BREADY;
input  [1:0] m_axi_multiplication_V_BRESP;
input  [0:0] m_axi_multiplication_V_BID;
input  [0:0] m_axi_multiplication_V_BUSER;
input  [30:0] multiplication_V_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_matrix_V_address0;
reg state_matrix_V_ce0;
reg state_matrix_V_we0;
reg[3:0] state_matrix_V_address1;
reg state_matrix_V_ce1;
reg m_axi_constant_matrix_V_ARVALID;
reg[31:0] m_axi_constant_matrix_V_ARADDR;
reg m_axi_constant_matrix_V_RREADY;
reg m_axi_multiplication_V_ARVALID;
reg[31:0] m_axi_multiplication_V_ARADDR;
reg m_axi_multiplication_V_RREADY;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    constant_matrix_V_blk_n_AR;
wire    ap_CS_fsm_state6;
reg    constant_matrix_V_blk_n_R;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state24;
reg    multiplication_V_blk_n_AR;
reg    multiplication_V_blk_n_R;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state33;
wire   [31:0] constant_matrix_V_of_1_fu_266_p1;
reg   [31:0] constant_matrix_V_of_1_reg_849;
wire   [63:0] zext_ln78_fu_270_p1;
reg   [63:0] zext_ln78_reg_857;
wire   [2:0] column_index_fu_280_p2;
reg   [2:0] column_index_reg_868;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln96_fu_274_p2;
wire  signed [2:0] xor_ln180_fu_291_p2;
reg  signed [2:0] xor_ln180_reg_878;
wire    ap_CS_fsm_state3;
reg  signed [15:0] state_matrix_V_load_reg_898;
reg  signed [15:0] state_matrix_V_load_1_reg_904;
wire   [5:0] zext_ln180_fu_319_p1;
reg   [5:0] zext_ln180_reg_910;
wire    ap_CS_fsm_state4;
reg  signed [15:0] state_matrix_V_load_2_reg_915;
reg  signed [15:0] state_matrix_V_load_3_reg_920;
wire  signed [17:0] sext_ln544_fu_323_p1;
reg  signed [17:0] sext_ln544_reg_925;
wire  signed [17:0] sext_ln544_5_fu_326_p1;
reg  signed [17:0] sext_ln544_5_reg_930;
wire  signed [17:0] sext_ln544_6_fu_329_p1;
reg  signed [17:0] sext_ln544_6_reg_935;
wire  signed [17:0] sext_ln103_fu_333_p1;
reg  signed [17:0] sext_ln103_reg_940;
wire   [2:0] row_index_fu_343_p2;
reg   [2:0] row_index_reg_948;
wire    ap_CS_fsm_state5;
wire   [5:0] add_ln180_fu_361_p2;
reg   [5:0] add_ln180_reg_953;
wire   [0:0] icmp_ln103_fu_337_p2;
wire   [2:0] xor_ln544_fu_366_p2;
reg   [2:0] xor_ln544_reg_958;
reg   [31:0] constant_matrix_V_ad_reg_963;
reg   [31:0] constant_matrix_V_ad_8_reg_969;
reg   [31:0] constant_matrix_V_ad_9_reg_975;
reg   [31:0] constant_matrix_V_ad_10_reg_981;
reg   [15:0] constant_matrix_V_ad_11_reg_987;
wire   [15:0] shl_ln78_fu_511_p2;
reg   [15:0] shl_ln78_reg_992;
reg   [31:0] multiplication_V_add_reg_997;
reg   [15:0] multiplication_V_add_8_reg_1003;
reg    ap_block_state22;
reg   [7:0] tmp_17_reg_1008;
wire   [15:0] tmp_24_fu_564_p3;
reg   [15:0] tmp_24_reg_1013;
reg   [31:0] multiplication_V_add_9_reg_1018;
reg   [15:0] constant_matrix_V_ad_13_reg_1024;
wire   [15:0] shl_ln719_fu_609_p2;
reg   [15:0] shl_ln719_reg_1029;
reg   [31:0] multiplication_V_add_11_reg_1034;
reg   [7:0] tmp_29_reg_1040;
wire   [15:0] tmp_30_fu_662_p3;
reg   [15:0] tmp_30_reg_1045;
reg   [31:0] multiplication_V_add_13_reg_1050;
reg   [15:0] multiplication_V_add_10_reg_1056;
reg   [15:0] multiplication_V_add_12_reg_1061;
wire   [7:0] xor_ln719_fu_765_p2;
reg   [7:0] xor_ln719_reg_1066;
reg   [15:0] multiplication_V_add_14_reg_1071;
reg   [2:0] column_index_0_reg_243;
reg   [2:0] row_index_0_reg_255;
wire    ap_CS_fsm_state34;
wire   [63:0] zext_ln99_fu_286_p1;
wire   [63:0] zext_ln180_24_fu_297_p1;
wire   [63:0] tmp_fu_302_p3;
wire   [63:0] zext_ln180_25_fu_314_p1;
wire   [63:0] zext_ln180_27_fu_771_p1;
wire   [63:0] zext_ln544_5_fu_389_p1;
wire   [63:0] zext_ln544_7_fu_431_p1;
wire   [63:0] zext_ln544_9_fu_466_p1;
wire   [63:0] zext_ln544_11_fu_501_p1;
wire   [63:0] add_ln78_4_fu_543_p2;
wire   [63:0] add_ln719_10_fu_598_p2;
wire   [63:0] add_ln719_13_fu_641_p2;
wire   [63:0] add_ln719_15_fu_696_p2;
reg    ap_block_state15_io;
wire  signed [3:0] sext_ln180_fu_311_p1;
wire  signed [15:0] sext_ln544_6_fu_329_p0;
wire  signed [15:0] sext_ln103_fu_333_p0;
wire   [4:0] tmp_s_fu_349_p3;
wire   [5:0] zext_ln180_26_fu_357_p1;
wire   [3:0] tmp_16_fu_372_p3;
wire   [31:0] zext_ln544_fu_380_p1;
wire   [31:0] add_ln544_fu_384_p2;
wire   [4:0] tmp_18_fu_399_p3;
wire   [4:0] or_ln544_fu_406_p2;
wire   [3:0] tmp_19_fu_412_p4;
wire   [31:0] zext_ln544_6_fu_422_p1;
wire   [31:0] add_ln544_4_fu_426_p2;
wire   [4:0] or_ln544_3_fu_441_p2;
wire   [3:0] tmp_20_fu_447_p4;
wire   [31:0] zext_ln544_8_fu_457_p1;
wire   [31:0] add_ln544_5_fu_461_p2;
wire   [4:0] or_ln544_4_fu_476_p2;
wire   [3:0] tmp_21_fu_482_p4;
wire   [31:0] zext_ln544_10_fu_492_p1;
wire   [31:0] add_ln544_6_fu_496_p2;
wire   [17:0] zext_ln78_3_fu_516_p1;
wire   [17:0] add_ln78_fu_520_p2;
wire   [16:0] tmp_22_fu_525_p4;
wire  signed [62:0] sext_ln78_fu_535_p1;
wire   [63:0] zext_ln78_4_fu_539_p1;
wire   [17:0] zext_ln719_7_fu_571_p1;
wire   [17:0] add_ln719_fu_575_p2;
wire   [16:0] tmp_25_fu_580_p4;
wire  signed [62:0] sext_ln719_fu_590_p1;
wire   [63:0] zext_ln719_8_fu_594_p1;
wire   [17:0] zext_ln719_9_fu_614_p1;
wire   [17:0] add_ln719_12_fu_618_p2;
wire   [16:0] tmp_27_fu_623_p4;
wire  signed [62:0] sext_ln719_3_fu_633_p1;
wire   [63:0] zext_ln719_10_fu_637_p1;
wire   [17:0] zext_ln719_11_fu_669_p1;
wire   [17:0] add_ln719_14_fu_673_p2;
wire   [16:0] tmp_31_fu_678_p4;
wire  signed [62:0] sext_ln719_4_fu_688_p1;
wire   [63:0] zext_ln719_12_fu_692_p1;
wire   [15:0] add_ln78_5_fu_707_p2;
wire   [0:0] empty_43_fu_711_p1;
wire   [3:0] tmp_23_fu_715_p3;
wire   [15:0] tmp_83_fu_723_p1;
wire   [15:0] lshr_ln78_fu_727_p2;
wire   [15:0] add_ln719_9_fu_736_p2;
wire   [0:0] empty_44_fu_740_p1;
wire   [3:0] tmp_26_fu_744_p3;
wire   [15:0] tmp_88_fu_752_p1;
wire   [15:0] lshr_ln719_fu_756_p2;
wire   [7:0] trunc_ln719_fu_761_p1;
wire   [7:0] trunc_ln78_fu_732_p1;
wire   [15:0] add_ln719_11_fu_775_p2;
wire   [0:0] empty_45_fu_779_p1;
wire   [3:0] tmp_28_fu_783_p3;
wire   [15:0] tmp_93_fu_791_p1;
wire   [15:0] lshr_ln719_3_fu_795_p2;
wire   [15:0] add_ln719_16_fu_804_p2;
wire   [0:0] empty_46_fu_808_p1;
wire   [3:0] tmp_32_fu_812_p3;
wire   [15:0] tmp_98_fu_820_p1;
wire   [15:0] lshr_ln719_4_fu_824_p2;
wire   [7:0] trunc_ln719_3_fu_800_p1;
wire   [7:0] trunc_ln719_4_fu_829_p1;
wire   [7:0] xor_ln719_1_fu_833_p2;
wire   [7:0] xor_ln719_2_fu_839_p2;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        column_index_0_reg_243 <= column_index_reg_868;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        column_index_0_reg_243 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        row_index_0_reg_255 <= row_index_reg_948;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        row_index_0_reg_255 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln103_fu_337_p2 == 1'd0))) begin
        add_ln180_reg_953 <= add_ln180_fu_361_p2;
        constant_matrix_V_ad_reg_963 <= zext_ln544_5_fu_389_p1;
        xor_ln544_reg_958 <= xor_ln544_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        column_index_reg_868 <= column_index_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (m_axi_constant_matrix_V_RVALID == 1'b1))) begin
        constant_matrix_V_ad_10_reg_981 <= zext_ln544_11_fu_501_p1;
        constant_matrix_V_ad_11_reg_987 <= m_axi_constant_matrix_V_RDATA;
        constant_matrix_V_ad_8_reg_969 <= zext_ln544_7_fu_431_p1;
        constant_matrix_V_ad_9_reg_975 <= zext_ln544_9_fu_466_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (m_axi_constant_matrix_V_RVALID == 1'b1))) begin
        constant_matrix_V_ad_13_reg_1024 <= m_axi_constant_matrix_V_RDATA;
        multiplication_V_add_9_reg_1018 <= add_ln719_10_fu_598_p2;
        tmp_24_reg_1013[15 : 8] <= tmp_24_fu_564_p3[15 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        constant_matrix_V_of_1_reg_849[30 : 0] <= constant_matrix_V_of_1_fu_266_p1[30 : 0];
        zext_ln78_reg_857[30 : 0] <= zext_ln78_fu_270_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (m_axi_multiplication_V_RVALID == 1'b1))) begin
        multiplication_V_add_10_reg_1056 <= m_axi_multiplication_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_multiplication_V_ARREADY == 1'b0) | (m_axi_constant_matrix_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state24))) begin
        multiplication_V_add_11_reg_1034 <= add_ln719_13_fu_641_p2;
        shl_ln719_reg_1029[15 : 8] <= shl_ln719_fu_609_p2[15 : 8];
        tmp_29_reg_1040 <= {{m_axi_constant_matrix_V_RDATA[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (m_axi_multiplication_V_RVALID == 1'b1))) begin
        multiplication_V_add_12_reg_1061 <= m_axi_multiplication_V_RDATA;
        xor_ln719_reg_1066 <= xor_ln719_fu_765_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (m_axi_multiplication_V_ARREADY == 1'b1))) begin
        multiplication_V_add_13_reg_1050 <= add_ln719_15_fu_696_p2;
        tmp_30_reg_1045[15 : 8] <= tmp_30_fu_662_p3[15 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (m_axi_multiplication_V_RVALID == 1'b1))) begin
        multiplication_V_add_14_reg_1071 <= m_axi_multiplication_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_multiplication_V_RVALID == 1'b0) | (m_axi_constant_matrix_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
        multiplication_V_add_8_reg_1003 <= m_axi_multiplication_V_RDATA;
        tmp_17_reg_1008 <= {{m_axi_constant_matrix_V_RDATA[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_constant_matrix_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        multiplication_V_add_reg_997 <= add_ln78_4_fu_543_p2;
        shl_ln78_reg_992[15 : 8] <= shl_ln78_fu_511_p2[15 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_index_reg_948 <= row_index_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sext_ln103_reg_940 <= sext_ln103_fu_333_p1;
        sext_ln544_5_reg_930 <= sext_ln544_5_fu_326_p1;
        sext_ln544_6_reg_935 <= sext_ln544_6_fu_329_p1;
        sext_ln544_reg_925 <= sext_ln544_fu_323_p1;
        state_matrix_V_load_2_reg_915 <= state_matrix_V_q0;
        state_matrix_V_load_3_reg_920 <= state_matrix_V_q1;
        zext_ln180_reg_910[2 : 0] <= zext_ln180_fu_319_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_matrix_V_load_1_reg_904 <= state_matrix_V_q1;
        state_matrix_V_load_reg_898 <= state_matrix_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln96_fu_274_p2 == 1'd0))) begin
        xor_ln180_reg_878 <= xor_ln180_fu_291_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln96_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln96_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state6))) begin
        constant_matrix_V_blk_n_AR = m_axi_constant_matrix_V_ARREADY;
    end else begin
        constant_matrix_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13))) begin
        constant_matrix_V_blk_n_R = m_axi_constant_matrix_V_RVALID;
    end else begin
        constant_matrix_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_constant_matrix_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        m_axi_constant_matrix_V_ARADDR = constant_matrix_V_ad_10_reg_981;
    end else if (((1'b0 == ap_block_state15_io) & (1'b1 == ap_CS_fsm_state15))) begin
        m_axi_constant_matrix_V_ARADDR = constant_matrix_V_ad_9_reg_975;
    end else if (((m_axi_constant_matrix_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        m_axi_constant_matrix_V_ARADDR = constant_matrix_V_ad_8_reg_969;
    end else if (((m_axi_constant_matrix_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        m_axi_constant_matrix_V_ARADDR = constant_matrix_V_ad_reg_963;
    end else begin
        m_axi_constant_matrix_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_constant_matrix_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((1'b0 == ap_block_state15_io) & (1'b1 == ap_CS_fsm_state15)) | ((m_axi_constant_matrix_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((m_axi_constant_matrix_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        m_axi_constant_matrix_V_ARVALID = 1'b1;
    end else begin
        m_axi_constant_matrix_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((m_axi_multiplication_V_ARREADY == 1'b0) | (m_axi_constant_matrix_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == ap_CS_fsm_state23) & (m_axi_constant_matrix_V_RVALID == 1'b1)) | (~((m_axi_multiplication_V_RVALID == 1'b0) | (m_axi_constant_matrix_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == ap_CS_fsm_state13) & (m_axi_constant_matrix_V_RVALID == 1'b1)))) begin
        m_axi_constant_matrix_V_RREADY = 1'b1;
    end else begin
        m_axi_constant_matrix_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (m_axi_multiplication_V_ARREADY == 1'b1))) begin
        m_axi_multiplication_V_ARADDR = multiplication_V_add_13_reg_1050;
    end else if (((1'b1 == ap_CS_fsm_state25) & (m_axi_multiplication_V_ARREADY == 1'b1))) begin
        m_axi_multiplication_V_ARADDR = multiplication_V_add_11_reg_1034;
    end else if ((~((m_axi_multiplication_V_ARREADY == 1'b0) | (m_axi_constant_matrix_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state24))) begin
        m_axi_multiplication_V_ARADDR = multiplication_V_add_9_reg_1018;
    end else if (((1'b0 == ap_block_state15_io) & (1'b1 == ap_CS_fsm_state15))) begin
        m_axi_multiplication_V_ARADDR = multiplication_V_add_reg_997;
    end else begin
        m_axi_multiplication_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state26) & (m_axi_multiplication_V_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (m_axi_multiplication_V_ARREADY == 1'b1)) | (~((m_axi_multiplication_V_ARREADY == 1'b0) | (m_axi_constant_matrix_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state24)) | ((1'b0 == ap_block_state15_io) & (1'b1 == ap_CS_fsm_state15)))) begin
        m_axi_multiplication_V_ARVALID = 1'b1;
    end else begin
        m_axi_multiplication_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state33) & (m_axi_multiplication_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state32) & (m_axi_multiplication_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (m_axi_multiplication_V_RVALID == 1'b1)) | (~((m_axi_multiplication_V_RVALID == 1'b0) | (m_axi_constant_matrix_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state22)))) begin
        m_axi_multiplication_V_RREADY = 1'b1;
    end else begin
        m_axi_multiplication_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15))) begin
        multiplication_V_blk_n_AR = m_axi_multiplication_V_ARREADY;
    end else begin
        multiplication_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state22))) begin
        multiplication_V_blk_n_R = m_axi_multiplication_V_RVALID;
    end else begin
        multiplication_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        state_matrix_V_address0 = zext_ln180_27_fu_771_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_matrix_V_address0 = tmp_fu_302_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_matrix_V_address0 = zext_ln99_fu_286_p1;
    end else begin
        state_matrix_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_matrix_V_address1 = zext_ln180_25_fu_314_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_matrix_V_address1 = zext_ln180_24_fu_297_p1;
    end else begin
        state_matrix_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        state_matrix_V_ce0 = 1'b1;
    end else begin
        state_matrix_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        state_matrix_V_ce1 = 1'b1;
    end else begin
        state_matrix_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        state_matrix_V_we0 = 1'b1;
    end else begin
        state_matrix_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln96_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln103_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((m_axi_constant_matrix_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (m_axi_constant_matrix_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((m_axi_constant_matrix_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b0 == ap_block_state15_io) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((m_axi_constant_matrix_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if ((~((m_axi_multiplication_V_RVALID == 1'b0) | (m_axi_constant_matrix_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (m_axi_constant_matrix_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((m_axi_multiplication_V_ARREADY == 1'b0) | (m_axi_constant_matrix_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (m_axi_multiplication_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (m_axi_multiplication_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (m_axi_multiplication_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (m_axi_multiplication_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (m_axi_multiplication_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln180_fu_361_p2 = (zext_ln180_26_fu_357_p1 + zext_ln180_reg_910);

assign add_ln544_4_fu_426_p2 = (constant_matrix_V_of_1_reg_849 + zext_ln544_6_fu_422_p1);

assign add_ln544_5_fu_461_p2 = (constant_matrix_V_of_1_reg_849 + zext_ln544_8_fu_457_p1);

assign add_ln544_6_fu_496_p2 = (constant_matrix_V_of_1_reg_849 + zext_ln544_10_fu_492_p1);

assign add_ln544_fu_384_p2 = (constant_matrix_V_of_1_reg_849 + zext_ln544_fu_380_p1);

assign add_ln719_10_fu_598_p2 = (zext_ln78_reg_857 + zext_ln719_8_fu_594_p1);

assign add_ln719_11_fu_775_p2 = ($signed(state_matrix_V_load_2_reg_915) + $signed(shl_ln719_reg_1029));

assign add_ln719_12_fu_618_p2 = ($signed(zext_ln719_9_fu_614_p1) + $signed(sext_ln544_6_reg_935));

assign add_ln719_13_fu_641_p2 = (zext_ln78_reg_857 + zext_ln719_10_fu_637_p1);

assign add_ln719_14_fu_673_p2 = ($signed(zext_ln719_11_fu_669_p1) + $signed(sext_ln103_reg_940));

assign add_ln719_15_fu_696_p2 = (zext_ln78_reg_857 + zext_ln719_12_fu_692_p1);

assign add_ln719_16_fu_804_p2 = ($signed(state_matrix_V_load_3_reg_920) + $signed(tmp_30_reg_1045));

assign add_ln719_9_fu_736_p2 = ($signed(state_matrix_V_load_1_reg_904) + $signed(tmp_24_reg_1013));

assign add_ln719_fu_575_p2 = ($signed(zext_ln719_7_fu_571_p1) + $signed(sext_ln544_5_reg_930));

assign add_ln78_4_fu_543_p2 = (zext_ln78_reg_857 + zext_ln78_4_fu_539_p1);

assign add_ln78_5_fu_707_p2 = ($signed(state_matrix_V_load_reg_898) + $signed(shl_ln78_reg_992));

assign add_ln78_fu_520_p2 = ($signed(zext_ln78_3_fu_516_p1) + $signed(sext_ln544_reg_925));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state15_io = ((m_axi_constant_matrix_V_ARREADY == 1'b0) | (m_axi_multiplication_V_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state22 = ((m_axi_multiplication_V_RVALID == 1'b0) | (m_axi_constant_matrix_V_RVALID == 1'b0));
end

assign column_index_fu_280_p2 = (column_index_0_reg_243 + 3'd1);

assign constant_matrix_V_of_1_fu_266_p1 = constant_matrix_V_offset;

assign empty_43_fu_711_p1 = add_ln78_5_fu_707_p2[0:0];

assign empty_44_fu_740_p1 = add_ln719_9_fu_736_p2[0:0];

assign empty_45_fu_779_p1 = add_ln719_11_fu_775_p2[0:0];

assign empty_46_fu_808_p1 = add_ln719_16_fu_804_p2[0:0];

assign icmp_ln103_fu_337_p2 = ((row_index_0_reg_255 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_274_p2 = ((column_index_0_reg_243 == 3'd4) ? 1'b1 : 1'b0);

assign lshr_ln719_3_fu_795_p2 = multiplication_V_add_12_reg_1061 >> tmp_93_fu_791_p1;

assign lshr_ln719_4_fu_824_p2 = multiplication_V_add_14_reg_1071 >> tmp_98_fu_820_p1;

assign lshr_ln719_fu_756_p2 = multiplication_V_add_10_reg_1056 >> tmp_88_fu_752_p1;

assign lshr_ln78_fu_727_p2 = multiplication_V_add_8_reg_1003 >> tmp_83_fu_723_p1;

assign m_axi_constant_matrix_V_ARBURST = 2'd0;

assign m_axi_constant_matrix_V_ARCACHE = 4'd0;

assign m_axi_constant_matrix_V_ARID = 1'd0;

assign m_axi_constant_matrix_V_ARLEN = 32'd1;

assign m_axi_constant_matrix_V_ARLOCK = 2'd0;

assign m_axi_constant_matrix_V_ARPROT = 3'd0;

assign m_axi_constant_matrix_V_ARQOS = 4'd0;

assign m_axi_constant_matrix_V_ARREGION = 4'd0;

assign m_axi_constant_matrix_V_ARSIZE = 3'd0;

assign m_axi_constant_matrix_V_ARUSER = 1'd0;

assign m_axi_constant_matrix_V_AWADDR = 32'd0;

assign m_axi_constant_matrix_V_AWBURST = 2'd0;

assign m_axi_constant_matrix_V_AWCACHE = 4'd0;

assign m_axi_constant_matrix_V_AWID = 1'd0;

assign m_axi_constant_matrix_V_AWLEN = 32'd0;

assign m_axi_constant_matrix_V_AWLOCK = 2'd0;

assign m_axi_constant_matrix_V_AWPROT = 3'd0;

assign m_axi_constant_matrix_V_AWQOS = 4'd0;

assign m_axi_constant_matrix_V_AWREGION = 4'd0;

assign m_axi_constant_matrix_V_AWSIZE = 3'd0;

assign m_axi_constant_matrix_V_AWUSER = 1'd0;

assign m_axi_constant_matrix_V_AWVALID = 1'b0;

assign m_axi_constant_matrix_V_BREADY = 1'b0;

assign m_axi_constant_matrix_V_WDATA = 16'd0;

assign m_axi_constant_matrix_V_WID = 1'd0;

assign m_axi_constant_matrix_V_WLAST = 1'b0;

assign m_axi_constant_matrix_V_WSTRB = 2'd0;

assign m_axi_constant_matrix_V_WUSER = 1'd0;

assign m_axi_constant_matrix_V_WVALID = 1'b0;

assign m_axi_multiplication_V_ARBURST = 2'd0;

assign m_axi_multiplication_V_ARCACHE = 4'd0;

assign m_axi_multiplication_V_ARID = 1'd0;

assign m_axi_multiplication_V_ARLEN = 32'd1;

assign m_axi_multiplication_V_ARLOCK = 2'd0;

assign m_axi_multiplication_V_ARPROT = 3'd0;

assign m_axi_multiplication_V_ARQOS = 4'd0;

assign m_axi_multiplication_V_ARREGION = 4'd0;

assign m_axi_multiplication_V_ARSIZE = 3'd0;

assign m_axi_multiplication_V_ARUSER = 1'd0;

assign m_axi_multiplication_V_AWADDR = 32'd0;

assign m_axi_multiplication_V_AWBURST = 2'd0;

assign m_axi_multiplication_V_AWCACHE = 4'd0;

assign m_axi_multiplication_V_AWID = 1'd0;

assign m_axi_multiplication_V_AWLEN = 32'd0;

assign m_axi_multiplication_V_AWLOCK = 2'd0;

assign m_axi_multiplication_V_AWPROT = 3'd0;

assign m_axi_multiplication_V_AWQOS = 4'd0;

assign m_axi_multiplication_V_AWREGION = 4'd0;

assign m_axi_multiplication_V_AWSIZE = 3'd0;

assign m_axi_multiplication_V_AWUSER = 1'd0;

assign m_axi_multiplication_V_AWVALID = 1'b0;

assign m_axi_multiplication_V_BREADY = 1'b0;

assign m_axi_multiplication_V_WDATA = 16'd0;

assign m_axi_multiplication_V_WID = 1'd0;

assign m_axi_multiplication_V_WLAST = 1'b0;

assign m_axi_multiplication_V_WSTRB = 2'd0;

assign m_axi_multiplication_V_WUSER = 1'd0;

assign m_axi_multiplication_V_WVALID = 1'b0;

assign or_ln544_3_fu_441_p2 = (tmp_18_fu_399_p3 | 5'd2);

assign or_ln544_4_fu_476_p2 = (tmp_18_fu_399_p3 | 5'd3);

assign or_ln544_fu_406_p2 = (tmp_18_fu_399_p3 | 5'd1);

assign row_index_fu_343_p2 = (row_index_0_reg_255 + 3'd1);

assign sext_ln103_fu_333_p0 = state_matrix_V_q1;

assign sext_ln103_fu_333_p1 = sext_ln103_fu_333_p0;

assign sext_ln180_fu_311_p1 = xor_ln180_reg_878;

assign sext_ln544_5_fu_326_p1 = state_matrix_V_load_1_reg_904;

assign sext_ln544_6_fu_329_p0 = state_matrix_V_q0;

assign sext_ln544_6_fu_329_p1 = sext_ln544_6_fu_329_p0;

assign sext_ln544_fu_323_p1 = state_matrix_V_load_reg_898;

assign sext_ln719_3_fu_633_p1 = $signed(tmp_27_fu_623_p4);

assign sext_ln719_4_fu_688_p1 = $signed(tmp_31_fu_678_p4);

assign sext_ln719_fu_590_p1 = $signed(tmp_25_fu_580_p4);

assign sext_ln78_fu_535_p1 = $signed(tmp_22_fu_525_p4);

assign shl_ln719_fu_609_p2 = constant_matrix_V_ad_13_reg_1024 << 16'd8;

assign shl_ln78_fu_511_p2 = constant_matrix_V_ad_11_reg_987 << 16'd8;

assign state_matrix_V_d0 = xor_ln719_2_fu_839_p2;

assign tmp_16_fu_372_p3 = {{xor_ln544_fu_366_p2}, {1'd0}};

assign tmp_18_fu_399_p3 = {{xor_ln544_reg_958}, {2'd0}};

assign tmp_19_fu_412_p4 = {{or_ln544_fu_406_p2[4:1]}};

assign tmp_20_fu_447_p4 = {{or_ln544_3_fu_441_p2[4:1]}};

assign tmp_21_fu_482_p4 = {{or_ln544_4_fu_476_p2[4:1]}};

assign tmp_22_fu_525_p4 = {{add_ln78_fu_520_p2[17:1]}};

assign tmp_23_fu_715_p3 = {{empty_43_fu_711_p1}, {3'd0}};

assign tmp_24_fu_564_p3 = {{tmp_17_reg_1008}, {8'd0}};

assign tmp_25_fu_580_p4 = {{add_ln719_fu_575_p2[17:1]}};

assign tmp_26_fu_744_p3 = {{empty_44_fu_740_p1}, {3'd0}};

assign tmp_27_fu_623_p4 = {{add_ln719_12_fu_618_p2[17:1]}};

assign tmp_28_fu_783_p3 = {{empty_45_fu_779_p1}, {3'd0}};

assign tmp_30_fu_662_p3 = {{tmp_29_reg_1040}, {8'd0}};

assign tmp_31_fu_678_p4 = {{add_ln719_14_fu_673_p2[17:1]}};

assign tmp_32_fu_812_p3 = {{empty_46_fu_808_p1}, {3'd0}};

assign tmp_83_fu_723_p1 = tmp_23_fu_715_p3;

assign tmp_88_fu_752_p1 = tmp_26_fu_744_p3;

assign tmp_93_fu_791_p1 = tmp_28_fu_783_p3;

assign tmp_98_fu_820_p1 = tmp_32_fu_812_p3;

assign tmp_fu_302_p3 = {{61'd1}, {column_index_0_reg_243}};

assign tmp_s_fu_349_p3 = {{row_index_0_reg_255}, {2'd0}};

assign trunc_ln719_3_fu_800_p1 = lshr_ln719_3_fu_795_p2[7:0];

assign trunc_ln719_4_fu_829_p1 = lshr_ln719_4_fu_824_p2[7:0];

assign trunc_ln719_fu_761_p1 = lshr_ln719_fu_756_p2[7:0];

assign trunc_ln78_fu_732_p1 = lshr_ln78_fu_727_p2[7:0];

assign xor_ln180_fu_291_p2 = (column_index_0_reg_243 ^ 3'd4);

assign xor_ln544_fu_366_p2 = (row_index_0_reg_255 ^ 3'd4);

assign xor_ln719_1_fu_833_p2 = (trunc_ln719_4_fu_829_p1 ^ trunc_ln719_3_fu_800_p1);

assign xor_ln719_2_fu_839_p2 = (xor_ln719_reg_1066 ^ xor_ln719_1_fu_833_p2);

assign xor_ln719_fu_765_p2 = (trunc_ln78_fu_732_p1 ^ trunc_ln719_fu_761_p1);

assign zext_ln180_24_fu_297_p1 = $unsigned(xor_ln180_fu_291_p2);

assign zext_ln180_25_fu_314_p1 = $unsigned(sext_ln180_fu_311_p1);

assign zext_ln180_26_fu_357_p1 = tmp_s_fu_349_p3;

assign zext_ln180_27_fu_771_p1 = add_ln180_reg_953;

assign zext_ln180_fu_319_p1 = column_index_0_reg_243;

assign zext_ln544_10_fu_492_p1 = tmp_21_fu_482_p4;

assign zext_ln544_11_fu_501_p1 = add_ln544_6_fu_496_p2;

assign zext_ln544_5_fu_389_p1 = add_ln544_fu_384_p2;

assign zext_ln544_6_fu_422_p1 = tmp_19_fu_412_p4;

assign zext_ln544_7_fu_431_p1 = add_ln544_4_fu_426_p2;

assign zext_ln544_8_fu_457_p1 = tmp_20_fu_447_p4;

assign zext_ln544_9_fu_466_p1 = add_ln544_5_fu_461_p2;

assign zext_ln544_fu_380_p1 = tmp_16_fu_372_p3;

assign zext_ln719_10_fu_637_p1 = $unsigned(sext_ln719_3_fu_633_p1);

assign zext_ln719_11_fu_669_p1 = tmp_30_fu_662_p3;

assign zext_ln719_12_fu_692_p1 = $unsigned(sext_ln719_4_fu_688_p1);

assign zext_ln719_7_fu_571_p1 = tmp_24_fu_564_p3;

assign zext_ln719_8_fu_594_p1 = $unsigned(sext_ln719_fu_590_p1);

assign zext_ln719_9_fu_614_p1 = shl_ln719_fu_609_p2;

assign zext_ln78_3_fu_516_p1 = shl_ln78_fu_511_p2;

assign zext_ln78_4_fu_539_p1 = $unsigned(sext_ln78_fu_535_p1);

assign zext_ln78_fu_270_p1 = multiplication_V_offset;

assign zext_ln99_fu_286_p1 = column_index_0_reg_243;

always @ (posedge ap_clk) begin
    constant_matrix_V_of_1_reg_849[31] <= 1'b0;
    zext_ln78_reg_857[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln180_reg_910[5:3] <= 3'b000;
    shl_ln78_reg_992[7:0] <= 8'b00000000;
    tmp_24_reg_1013[7:0] <= 8'b00000000;
    shl_ln719_reg_1029[7:0] <= 8'b00000000;
    tmp_30_reg_1045[7:0] <= 8'b00000000;
end

endmodule //aes_mix_columns84142_1
