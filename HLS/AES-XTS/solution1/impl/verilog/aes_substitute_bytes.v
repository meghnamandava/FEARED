// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_substitute_bytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_matrix_V_address0,
        state_matrix_V_ce0,
        state_matrix_V_we0,
        state_matrix_V_d0,
        state_matrix_V_q0,
        s_box_V_address0,
        s_box_V_ce0,
        s_box_V_q0,
        s_box_V_offset
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_matrix_V_address0;
output   state_matrix_V_ce0;
output   state_matrix_V_we0;
output  [15:0] state_matrix_V_d0;
input  [15:0] state_matrix_V_q0;
output  [9:0] s_box_V_address0;
output   s_box_V_ce0;
input  [7:0] s_box_V_q0;
input  [1:0] s_box_V_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_matrix_V_address0;
reg state_matrix_V_ce0;
reg state_matrix_V_we0;
reg s_box_V_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] zext_ln46_fu_90_p1;
reg   [10:0] zext_ln46_reg_163;
wire   [2:0] row_index_fu_100_p2;
reg   [2:0] row_index_reg_171;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln50_fu_114_p1;
reg   [5:0] zext_ln50_reg_176;
wire   [0:0] icmp_ln48_fu_94_p2;
wire   [2:0] column_index_fu_124_p2;
reg   [2:0] column_index_reg_184;
wire    ap_CS_fsm_state3;
reg   [3:0] state_matrix_V_addr_reg_189;
wire   [0:0] icmp_ln50_fu_118_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] row_index_0_reg_60;
reg   [2:0] column_index_0_reg_71;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln52_1_fu_139_p1;
wire  signed [63:0] sext_ln78_fu_153_p1;
wire   [9:0] tmp_fu_82_p3;
wire   [4:0] tmp_4_fu_106_p3;
wire   [5:0] zext_ln52_fu_130_p1;
wire   [5:0] add_ln52_fu_134_p2;
wire   [10:0] trunc_ln78_fu_144_p1;
wire   [10:0] add_ln78_fu_148_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_94_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        column_index_0_reg_71 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        column_index_0_reg_71 <= column_index_reg_184;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        row_index_0_reg_60 <= row_index_reg_171;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_index_0_reg_60 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        column_index_reg_184 <= column_index_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_index_reg_171 <= row_index_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        state_matrix_V_addr_reg_189 <= zext_ln52_1_fu_139_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        zext_ln46_reg_163[9 : 8] <= zext_ln46_fu_90_p1[9 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_94_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln50_reg_176[4 : 2] <= zext_ln50_fu_114_p1[4 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln48_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_box_V_ce0 = 1'b1;
    end else begin
        s_box_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_matrix_V_address0 = state_matrix_V_addr_reg_189;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_matrix_V_address0 = zext_ln52_1_fu_139_p1;
    end else begin
        state_matrix_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        state_matrix_V_ce0 = 1'b1;
    end else begin
        state_matrix_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_matrix_V_we0 = 1'b1;
    end else begin
        state_matrix_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln48_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln50_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_fu_134_p2 = (zext_ln52_fu_130_p1 + zext_ln50_reg_176);

assign add_ln78_fu_148_p2 = (trunc_ln78_fu_144_p1 + zext_ln46_reg_163);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign column_index_fu_124_p2 = (column_index_0_reg_71 + 3'd1);

assign icmp_ln48_fu_94_p2 = ((row_index_0_reg_60 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_118_p2 = ((column_index_0_reg_71 == 3'd4) ? 1'b1 : 1'b0);

assign row_index_fu_100_p2 = (row_index_0_reg_60 + 3'd1);

assign s_box_V_address0 = sext_ln78_fu_153_p1;

assign sext_ln78_fu_153_p1 = $signed(add_ln78_fu_148_p2);

assign state_matrix_V_d0 = s_box_V_q0;

assign tmp_4_fu_106_p3 = {{row_index_0_reg_60}, {2'd0}};

assign tmp_fu_82_p3 = {{s_box_V_offset}, {8'd0}};

assign trunc_ln78_fu_144_p1 = state_matrix_V_q0[10:0];

assign zext_ln46_fu_90_p1 = tmp_fu_82_p3;

assign zext_ln50_fu_114_p1 = tmp_4_fu_106_p3;

assign zext_ln52_1_fu_139_p1 = add_ln52_fu_134_p2;

assign zext_ln52_fu_130_p1 = column_index_0_reg_71;

always @ (posedge ap_clk) begin
    zext_ln46_reg_163[7:0] <= 8'b00000000;
    zext_ln46_reg_163[10] <= 1'b0;
    zext_ln50_reg_176[1:0] <= 2'b00;
    zext_ln50_reg_176[5] <= 1'b0;
end

endmodule //aes_substitute_bytes
