-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_substitute_bytes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_matrix_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_matrix_V_ce0 : OUT STD_LOGIC;
    state_matrix_V_we0 : OUT STD_LOGIC;
    state_matrix_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    state_matrix_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_s_box_V_AWVALID : OUT STD_LOGIC;
    m_axi_s_box_V_AWREADY : IN STD_LOGIC;
    m_axi_s_box_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_s_box_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_s_box_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_s_box_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_s_box_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_s_box_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_s_box_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_s_box_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_s_box_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_s_box_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_s_box_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_s_box_V_WVALID : OUT STD_LOGIC;
    m_axi_s_box_V_WREADY : IN STD_LOGIC;
    m_axi_s_box_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_s_box_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_s_box_V_WLAST : OUT STD_LOGIC;
    m_axi_s_box_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_s_box_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_s_box_V_ARVALID : OUT STD_LOGIC;
    m_axi_s_box_V_ARREADY : IN STD_LOGIC;
    m_axi_s_box_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_s_box_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_s_box_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_s_box_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_s_box_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_s_box_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_s_box_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_s_box_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_s_box_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_s_box_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_s_box_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_s_box_V_RVALID : IN STD_LOGIC;
    m_axi_s_box_V_RREADY : OUT STD_LOGIC;
    m_axi_s_box_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_s_box_V_RLAST : IN STD_LOGIC;
    m_axi_s_box_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_s_box_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_s_box_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_s_box_V_BVALID : IN STD_LOGIC;
    m_axi_s_box_V_BREADY : OUT STD_LOGIC;
    m_axi_s_box_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_s_box_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_s_box_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_box_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    s_box_V_offset_offset : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of aes_substitute_bytes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s_box_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal s_box_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sext_ln78_cast_fu_119_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln78_cast_reg_209 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln41_fu_123_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln41_reg_214 : STD_LOGIC_VECTOR (32 downto 0);
    signal row_index_fu_133_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_index_reg_222 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln43_fu_147_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln43_reg_227 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln41_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal column_index_fu_157_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal column_index_reg_235 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal state_matrix_V_addr_reg_240 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln43_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_box_V_addr_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal s_box_V_addr_read_reg_251 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_index_0_reg_89 : STD_LOGIC_VECTOR (2 downto 0);
    signal column_index_0_reg_100 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln45_1_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln78_2_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_111_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_139_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln45_fu_163_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln45_fu_167_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln78_fu_177_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln78_fu_177_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln78_fu_181_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln78_1_fu_186_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln78_1_fu_190_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    column_index_0_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_127_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                column_index_0_reg_100 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                column_index_0_reg_100 <= column_index_reg_235;
            end if; 
        end if;
    end process;

    row_index_0_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln43_fu_151_p2 = ap_const_lv1_1))) then 
                row_index_0_reg_89 <= row_index_reg_222;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_index_0_reg_89 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                column_index_reg_235 <= column_index_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_index_reg_222 <= row_index_fu_133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_s_box_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                s_box_V_addr_read_reg_251 <= m_axi_s_box_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                s_box_V_addr_reg_245 <= sext_ln78_2_fu_195_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sext_ln41_reg_214 <= sext_ln41_fu_123_p1;
                    sext_ln78_cast_reg_209(16 downto 8) <= sext_ln78_cast_fu_119_p1(16 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                state_matrix_V_addr_reg_240 <= zext_ln45_1_fu_172_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_127_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln43_reg_227(4 downto 2) <= zext_ln43_fu_147_p1(4 downto 2);
            end if;
        end if;
    end process;
    sext_ln78_cast_reg_209(7 downto 0) <= "00000000";
    zext_ln43_reg_227(1 downto 0) <= "00";
    zext_ln43_reg_227(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_s_box_V_ARREADY, m_axi_s_box_V_RVALID, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state2, icmp_ln41_fu_127_p2, ap_CS_fsm_state3, icmp_ln43_fu_151_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln41_fu_127_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln43_fu_151_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((m_axi_s_box_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((m_axi_s_box_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln45_fu_167_p2 <= std_logic_vector(unsigned(zext_ln43_reg_227) + unsigned(zext_ln45_fu_163_p1));
    add_ln78_1_fu_190_p2 <= std_logic_vector(signed(sext_ln41_reg_214) + signed(sext_ln78_1_fu_186_p1));
    add_ln78_fu_181_p2 <= std_logic_vector(signed(sext_ln78_cast_reg_209) + signed(sext_ln78_fu_177_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln41_fu_127_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln41_fu_127_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln41_fu_127_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln41_fu_127_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    column_index_fu_157_p2 <= std_logic_vector(unsigned(column_index_0_reg_100) + unsigned(ap_const_lv3_1));
    icmp_ln41_fu_127_p2 <= "1" when (row_index_0_reg_89 = ap_const_lv3_4) else "0";
    icmp_ln43_fu_151_p2 <= "1" when (column_index_0_reg_100 = ap_const_lv3_4) else "0";
    m_axi_s_box_V_ARADDR <= s_box_V_addr_reg_245;
    m_axi_s_box_V_ARBURST <= ap_const_lv2_0;
    m_axi_s_box_V_ARCACHE <= ap_const_lv4_0;
    m_axi_s_box_V_ARID <= ap_const_lv1_0;
    m_axi_s_box_V_ARLEN <= ap_const_lv32_1;
    m_axi_s_box_V_ARLOCK <= ap_const_lv2_0;
    m_axi_s_box_V_ARPROT <= ap_const_lv3_0;
    m_axi_s_box_V_ARQOS <= ap_const_lv4_0;
    m_axi_s_box_V_ARREGION <= ap_const_lv4_0;
    m_axi_s_box_V_ARSIZE <= ap_const_lv3_0;
    m_axi_s_box_V_ARUSER <= ap_const_lv1_0;

    m_axi_s_box_V_ARVALID_assign_proc : process(m_axi_s_box_V_ARREADY, ap_CS_fsm_state5)
    begin
        if (((m_axi_s_box_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_s_box_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_s_box_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_s_box_V_AWADDR <= ap_const_lv32_0;
    m_axi_s_box_V_AWBURST <= ap_const_lv2_0;
    m_axi_s_box_V_AWCACHE <= ap_const_lv4_0;
    m_axi_s_box_V_AWID <= ap_const_lv1_0;
    m_axi_s_box_V_AWLEN <= ap_const_lv32_0;
    m_axi_s_box_V_AWLOCK <= ap_const_lv2_0;
    m_axi_s_box_V_AWPROT <= ap_const_lv3_0;
    m_axi_s_box_V_AWQOS <= ap_const_lv4_0;
    m_axi_s_box_V_AWREGION <= ap_const_lv4_0;
    m_axi_s_box_V_AWSIZE <= ap_const_lv3_0;
    m_axi_s_box_V_AWUSER <= ap_const_lv1_0;
    m_axi_s_box_V_AWVALID <= ap_const_logic_0;
    m_axi_s_box_V_BREADY <= ap_const_logic_0;

    m_axi_s_box_V_RREADY_assign_proc : process(m_axi_s_box_V_RVALID, ap_CS_fsm_state12)
    begin
        if (((m_axi_s_box_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_s_box_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_s_box_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_s_box_V_WDATA <= ap_const_lv8_0;
    m_axi_s_box_V_WID <= ap_const_lv1_0;
    m_axi_s_box_V_WLAST <= ap_const_logic_0;
    m_axi_s_box_V_WSTRB <= ap_const_lv1_0;
    m_axi_s_box_V_WUSER <= ap_const_lv1_0;
    m_axi_s_box_V_WVALID <= ap_const_logic_0;
    row_index_fu_133_p2 <= std_logic_vector(unsigned(row_index_0_reg_89) + unsigned(ap_const_lv3_1));

    s_box_V_blk_n_AR_assign_proc : process(m_axi_s_box_V_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_box_V_blk_n_AR <= m_axi_s_box_V_ARREADY;
        else 
            s_box_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    s_box_V_blk_n_R_assign_proc : process(m_axi_s_box_V_RVALID, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_box_V_blk_n_R <= m_axi_s_box_V_RVALID;
        else 
            s_box_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

        sext_ln41_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_box_V_offset),33));

        sext_ln78_1_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln78_fu_181_p2),33));

        sext_ln78_2_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln78_1_fu_190_p2),64));

        sext_ln78_cast_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_111_p3),17));

    sext_ln78_fu_177_p0 <= state_matrix_V_q0;
        sext_ln78_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln78_fu_177_p0),17));


    state_matrix_V_address0_assign_proc : process(ap_CS_fsm_state3, state_matrix_V_addr_reg_240, ap_CS_fsm_state13, zext_ln45_1_fu_172_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_matrix_V_address0 <= state_matrix_V_addr_reg_240;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_matrix_V_address0 <= zext_ln45_1_fu_172_p1(4 - 1 downto 0);
        else 
            state_matrix_V_address0 <= "XXXX";
        end if; 
    end process;


    state_matrix_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_matrix_V_ce0 <= ap_const_logic_1;
        else 
            state_matrix_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    state_matrix_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_box_V_addr_read_reg_251),16));

    state_matrix_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_matrix_V_we0 <= ap_const_logic_1;
        else 
            state_matrix_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_fu_139_p3 <= (row_index_0_reg_89 & ap_const_lv2_0);
    tmp_fu_111_p3 <= (s_box_V_offset_offset & ap_const_lv8_0);
    zext_ln43_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_139_p3),6));
    zext_ln45_1_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_fu_167_p2),64));
    zext_ln45_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_index_0_reg_100),6));
end behav;
