-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xts_aes is
generic (
    C_M_AXI_DATA0_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_DATA2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA4_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA4_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA4_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA4_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA4_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA4_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA4_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA4_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA0_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA1_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA2_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA4_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA4_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA4_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA3_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA3_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_data0_AWVALID : OUT STD_LOGIC;
    m_axi_data0_AWREADY : IN STD_LOGIC;
    m_axi_data0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ADDR_WIDTH-1 downto 0);
    m_axi_data0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_AWUSER_WIDTH-1 downto 0);
    m_axi_data0_WVALID : OUT STD_LOGIC;
    m_axi_data0_WREADY : IN STD_LOGIC;
    m_axi_data0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_DATA_WIDTH-1 downto 0);
    m_axi_data0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_DATA_WIDTH/8-1 downto 0);
    m_axi_data0_WLAST : OUT STD_LOGIC;
    m_axi_data0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_WUSER_WIDTH-1 downto 0);
    m_axi_data0_ARVALID : OUT STD_LOGIC;
    m_axi_data0_ARREADY : IN STD_LOGIC;
    m_axi_data0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ADDR_WIDTH-1 downto 0);
    m_axi_data0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ARUSER_WIDTH-1 downto 0);
    m_axi_data0_RVALID : IN STD_LOGIC;
    m_axi_data0_RREADY : OUT STD_LOGIC;
    m_axi_data0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_DATA_WIDTH-1 downto 0);
    m_axi_data0_RLAST : IN STD_LOGIC;
    m_axi_data0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_RUSER_WIDTH-1 downto 0);
    m_axi_data0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_BVALID : IN STD_LOGIC;
    m_axi_data0_BREADY : OUT STD_LOGIC;
    m_axi_data0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_BUSER_WIDTH-1 downto 0);
    m_axi_data1_AWVALID : OUT STD_LOGIC;
    m_axi_data1_AWREADY : IN STD_LOGIC;
    m_axi_data1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ADDR_WIDTH-1 downto 0);
    m_axi_data1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_AWUSER_WIDTH-1 downto 0);
    m_axi_data1_WVALID : OUT STD_LOGIC;
    m_axi_data1_WREADY : IN STD_LOGIC;
    m_axi_data1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH-1 downto 0);
    m_axi_data1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH/8-1 downto 0);
    m_axi_data1_WLAST : OUT STD_LOGIC;
    m_axi_data1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_WUSER_WIDTH-1 downto 0);
    m_axi_data1_ARVALID : OUT STD_LOGIC;
    m_axi_data1_ARREADY : IN STD_LOGIC;
    m_axi_data1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ADDR_WIDTH-1 downto 0);
    m_axi_data1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ARUSER_WIDTH-1 downto 0);
    m_axi_data1_RVALID : IN STD_LOGIC;
    m_axi_data1_RREADY : OUT STD_LOGIC;
    m_axi_data1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH-1 downto 0);
    m_axi_data1_RLAST : IN STD_LOGIC;
    m_axi_data1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_RUSER_WIDTH-1 downto 0);
    m_axi_data1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_BVALID : IN STD_LOGIC;
    m_axi_data1_BREADY : OUT STD_LOGIC;
    m_axi_data1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_BUSER_WIDTH-1 downto 0);
    m_axi_data2_AWVALID : OUT STD_LOGIC;
    m_axi_data2_AWREADY : IN STD_LOGIC;
    m_axi_data2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ADDR_WIDTH-1 downto 0);
    m_axi_data2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_AWUSER_WIDTH-1 downto 0);
    m_axi_data2_WVALID : OUT STD_LOGIC;
    m_axi_data2_WREADY : IN STD_LOGIC;
    m_axi_data2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH-1 downto 0);
    m_axi_data2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH/8-1 downto 0);
    m_axi_data2_WLAST : OUT STD_LOGIC;
    m_axi_data2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_WUSER_WIDTH-1 downto 0);
    m_axi_data2_ARVALID : OUT STD_LOGIC;
    m_axi_data2_ARREADY : IN STD_LOGIC;
    m_axi_data2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ADDR_WIDTH-1 downto 0);
    m_axi_data2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ARUSER_WIDTH-1 downto 0);
    m_axi_data2_RVALID : IN STD_LOGIC;
    m_axi_data2_RREADY : OUT STD_LOGIC;
    m_axi_data2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH-1 downto 0);
    m_axi_data2_RLAST : IN STD_LOGIC;
    m_axi_data2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_RUSER_WIDTH-1 downto 0);
    m_axi_data2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_BVALID : IN STD_LOGIC;
    m_axi_data2_BREADY : OUT STD_LOGIC;
    m_axi_data2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_BUSER_WIDTH-1 downto 0);
    m_axi_data4_AWVALID : OUT STD_LOGIC;
    m_axi_data4_AWREADY : IN STD_LOGIC;
    m_axi_data4_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_ADDR_WIDTH-1 downto 0);
    m_axi_data4_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_ID_WIDTH-1 downto 0);
    m_axi_data4_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data4_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_AWUSER_WIDTH-1 downto 0);
    m_axi_data4_WVALID : OUT STD_LOGIC;
    m_axi_data4_WREADY : IN STD_LOGIC;
    m_axi_data4_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_DATA_WIDTH-1 downto 0);
    m_axi_data4_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_DATA_WIDTH/8-1 downto 0);
    m_axi_data4_WLAST : OUT STD_LOGIC;
    m_axi_data4_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_ID_WIDTH-1 downto 0);
    m_axi_data4_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_WUSER_WIDTH-1 downto 0);
    m_axi_data4_ARVALID : OUT STD_LOGIC;
    m_axi_data4_ARREADY : IN STD_LOGIC;
    m_axi_data4_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_ADDR_WIDTH-1 downto 0);
    m_axi_data4_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_ID_WIDTH-1 downto 0);
    m_axi_data4_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data4_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_ARUSER_WIDTH-1 downto 0);
    m_axi_data4_RVALID : IN STD_LOGIC;
    m_axi_data4_RREADY : OUT STD_LOGIC;
    m_axi_data4_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA4_DATA_WIDTH-1 downto 0);
    m_axi_data4_RLAST : IN STD_LOGIC;
    m_axi_data4_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA4_ID_WIDTH-1 downto 0);
    m_axi_data4_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA4_RUSER_WIDTH-1 downto 0);
    m_axi_data4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data4_BVALID : IN STD_LOGIC;
    m_axi_data4_BREADY : OUT STD_LOGIC;
    m_axi_data4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data4_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA4_ID_WIDTH-1 downto 0);
    m_axi_data4_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA4_BUSER_WIDTH-1 downto 0);
    m_axi_data3_AWVALID : OUT STD_LOGIC;
    m_axi_data3_AWREADY : IN STD_LOGIC;
    m_axi_data3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ADDR_WIDTH-1 downto 0);
    m_axi_data3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_AWUSER_WIDTH-1 downto 0);
    m_axi_data3_WVALID : OUT STD_LOGIC;
    m_axi_data3_WREADY : IN STD_LOGIC;
    m_axi_data3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_DATA_WIDTH-1 downto 0);
    m_axi_data3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_DATA_WIDTH/8-1 downto 0);
    m_axi_data3_WLAST : OUT STD_LOGIC;
    m_axi_data3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_WUSER_WIDTH-1 downto 0);
    m_axi_data3_ARVALID : OUT STD_LOGIC;
    m_axi_data3_ARREADY : IN STD_LOGIC;
    m_axi_data3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ADDR_WIDTH-1 downto 0);
    m_axi_data3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ARUSER_WIDTH-1 downto 0);
    m_axi_data3_RVALID : IN STD_LOGIC;
    m_axi_data3_RREADY : OUT STD_LOGIC;
    m_axi_data3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_DATA_WIDTH-1 downto 0);
    m_axi_data3_RLAST : IN STD_LOGIC;
    m_axi_data3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_RUSER_WIDTH-1 downto 0);
    m_axi_data3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_BVALID : IN STD_LOGIC;
    m_axi_data3_BREADY : OUT STD_LOGIC;
    m_axi_data3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_BUSER_WIDTH-1 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of xts_aes is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "xts_aes,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=15,HLS_SYN_DSP=0,HLS_SYN_FF=11467,HLS_SYN_LUT=22181,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal key_V : STD_LOGIC_VECTOR (31 downto 0);
    signal key_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal key_V_0_vld_reg : STD_LOGIC := '0';
    signal key_V_0_ack_out : STD_LOGIC;
    signal tweak_V : STD_LOGIC_VECTOR (31 downto 0);
    signal tweak_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal tweak_V_0_vld_reg : STD_LOGIC := '0';
    signal tweak_V_0_ack_out : STD_LOGIC;
    signal text_V : STD_LOGIC_VECTOR (31 downto 0);
    signal text_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal text_V_0_vld_reg : STD_LOGIC := '0';
    signal text_V_0_ack_out : STD_LOGIC;
    signal mode_V : STD_LOGIC_VECTOR (15 downto 0);
    signal mode_V_0_data_reg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal mode_V_0_vld_reg : STD_LOGIC := '0';
    signal mode_V_0_ack_out : STD_LOGIC;
    signal text_len_V : STD_LOGIC_VECTOR (15 downto 0);
    signal text_len_V_0_data_reg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal text_len_V_0_vld_reg : STD_LOGIC := '0';
    signal text_len_V_0_ack_out : STD_LOGIC;
    signal s_boxes_V : STD_LOGIC_VECTOR (31 downto 0);
    signal s_boxes_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_boxes_V_0_vld_reg : STD_LOGIC := '0';
    signal s_boxes_V_0_ack_out : STD_LOGIC;
    signal mix_column_constant_matrices_V : STD_LOGIC_VECTOR (31 downto 0);
    signal mix_column_constant_matrices_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal mix_column_constant_matrices_V_0_vld_reg : STD_LOGIC := '0';
    signal mix_column_constant_matrices_V_0_ack_out : STD_LOGIC;
    signal multiplication_V : STD_LOGIC_VECTOR (31 downto 0);
    signal multiplication_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal multiplication_V_0_vld_reg : STD_LOGIC := '0';
    signal multiplication_V_0_ack_out : STD_LOGIC;
    signal rcon_V : STD_LOGIC_VECTOR (31 downto 0);
    signal rcon_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rcon_V_0_vld_reg : STD_LOGIC := '0';
    signal rcon_V_0_ack_out : STD_LOGIC;
    signal data_ret_V : STD_LOGIC_VECTOR (31 downto 0);
    signal data_ret_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_ret_V_0_vld_reg : STD_LOGIC := '0';
    signal data_ret_V_0_ack_out : STD_LOGIC;
    signal data3_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal data3_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal data3_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal data0_AWREADY : STD_LOGIC;
    signal data0_WREADY : STD_LOGIC;
    signal data0_ARVALID : STD_LOGIC;
    signal data0_ARREADY : STD_LOGIC;
    signal data0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal data0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal data0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal data0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal data0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal data0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal data0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal data0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal data0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data0_RVALID : STD_LOGIC;
    signal data0_RREADY : STD_LOGIC;
    signal data0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data0_RLAST : STD_LOGIC;
    signal data0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data0_BVALID : STD_LOGIC;
    signal data0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_AWREADY : STD_LOGIC;
    signal data1_WREADY : STD_LOGIC;
    signal data1_ARVALID : STD_LOGIC;
    signal data1_ARREADY : STD_LOGIC;
    signal data1_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal data1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal data1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal data1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal data1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal data1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal data1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal data1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_RVALID : STD_LOGIC;
    signal data1_RREADY : STD_LOGIC;
    signal data1_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data1_RLAST : STD_LOGIC;
    signal data1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data1_BVALID : STD_LOGIC;
    signal data1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_AWREADY : STD_LOGIC;
    signal data2_WREADY : STD_LOGIC;
    signal data2_ARVALID : STD_LOGIC;
    signal data2_ARREADY : STD_LOGIC;
    signal data2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal data2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal data2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal data2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal data2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal data2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal data2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal data2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_RVALID : STD_LOGIC;
    signal data2_RREADY : STD_LOGIC;
    signal data2_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal data2_RLAST : STD_LOGIC;
    signal data2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data2_BVALID : STD_LOGIC;
    signal data2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data4_AWREADY : STD_LOGIC;
    signal data4_WREADY : STD_LOGIC;
    signal data4_ARVALID : STD_LOGIC;
    signal data4_ARREADY : STD_LOGIC;
    signal data4_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data4_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal data4_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data4_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal data4_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal data4_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal data4_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal data4_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal data4_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal data4_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal data4_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data4_RVALID : STD_LOGIC;
    signal data4_RREADY : STD_LOGIC;
    signal data4_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal data4_RLAST : STD_LOGIC;
    signal data4_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data4_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data4_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data4_BVALID : STD_LOGIC;
    signal data4_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data4_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data4_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_AWVALID : STD_LOGIC;
    signal data3_AWREADY : STD_LOGIC;
    signal data3_WVALID : STD_LOGIC;
    signal data3_WREADY : STD_LOGIC;
    signal data3_ARREADY : STD_LOGIC;
    signal data3_RVALID : STD_LOGIC;
    signal data3_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data3_RLAST : STD_LOGIC;
    signal data3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data3_BVALID : STD_LOGIC;
    signal data3_BREADY : STD_LOGIC;
    signal data3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal s_boxes_V_read_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal text_len_V_read_reg_449 : STD_LOGIC_VECTOR (15 downto 0);
    signal mode_V_read_reg_454 : STD_LOGIC_VECTOR (15 downto 0);
    signal data3_addr_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal rcon_V1_reg_465 : STD_LOGIC_VECTOR (28 downto 0);
    signal multiplication_V1_reg_471 : STD_LOGIC_VECTOR (30 downto 0);
    signal mix_column_constant_s_reg_477 : STD_LOGIC_VECTOR (30 downto 0);
    signal text_V5_reg_483 : STD_LOGIC_VECTOR (28 downto 0);
    signal tweak_V3_reg_488 : STD_LOGIC_VECTOR (30 downto 0);
    signal key_V1_reg_493 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_fu_397_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_502 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln343_fu_411_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln343_reg_507 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln341_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_515 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln343_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal processed_data_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal processed_data_load_reg_525 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal aes_expanded_key_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal aes_expanded_key_V_ce0 : STD_LOGIC;
    signal aes_expanded_key_V_we0 : STD_LOGIC;
    signal aes_expanded_key_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal aes_expanded_key2_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal aes_expanded_key2_V_ce0 : STD_LOGIC;
    signal aes_expanded_key2_V_we0 : STD_LOGIC;
    signal aes_expanded_key2_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal aes_tweak_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal aes_tweak_V_ce0 : STD_LOGIC;
    signal aes_tweak_V_we0 : STD_LOGIC;
    signal aes_tweak_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal aes_tweak_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal processed_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal processed_data_ce0 : STD_LOGIC;
    signal processed_data_we0 : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_ap_start : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_ap_done : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_ap_idle : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_ap_ready : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_AWVALID : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_WVALID : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_WLAST : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_ARVALID : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_RREADY : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_data_V_BREADY : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_tweak_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_tweak_V_ce0 : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_tweak_V_we0 : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_tweak_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xts_aes_process_data_fu_246_expanded_key_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xts_aes_process_data_fu_246_expanded_key_V_ce0 : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWVALID : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_WVALID : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_WLAST : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARVALID : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_RREADY : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_BREADY : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWVALID : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_WVALID : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_WLAST : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARVALID : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_RREADY : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_BREADY : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWVALID : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_WVALID : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_WLAST : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARVALID : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_RREADY : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_BREADY : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_blocks_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_xts_aes_process_data_fu_246_blocks_V_ce0 : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_blocks_V_we0 : STD_LOGIC;
    signal grp_xts_aes_process_data_fu_246_blocks_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_process_1_fu_267_ap_start : STD_LOGIC;
    signal grp_aes_process_1_fu_267_ap_done : STD_LOGIC;
    signal grp_aes_process_1_fu_267_ap_idle : STD_LOGIC;
    signal grp_aes_process_1_fu_267_ap_ready : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_text_V_AWVALID : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_text_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_WVALID : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_text_V_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_WLAST : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_text_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_ARVALID : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_text_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_text_V_RREADY : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_text_V_BREADY : STD_LOGIC;
    signal grp_aes_process_1_fu_267_expanded_key_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_process_1_fu_267_expanded_key_V_ce0 : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWVALID : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_WVALID : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_WLAST : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARVALID : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_RREADY : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_s_boxes_V_BREADY : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWVALID : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_WVALID : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_WLAST : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARVALID : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_RREADY : STD_LOGIC;
    signal grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_BREADY : STD_LOGIC;
    signal grp_aes_process_1_fu_267_sequence_out_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_1_fu_267_sequence_out_V_ce0 : STD_LOGIC;
    signal grp_aes_process_1_fu_267_sequence_out_V_we0 : STD_LOGIC;
    signal grp_aes_process_1_fu_267_sequence_out_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_expand_key_fu_283_ap_start : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_ap_done : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_ap_idle : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_ap_ready : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_key_V_AWVALID : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_key_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_WVALID : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_key_V_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_WLAST : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_key_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_ARVALID : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_key_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_key_V_RREADY : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_key_V_BREADY : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_AWVALID : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_WVALID : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_WLAST : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_ARVALID : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_RREADY : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_s_box_V_BREADY : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_AWVALID : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_WVALID : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_WLAST : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_ARVALID : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_RREADY : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_m_axi_rcon_V_BREADY : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_expanded_key_matrix_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expand_key_fu_283_expanded_key_matrix_V_ce0 : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_expanded_key_matrix_V_we0 : STD_LOGIC;
    signal grp_aes_expand_key_fu_283_expanded_key_matrix_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_expand_key58_fu_297_ap_start : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_ap_done : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_ap_idle : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_ap_ready : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_AWVALID : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_WVALID : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_WLAST : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_ARVALID : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_RREADY : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_key_V_BREADY : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWVALID : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_WVALID : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_WLAST : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARVALID : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_RREADY : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_s_box_V_BREADY : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWVALID : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_WVALID : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_WLAST : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARVALID : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_RREADY : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_m_axi_rcon_V_BREADY : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_expanded_key_matrix_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expand_key58_fu_297_expanded_key_matrix_V_ce0 : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_expanded_key_matrix_V_we0 : STD_LOGIC;
    signal grp_aes_expand_key58_fu_297_expanded_key_matrix_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_reg_224 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_reg_235 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_xts_aes_process_data_fu_246_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_aes_process_1_fu_267_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_aes_expand_key_fu_283_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_aes_expand_key58_fu_297_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln180_2_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_ret_V1_fu_311_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_403_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln180_fu_427_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln180_fu_431_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component xts_aes_process_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_data_V_AWVALID : OUT STD_LOGIC;
        m_axi_data_V_AWREADY : IN STD_LOGIC;
        m_axi_data_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_V_WVALID : OUT STD_LOGIC;
        m_axi_data_V_WREADY : IN STD_LOGIC;
        m_axi_data_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_data_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_data_V_WLAST : OUT STD_LOGIC;
        m_axi_data_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_V_ARVALID : OUT STD_LOGIC;
        m_axi_data_V_ARREADY : IN STD_LOGIC;
        m_axi_data_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_V_RVALID : IN STD_LOGIC;
        m_axi_data_V_RREADY : OUT STD_LOGIC;
        m_axi_data_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_data_V_RLAST : IN STD_LOGIC;
        m_axi_data_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_V_BVALID : IN STD_LOGIC;
        m_axi_data_V_BREADY : OUT STD_LOGIC;
        m_axi_data_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        data_V_offset : IN STD_LOGIC_VECTOR (28 downto 0);
        num_blocks_orig_V : IN STD_LOGIC_VECTOR (15 downto 0);
        mode_V : IN STD_LOGIC_VECTOR (15 downto 0);
        tweak_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        tweak_V_ce0 : OUT STD_LOGIC;
        tweak_V_we0 : OUT STD_LOGIC;
        tweak_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        tweak_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        expanded_key_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_V_ce0 : OUT STD_LOGIC;
        expanded_key_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_s_boxes_V_AWVALID : OUT STD_LOGIC;
        m_axi_s_boxes_V_AWREADY : IN STD_LOGIC;
        m_axi_s_boxes_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_boxes_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_boxes_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_boxes_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_boxes_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_boxes_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_boxes_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_boxes_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_boxes_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_boxes_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_WVALID : OUT STD_LOGIC;
        m_axi_s_boxes_V_WREADY : IN STD_LOGIC;
        m_axi_s_boxes_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_s_boxes_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_WLAST : OUT STD_LOGIC;
        m_axi_s_boxes_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_ARVALID : OUT STD_LOGIC;
        m_axi_s_boxes_V_ARREADY : IN STD_LOGIC;
        m_axi_s_boxes_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_boxes_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_boxes_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_boxes_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_boxes_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_boxes_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_boxes_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_boxes_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_boxes_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_boxes_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_RVALID : IN STD_LOGIC;
        m_axi_s_boxes_V_RREADY : OUT STD_LOGIC;
        m_axi_s_boxes_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_s_boxes_V_RLAST : IN STD_LOGIC;
        m_axi_s_boxes_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_boxes_V_BVALID : IN STD_LOGIC;
        m_axi_s_boxes_V_BREADY : OUT STD_LOGIC;
        m_axi_s_boxes_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_boxes_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_boxes_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mix_column_constant_matrices_V_AWVALID : OUT STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_AWREADY : IN STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mix_column_constant_matrices_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mix_column_constant_matrices_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mix_column_constant_matrices_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mix_column_constant_matrices_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mix_column_constant_matrices_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mix_column_constant_matrices_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mix_column_constant_matrices_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_WVALID : OUT STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_WREADY : IN STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_mix_column_constant_matrices_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_WLAST : OUT STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_ARVALID : OUT STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_ARREADY : IN STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mix_column_constant_matrices_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mix_column_constant_matrices_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mix_column_constant_matrices_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mix_column_constant_matrices_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mix_column_constant_matrices_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mix_column_constant_matrices_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mix_column_constant_matrices_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_RVALID : IN STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_RREADY : OUT STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_mix_column_constant_matrices_V_RLAST : IN STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_BVALID : IN STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_BREADY : OUT STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        mix_column_constant_matrices_V_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        m_axi_multiplication_V_AWVALID : OUT STD_LOGIC;
        m_axi_multiplication_V_AWREADY : IN STD_LOGIC;
        m_axi_multiplication_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_multiplication_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_multiplication_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_multiplication_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_multiplication_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_multiplication_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_multiplication_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_multiplication_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_multiplication_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_multiplication_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_multiplication_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_multiplication_V_WVALID : OUT STD_LOGIC;
        m_axi_multiplication_V_WREADY : IN STD_LOGIC;
        m_axi_multiplication_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_multiplication_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_multiplication_V_WLAST : OUT STD_LOGIC;
        m_axi_multiplication_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_multiplication_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_multiplication_V_ARVALID : OUT STD_LOGIC;
        m_axi_multiplication_V_ARREADY : IN STD_LOGIC;
        m_axi_multiplication_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_multiplication_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_multiplication_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_multiplication_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_multiplication_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_multiplication_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_multiplication_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_multiplication_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_multiplication_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_multiplication_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_multiplication_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_multiplication_V_RVALID : IN STD_LOGIC;
        m_axi_multiplication_V_RREADY : OUT STD_LOGIC;
        m_axi_multiplication_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_multiplication_V_RLAST : IN STD_LOGIC;
        m_axi_multiplication_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_multiplication_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_multiplication_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_multiplication_V_BVALID : IN STD_LOGIC;
        m_axi_multiplication_V_BREADY : OUT STD_LOGIC;
        m_axi_multiplication_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_multiplication_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_multiplication_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        multiplication_V_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        blocks_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        blocks_V_ce0 : OUT STD_LOGIC;
        blocks_V_we0 : OUT STD_LOGIC;
        blocks_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        blocks_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component aes_process_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_text_V_AWVALID : OUT STD_LOGIC;
        m_axi_text_V_AWREADY : IN STD_LOGIC;
        m_axi_text_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_text_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_text_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_text_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_text_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_text_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_text_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_text_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_text_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_text_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_text_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_text_V_WVALID : OUT STD_LOGIC;
        m_axi_text_V_WREADY : IN STD_LOGIC;
        m_axi_text_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_text_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_text_V_WLAST : OUT STD_LOGIC;
        m_axi_text_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_text_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_text_V_ARVALID : OUT STD_LOGIC;
        m_axi_text_V_ARREADY : IN STD_LOGIC;
        m_axi_text_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_text_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_text_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_text_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_text_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_text_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_text_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_text_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_text_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_text_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_text_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_text_V_RVALID : IN STD_LOGIC;
        m_axi_text_V_RREADY : OUT STD_LOGIC;
        m_axi_text_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_text_V_RLAST : IN STD_LOGIC;
        m_axi_text_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_text_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_text_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_text_V_BVALID : IN STD_LOGIC;
        m_axi_text_V_BREADY : OUT STD_LOGIC;
        m_axi_text_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_text_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_text_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        text_V_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        expanded_key_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_V_ce0 : OUT STD_LOGIC;
        expanded_key_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_s_boxes_V_AWVALID : OUT STD_LOGIC;
        m_axi_s_boxes_V_AWREADY : IN STD_LOGIC;
        m_axi_s_boxes_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_boxes_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_boxes_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_boxes_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_boxes_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_boxes_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_boxes_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_boxes_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_boxes_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_boxes_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_WVALID : OUT STD_LOGIC;
        m_axi_s_boxes_V_WREADY : IN STD_LOGIC;
        m_axi_s_boxes_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_s_boxes_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_WLAST : OUT STD_LOGIC;
        m_axi_s_boxes_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_ARVALID : OUT STD_LOGIC;
        m_axi_s_boxes_V_ARREADY : IN STD_LOGIC;
        m_axi_s_boxes_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_boxes_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_boxes_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_boxes_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_boxes_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_boxes_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_boxes_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_boxes_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_boxes_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_boxes_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_RVALID : IN STD_LOGIC;
        m_axi_s_boxes_V_RREADY : OUT STD_LOGIC;
        m_axi_s_boxes_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_s_boxes_V_RLAST : IN STD_LOGIC;
        m_axi_s_boxes_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_boxes_V_BVALID : IN STD_LOGIC;
        m_axi_s_boxes_V_BREADY : OUT STD_LOGIC;
        m_axi_s_boxes_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_boxes_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_boxes_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_boxes_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mix_column_constant_matrices_V_AWVALID : OUT STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_AWREADY : IN STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mix_column_constant_matrices_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mix_column_constant_matrices_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mix_column_constant_matrices_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mix_column_constant_matrices_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mix_column_constant_matrices_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mix_column_constant_matrices_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mix_column_constant_matrices_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_WVALID : OUT STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_WREADY : IN STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_mix_column_constant_matrices_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_WLAST : OUT STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_ARVALID : OUT STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_ARREADY : IN STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mix_column_constant_matrices_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mix_column_constant_matrices_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mix_column_constant_matrices_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mix_column_constant_matrices_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mix_column_constant_matrices_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mix_column_constant_matrices_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mix_column_constant_matrices_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_RVALID : IN STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_RREADY : OUT STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_mix_column_constant_matrices_V_RLAST : IN STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_BVALID : IN STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_BREADY : OUT STD_LOGIC;
        m_axi_mix_column_constant_matrices_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mix_column_constant_matrices_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mix_column_constant_matrices_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        mix_column_constant_matrices_V_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        multiplication_V_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        sequence_out_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sequence_out_V_ce0 : OUT STD_LOGIC;
        sequence_out_V_we0 : OUT STD_LOGIC;
        sequence_out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component aes_expand_key IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_key_V_AWVALID : OUT STD_LOGIC;
        m_axi_key_V_AWREADY : IN STD_LOGIC;
        m_axi_key_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_WVALID : OUT STD_LOGIC;
        m_axi_key_V_WREADY : IN STD_LOGIC;
        m_axi_key_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_key_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_WLAST : OUT STD_LOGIC;
        m_axi_key_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_ARVALID : OUT STD_LOGIC;
        m_axi_key_V_ARREADY : IN STD_LOGIC;
        m_axi_key_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_RVALID : IN STD_LOGIC;
        m_axi_key_V_RREADY : OUT STD_LOGIC;
        m_axi_key_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_key_V_RLAST : IN STD_LOGIC;
        m_axi_key_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_BVALID : IN STD_LOGIC;
        m_axi_key_V_BREADY : OUT STD_LOGIC;
        m_axi_key_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        key_V_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        m_axi_s_box_V_AWVALID : OUT STD_LOGIC;
        m_axi_s_box_V_AWREADY : IN STD_LOGIC;
        m_axi_s_box_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_box_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_box_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_box_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_box_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_box_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_box_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_box_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_box_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_box_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_WVALID : OUT STD_LOGIC;
        m_axi_s_box_V_WREADY : IN STD_LOGIC;
        m_axi_s_box_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_s_box_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_WLAST : OUT STD_LOGIC;
        m_axi_s_box_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_ARVALID : OUT STD_LOGIC;
        m_axi_s_box_V_ARREADY : IN STD_LOGIC;
        m_axi_s_box_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_box_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_box_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_box_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_box_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_box_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_box_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_box_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_box_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_box_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_RVALID : IN STD_LOGIC;
        m_axi_s_box_V_RREADY : OUT STD_LOGIC;
        m_axi_s_box_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_s_box_V_RLAST : IN STD_LOGIC;
        m_axi_s_box_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_box_V_BVALID : IN STD_LOGIC;
        m_axi_s_box_V_BREADY : OUT STD_LOGIC;
        m_axi_s_box_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_box_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_box_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rcon_V_AWVALID : OUT STD_LOGIC;
        m_axi_rcon_V_AWREADY : IN STD_LOGIC;
        m_axi_rcon_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rcon_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rcon_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rcon_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rcon_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rcon_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rcon_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rcon_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rcon_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rcon_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_WVALID : OUT STD_LOGIC;
        m_axi_rcon_V_WREADY : IN STD_LOGIC;
        m_axi_rcon_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rcon_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_rcon_V_WLAST : OUT STD_LOGIC;
        m_axi_rcon_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_ARVALID : OUT STD_LOGIC;
        m_axi_rcon_V_ARREADY : IN STD_LOGIC;
        m_axi_rcon_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rcon_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rcon_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rcon_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rcon_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rcon_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rcon_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rcon_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rcon_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rcon_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_RVALID : IN STD_LOGIC;
        m_axi_rcon_V_RREADY : OUT STD_LOGIC;
        m_axi_rcon_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rcon_V_RLAST : IN STD_LOGIC;
        m_axi_rcon_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rcon_V_BVALID : IN STD_LOGIC;
        m_axi_rcon_V_BREADY : OUT STD_LOGIC;
        m_axi_rcon_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rcon_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rcon_V_offset : IN STD_LOGIC_VECTOR (28 downto 0);
        expanded_key_matrix_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_matrix_V_ce0 : OUT STD_LOGIC;
        expanded_key_matrix_V_we0 : OUT STD_LOGIC;
        expanded_key_matrix_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component aes_expand_key58 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_key_V_AWVALID : OUT STD_LOGIC;
        m_axi_key_V_AWREADY : IN STD_LOGIC;
        m_axi_key_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_WVALID : OUT STD_LOGIC;
        m_axi_key_V_WREADY : IN STD_LOGIC;
        m_axi_key_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_key_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_WLAST : OUT STD_LOGIC;
        m_axi_key_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_ARVALID : OUT STD_LOGIC;
        m_axi_key_V_ARREADY : IN STD_LOGIC;
        m_axi_key_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_RVALID : IN STD_LOGIC;
        m_axi_key_V_RREADY : OUT STD_LOGIC;
        m_axi_key_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_key_V_RLAST : IN STD_LOGIC;
        m_axi_key_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_BVALID : IN STD_LOGIC;
        m_axi_key_V_BREADY : OUT STD_LOGIC;
        m_axi_key_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        key_V_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        m_axi_s_box_V_AWVALID : OUT STD_LOGIC;
        m_axi_s_box_V_AWREADY : IN STD_LOGIC;
        m_axi_s_box_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_box_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_box_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_box_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_box_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_box_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_box_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_box_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_box_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_box_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_WVALID : OUT STD_LOGIC;
        m_axi_s_box_V_WREADY : IN STD_LOGIC;
        m_axi_s_box_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_s_box_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_WLAST : OUT STD_LOGIC;
        m_axi_s_box_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_ARVALID : OUT STD_LOGIC;
        m_axi_s_box_V_ARREADY : IN STD_LOGIC;
        m_axi_s_box_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_box_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_s_box_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_box_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_box_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_box_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_box_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_s_box_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_box_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_s_box_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_RVALID : IN STD_LOGIC;
        m_axi_s_box_V_RREADY : OUT STD_LOGIC;
        m_axi_s_box_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_s_box_V_RLAST : IN STD_LOGIC;
        m_axi_s_box_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_box_V_BVALID : IN STD_LOGIC;
        m_axi_s_box_V_BREADY : OUT STD_LOGIC;
        m_axi_s_box_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_s_box_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_s_box_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_box_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rcon_V_AWVALID : OUT STD_LOGIC;
        m_axi_rcon_V_AWREADY : IN STD_LOGIC;
        m_axi_rcon_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rcon_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rcon_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rcon_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rcon_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rcon_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rcon_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rcon_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rcon_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rcon_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_WVALID : OUT STD_LOGIC;
        m_axi_rcon_V_WREADY : IN STD_LOGIC;
        m_axi_rcon_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rcon_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_rcon_V_WLAST : OUT STD_LOGIC;
        m_axi_rcon_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_ARVALID : OUT STD_LOGIC;
        m_axi_rcon_V_ARREADY : IN STD_LOGIC;
        m_axi_rcon_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rcon_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rcon_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rcon_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rcon_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rcon_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rcon_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rcon_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rcon_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rcon_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_RVALID : IN STD_LOGIC;
        m_axi_rcon_V_RREADY : OUT STD_LOGIC;
        m_axi_rcon_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rcon_V_RLAST : IN STD_LOGIC;
        m_axi_rcon_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rcon_V_BVALID : IN STD_LOGIC;
        m_axi_rcon_V_BREADY : OUT STD_LOGIC;
        m_axi_rcon_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rcon_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rcon_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rcon_V_offset : IN STD_LOGIC_VECTOR (28 downto 0);
        expanded_key_matrix_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_matrix_V_ce0 : OUT STD_LOGIC;
        expanded_key_matrix_V_we0 : OUT STD_LOGIC;
        expanded_key_matrix_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component aes_expand_key58_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component xts_aes_aes_tweak_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component xts_aes_processedmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component xts_aes_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        key_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        tweak_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        text_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        text_len_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        s_boxes_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        mix_column_constant_matrices_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        multiplication_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rcon_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_ret_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component xts_aes_data0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component xts_aes_data1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component xts_aes_data2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component xts_aes_data4_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component xts_aes_data3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    xts_aes_ctrl_s_axi_U : component xts_aes_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        key_V => key_V,
        tweak_V => tweak_V,
        text_V => text_V,
        mode_V => mode_V,
        text_len_V => text_len_V,
        s_boxes_V => s_boxes_V,
        mix_column_constant_matrices_V => mix_column_constant_matrices_V,
        multiplication_V => multiplication_V,
        rcon_V => rcon_V,
        data_ret_V => data_ret_V);

    xts_aes_data0_m_axi_U : component xts_aes_data0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data0_AWVALID,
        AWREADY => m_axi_data0_AWREADY,
        AWADDR => m_axi_data0_AWADDR,
        AWID => m_axi_data0_AWID,
        AWLEN => m_axi_data0_AWLEN,
        AWSIZE => m_axi_data0_AWSIZE,
        AWBURST => m_axi_data0_AWBURST,
        AWLOCK => m_axi_data0_AWLOCK,
        AWCACHE => m_axi_data0_AWCACHE,
        AWPROT => m_axi_data0_AWPROT,
        AWQOS => m_axi_data0_AWQOS,
        AWREGION => m_axi_data0_AWREGION,
        AWUSER => m_axi_data0_AWUSER,
        WVALID => m_axi_data0_WVALID,
        WREADY => m_axi_data0_WREADY,
        WDATA => m_axi_data0_WDATA,
        WSTRB => m_axi_data0_WSTRB,
        WLAST => m_axi_data0_WLAST,
        WID => m_axi_data0_WID,
        WUSER => m_axi_data0_WUSER,
        ARVALID => m_axi_data0_ARVALID,
        ARREADY => m_axi_data0_ARREADY,
        ARADDR => m_axi_data0_ARADDR,
        ARID => m_axi_data0_ARID,
        ARLEN => m_axi_data0_ARLEN,
        ARSIZE => m_axi_data0_ARSIZE,
        ARBURST => m_axi_data0_ARBURST,
        ARLOCK => m_axi_data0_ARLOCK,
        ARCACHE => m_axi_data0_ARCACHE,
        ARPROT => m_axi_data0_ARPROT,
        ARQOS => m_axi_data0_ARQOS,
        ARREGION => m_axi_data0_ARREGION,
        ARUSER => m_axi_data0_ARUSER,
        RVALID => m_axi_data0_RVALID,
        RREADY => m_axi_data0_RREADY,
        RDATA => m_axi_data0_RDATA,
        RLAST => m_axi_data0_RLAST,
        RID => m_axi_data0_RID,
        RUSER => m_axi_data0_RUSER,
        RRESP => m_axi_data0_RRESP,
        BVALID => m_axi_data0_BVALID,
        BREADY => m_axi_data0_BREADY,
        BRESP => m_axi_data0_BRESP,
        BID => m_axi_data0_BID,
        BUSER => m_axi_data0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data0_ARVALID,
        I_ARREADY => data0_ARREADY,
        I_ARADDR => data0_ARADDR,
        I_ARID => data0_ARID,
        I_ARLEN => data0_ARLEN,
        I_ARSIZE => data0_ARSIZE,
        I_ARLOCK => data0_ARLOCK,
        I_ARCACHE => data0_ARCACHE,
        I_ARQOS => data0_ARQOS,
        I_ARPROT => data0_ARPROT,
        I_ARUSER => data0_ARUSER,
        I_ARBURST => data0_ARBURST,
        I_ARREGION => data0_ARREGION,
        I_RVALID => data0_RVALID,
        I_RREADY => data0_RREADY,
        I_RDATA => data0_RDATA,
        I_RID => data0_RID,
        I_RUSER => data0_RUSER,
        I_RRESP => data0_RRESP,
        I_RLAST => data0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data0_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data0_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data0_BRESP,
        I_BID => data0_BID,
        I_BUSER => data0_BUSER);

    xts_aes_data1_m_axi_U : component xts_aes_data1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data1_AWVALID,
        AWREADY => m_axi_data1_AWREADY,
        AWADDR => m_axi_data1_AWADDR,
        AWID => m_axi_data1_AWID,
        AWLEN => m_axi_data1_AWLEN,
        AWSIZE => m_axi_data1_AWSIZE,
        AWBURST => m_axi_data1_AWBURST,
        AWLOCK => m_axi_data1_AWLOCK,
        AWCACHE => m_axi_data1_AWCACHE,
        AWPROT => m_axi_data1_AWPROT,
        AWQOS => m_axi_data1_AWQOS,
        AWREGION => m_axi_data1_AWREGION,
        AWUSER => m_axi_data1_AWUSER,
        WVALID => m_axi_data1_WVALID,
        WREADY => m_axi_data1_WREADY,
        WDATA => m_axi_data1_WDATA,
        WSTRB => m_axi_data1_WSTRB,
        WLAST => m_axi_data1_WLAST,
        WID => m_axi_data1_WID,
        WUSER => m_axi_data1_WUSER,
        ARVALID => m_axi_data1_ARVALID,
        ARREADY => m_axi_data1_ARREADY,
        ARADDR => m_axi_data1_ARADDR,
        ARID => m_axi_data1_ARID,
        ARLEN => m_axi_data1_ARLEN,
        ARSIZE => m_axi_data1_ARSIZE,
        ARBURST => m_axi_data1_ARBURST,
        ARLOCK => m_axi_data1_ARLOCK,
        ARCACHE => m_axi_data1_ARCACHE,
        ARPROT => m_axi_data1_ARPROT,
        ARQOS => m_axi_data1_ARQOS,
        ARREGION => m_axi_data1_ARREGION,
        ARUSER => m_axi_data1_ARUSER,
        RVALID => m_axi_data1_RVALID,
        RREADY => m_axi_data1_RREADY,
        RDATA => m_axi_data1_RDATA,
        RLAST => m_axi_data1_RLAST,
        RID => m_axi_data1_RID,
        RUSER => m_axi_data1_RUSER,
        RRESP => m_axi_data1_RRESP,
        BVALID => m_axi_data1_BVALID,
        BREADY => m_axi_data1_BREADY,
        BRESP => m_axi_data1_BRESP,
        BID => m_axi_data1_BID,
        BUSER => m_axi_data1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data1_ARVALID,
        I_ARREADY => data1_ARREADY,
        I_ARADDR => data1_ARADDR,
        I_ARID => data1_ARID,
        I_ARLEN => data1_ARLEN,
        I_ARSIZE => data1_ARSIZE,
        I_ARLOCK => data1_ARLOCK,
        I_ARCACHE => data1_ARCACHE,
        I_ARQOS => data1_ARQOS,
        I_ARPROT => data1_ARPROT,
        I_ARUSER => data1_ARUSER,
        I_ARBURST => data1_ARBURST,
        I_ARREGION => data1_ARREGION,
        I_RVALID => data1_RVALID,
        I_RREADY => data1_RREADY,
        I_RDATA => data1_RDATA,
        I_RID => data1_RID,
        I_RUSER => data1_RUSER,
        I_RRESP => data1_RRESP,
        I_RLAST => data1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data1_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data1_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data1_BRESP,
        I_BID => data1_BID,
        I_BUSER => data1_BUSER);

    xts_aes_data2_m_axi_U : component xts_aes_data2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data2_AWVALID,
        AWREADY => m_axi_data2_AWREADY,
        AWADDR => m_axi_data2_AWADDR,
        AWID => m_axi_data2_AWID,
        AWLEN => m_axi_data2_AWLEN,
        AWSIZE => m_axi_data2_AWSIZE,
        AWBURST => m_axi_data2_AWBURST,
        AWLOCK => m_axi_data2_AWLOCK,
        AWCACHE => m_axi_data2_AWCACHE,
        AWPROT => m_axi_data2_AWPROT,
        AWQOS => m_axi_data2_AWQOS,
        AWREGION => m_axi_data2_AWREGION,
        AWUSER => m_axi_data2_AWUSER,
        WVALID => m_axi_data2_WVALID,
        WREADY => m_axi_data2_WREADY,
        WDATA => m_axi_data2_WDATA,
        WSTRB => m_axi_data2_WSTRB,
        WLAST => m_axi_data2_WLAST,
        WID => m_axi_data2_WID,
        WUSER => m_axi_data2_WUSER,
        ARVALID => m_axi_data2_ARVALID,
        ARREADY => m_axi_data2_ARREADY,
        ARADDR => m_axi_data2_ARADDR,
        ARID => m_axi_data2_ARID,
        ARLEN => m_axi_data2_ARLEN,
        ARSIZE => m_axi_data2_ARSIZE,
        ARBURST => m_axi_data2_ARBURST,
        ARLOCK => m_axi_data2_ARLOCK,
        ARCACHE => m_axi_data2_ARCACHE,
        ARPROT => m_axi_data2_ARPROT,
        ARQOS => m_axi_data2_ARQOS,
        ARREGION => m_axi_data2_ARREGION,
        ARUSER => m_axi_data2_ARUSER,
        RVALID => m_axi_data2_RVALID,
        RREADY => m_axi_data2_RREADY,
        RDATA => m_axi_data2_RDATA,
        RLAST => m_axi_data2_RLAST,
        RID => m_axi_data2_RID,
        RUSER => m_axi_data2_RUSER,
        RRESP => m_axi_data2_RRESP,
        BVALID => m_axi_data2_BVALID,
        BREADY => m_axi_data2_BREADY,
        BRESP => m_axi_data2_BRESP,
        BID => m_axi_data2_BID,
        BUSER => m_axi_data2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data2_ARVALID,
        I_ARREADY => data2_ARREADY,
        I_ARADDR => data2_ARADDR,
        I_ARID => data2_ARID,
        I_ARLEN => data2_ARLEN,
        I_ARSIZE => data2_ARSIZE,
        I_ARLOCK => data2_ARLOCK,
        I_ARCACHE => data2_ARCACHE,
        I_ARQOS => data2_ARQOS,
        I_ARPROT => data2_ARPROT,
        I_ARUSER => data2_ARUSER,
        I_ARBURST => data2_ARBURST,
        I_ARREGION => data2_ARREGION,
        I_RVALID => data2_RVALID,
        I_RREADY => data2_RREADY,
        I_RDATA => data2_RDATA,
        I_RID => data2_RID,
        I_RUSER => data2_RUSER,
        I_RRESP => data2_RRESP,
        I_RLAST => data2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data2_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data2_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => data2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data2_BRESP,
        I_BID => data2_BID,
        I_BUSER => data2_BUSER);

    xts_aes_data4_m_axi_U : component xts_aes_data4_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA4_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA4_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA4_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA4_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA4_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA4_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA4_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA4_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA4_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA4_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA4_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data4_AWVALID,
        AWREADY => m_axi_data4_AWREADY,
        AWADDR => m_axi_data4_AWADDR,
        AWID => m_axi_data4_AWID,
        AWLEN => m_axi_data4_AWLEN,
        AWSIZE => m_axi_data4_AWSIZE,
        AWBURST => m_axi_data4_AWBURST,
        AWLOCK => m_axi_data4_AWLOCK,
        AWCACHE => m_axi_data4_AWCACHE,
        AWPROT => m_axi_data4_AWPROT,
        AWQOS => m_axi_data4_AWQOS,
        AWREGION => m_axi_data4_AWREGION,
        AWUSER => m_axi_data4_AWUSER,
        WVALID => m_axi_data4_WVALID,
        WREADY => m_axi_data4_WREADY,
        WDATA => m_axi_data4_WDATA,
        WSTRB => m_axi_data4_WSTRB,
        WLAST => m_axi_data4_WLAST,
        WID => m_axi_data4_WID,
        WUSER => m_axi_data4_WUSER,
        ARVALID => m_axi_data4_ARVALID,
        ARREADY => m_axi_data4_ARREADY,
        ARADDR => m_axi_data4_ARADDR,
        ARID => m_axi_data4_ARID,
        ARLEN => m_axi_data4_ARLEN,
        ARSIZE => m_axi_data4_ARSIZE,
        ARBURST => m_axi_data4_ARBURST,
        ARLOCK => m_axi_data4_ARLOCK,
        ARCACHE => m_axi_data4_ARCACHE,
        ARPROT => m_axi_data4_ARPROT,
        ARQOS => m_axi_data4_ARQOS,
        ARREGION => m_axi_data4_ARREGION,
        ARUSER => m_axi_data4_ARUSER,
        RVALID => m_axi_data4_RVALID,
        RREADY => m_axi_data4_RREADY,
        RDATA => m_axi_data4_RDATA,
        RLAST => m_axi_data4_RLAST,
        RID => m_axi_data4_RID,
        RUSER => m_axi_data4_RUSER,
        RRESP => m_axi_data4_RRESP,
        BVALID => m_axi_data4_BVALID,
        BREADY => m_axi_data4_BREADY,
        BRESP => m_axi_data4_BRESP,
        BID => m_axi_data4_BID,
        BUSER => m_axi_data4_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data4_ARVALID,
        I_ARREADY => data4_ARREADY,
        I_ARADDR => data4_ARADDR,
        I_ARID => data4_ARID,
        I_ARLEN => data4_ARLEN,
        I_ARSIZE => data4_ARSIZE,
        I_ARLOCK => data4_ARLOCK,
        I_ARCACHE => data4_ARCACHE,
        I_ARQOS => data4_ARQOS,
        I_ARPROT => data4_ARPROT,
        I_ARUSER => data4_ARUSER,
        I_ARBURST => data4_ARBURST,
        I_ARREGION => data4_ARREGION,
        I_RVALID => data4_RVALID,
        I_RREADY => data4_RREADY,
        I_RDATA => data4_RDATA,
        I_RID => data4_RID,
        I_RUSER => data4_RUSER,
        I_RRESP => data4_RRESP,
        I_RLAST => data4_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data4_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data4_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => data4_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data4_BRESP,
        I_BID => data4_BID,
        I_BUSER => data4_BUSER);

    xts_aes_data3_m_axi_U : component xts_aes_data3_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data3_AWVALID,
        AWREADY => m_axi_data3_AWREADY,
        AWADDR => m_axi_data3_AWADDR,
        AWID => m_axi_data3_AWID,
        AWLEN => m_axi_data3_AWLEN,
        AWSIZE => m_axi_data3_AWSIZE,
        AWBURST => m_axi_data3_AWBURST,
        AWLOCK => m_axi_data3_AWLOCK,
        AWCACHE => m_axi_data3_AWCACHE,
        AWPROT => m_axi_data3_AWPROT,
        AWQOS => m_axi_data3_AWQOS,
        AWREGION => m_axi_data3_AWREGION,
        AWUSER => m_axi_data3_AWUSER,
        WVALID => m_axi_data3_WVALID,
        WREADY => m_axi_data3_WREADY,
        WDATA => m_axi_data3_WDATA,
        WSTRB => m_axi_data3_WSTRB,
        WLAST => m_axi_data3_WLAST,
        WID => m_axi_data3_WID,
        WUSER => m_axi_data3_WUSER,
        ARVALID => m_axi_data3_ARVALID,
        ARREADY => m_axi_data3_ARREADY,
        ARADDR => m_axi_data3_ARADDR,
        ARID => m_axi_data3_ARID,
        ARLEN => m_axi_data3_ARLEN,
        ARSIZE => m_axi_data3_ARSIZE,
        ARBURST => m_axi_data3_ARBURST,
        ARLOCK => m_axi_data3_ARLOCK,
        ARCACHE => m_axi_data3_ARCACHE,
        ARPROT => m_axi_data3_ARPROT,
        ARQOS => m_axi_data3_ARQOS,
        ARREGION => m_axi_data3_ARREGION,
        ARUSER => m_axi_data3_ARUSER,
        RVALID => m_axi_data3_RVALID,
        RREADY => m_axi_data3_RREADY,
        RDATA => m_axi_data3_RDATA,
        RLAST => m_axi_data3_RLAST,
        RID => m_axi_data3_RID,
        RUSER => m_axi_data3_RUSER,
        RRESP => m_axi_data3_RRESP,
        BVALID => m_axi_data3_BVALID,
        BREADY => m_axi_data3_BREADY,
        BRESP => m_axi_data3_BRESP,
        BID => m_axi_data3_BID,
        BUSER => m_axi_data3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data3_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data3_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data3_RDATA,
        I_RID => data3_RID,
        I_RUSER => data3_RUSER,
        I_RRESP => data3_RRESP,
        I_RLAST => data3_RLAST,
        I_AWVALID => data3_AWVALID,
        I_AWREADY => data3_AWREADY,
        I_AWADDR => data3_addr_reg_459,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_400,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => data3_WVALID,
        I_WREADY => data3_WREADY,
        I_WDATA => processed_data_load_reg_525,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => data3_BVALID,
        I_BREADY => data3_BREADY,
        I_BRESP => data3_BRESP,
        I_BID => data3_BID,
        I_BUSER => data3_BUSER);

    aes_expanded_key_V_U : component aes_expand_key58_bkb
    generic map (
        DataWidth => 16,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => aes_expanded_key_V_address0,
        ce0 => aes_expanded_key_V_ce0,
        we0 => aes_expanded_key_V_we0,
        d0 => grp_aes_expand_key58_fu_297_expanded_key_matrix_V_d0,
        q0 => aes_expanded_key_V_q0);

    aes_expanded_key2_V_U : component aes_expand_key58_bkb
    generic map (
        DataWidth => 16,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => aes_expanded_key2_V_address0,
        ce0 => aes_expanded_key2_V_ce0,
        we0 => aes_expanded_key2_V_we0,
        d0 => grp_aes_expand_key_fu_283_expanded_key_matrix_V_d0,
        q0 => aes_expanded_key2_V_q0);

    aes_tweak_V_U : component xts_aes_aes_tweak_V
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => aes_tweak_V_address0,
        ce0 => aes_tweak_V_ce0,
        we0 => aes_tweak_V_we0,
        d0 => aes_tweak_V_d0,
        q0 => aes_tweak_V_q0);

    processed_data_U : component xts_aes_processedmb6
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => processed_data_address0,
        ce0 => processed_data_ce0,
        we0 => processed_data_we0,
        d0 => grp_xts_aes_process_data_fu_246_blocks_V_d0,
        q0 => processed_data_q0);

    grp_xts_aes_process_data_fu_246 : component xts_aes_process_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_xts_aes_process_data_fu_246_ap_start,
        ap_done => grp_xts_aes_process_data_fu_246_ap_done,
        ap_idle => grp_xts_aes_process_data_fu_246_ap_idle,
        ap_ready => grp_xts_aes_process_data_fu_246_ap_ready,
        m_axi_data_V_AWVALID => grp_xts_aes_process_data_fu_246_m_axi_data_V_AWVALID,
        m_axi_data_V_AWREADY => ap_const_logic_0,
        m_axi_data_V_AWADDR => grp_xts_aes_process_data_fu_246_m_axi_data_V_AWADDR,
        m_axi_data_V_AWID => grp_xts_aes_process_data_fu_246_m_axi_data_V_AWID,
        m_axi_data_V_AWLEN => grp_xts_aes_process_data_fu_246_m_axi_data_V_AWLEN,
        m_axi_data_V_AWSIZE => grp_xts_aes_process_data_fu_246_m_axi_data_V_AWSIZE,
        m_axi_data_V_AWBURST => grp_xts_aes_process_data_fu_246_m_axi_data_V_AWBURST,
        m_axi_data_V_AWLOCK => grp_xts_aes_process_data_fu_246_m_axi_data_V_AWLOCK,
        m_axi_data_V_AWCACHE => grp_xts_aes_process_data_fu_246_m_axi_data_V_AWCACHE,
        m_axi_data_V_AWPROT => grp_xts_aes_process_data_fu_246_m_axi_data_V_AWPROT,
        m_axi_data_V_AWQOS => grp_xts_aes_process_data_fu_246_m_axi_data_V_AWQOS,
        m_axi_data_V_AWREGION => grp_xts_aes_process_data_fu_246_m_axi_data_V_AWREGION,
        m_axi_data_V_AWUSER => grp_xts_aes_process_data_fu_246_m_axi_data_V_AWUSER,
        m_axi_data_V_WVALID => grp_xts_aes_process_data_fu_246_m_axi_data_V_WVALID,
        m_axi_data_V_WREADY => ap_const_logic_0,
        m_axi_data_V_WDATA => grp_xts_aes_process_data_fu_246_m_axi_data_V_WDATA,
        m_axi_data_V_WSTRB => grp_xts_aes_process_data_fu_246_m_axi_data_V_WSTRB,
        m_axi_data_V_WLAST => grp_xts_aes_process_data_fu_246_m_axi_data_V_WLAST,
        m_axi_data_V_WID => grp_xts_aes_process_data_fu_246_m_axi_data_V_WID,
        m_axi_data_V_WUSER => grp_xts_aes_process_data_fu_246_m_axi_data_V_WUSER,
        m_axi_data_V_ARVALID => grp_xts_aes_process_data_fu_246_m_axi_data_V_ARVALID,
        m_axi_data_V_ARREADY => data2_ARREADY,
        m_axi_data_V_ARADDR => grp_xts_aes_process_data_fu_246_m_axi_data_V_ARADDR,
        m_axi_data_V_ARID => grp_xts_aes_process_data_fu_246_m_axi_data_V_ARID,
        m_axi_data_V_ARLEN => grp_xts_aes_process_data_fu_246_m_axi_data_V_ARLEN,
        m_axi_data_V_ARSIZE => grp_xts_aes_process_data_fu_246_m_axi_data_V_ARSIZE,
        m_axi_data_V_ARBURST => grp_xts_aes_process_data_fu_246_m_axi_data_V_ARBURST,
        m_axi_data_V_ARLOCK => grp_xts_aes_process_data_fu_246_m_axi_data_V_ARLOCK,
        m_axi_data_V_ARCACHE => grp_xts_aes_process_data_fu_246_m_axi_data_V_ARCACHE,
        m_axi_data_V_ARPROT => grp_xts_aes_process_data_fu_246_m_axi_data_V_ARPROT,
        m_axi_data_V_ARQOS => grp_xts_aes_process_data_fu_246_m_axi_data_V_ARQOS,
        m_axi_data_V_ARREGION => grp_xts_aes_process_data_fu_246_m_axi_data_V_ARREGION,
        m_axi_data_V_ARUSER => grp_xts_aes_process_data_fu_246_m_axi_data_V_ARUSER,
        m_axi_data_V_RVALID => data2_RVALID,
        m_axi_data_V_RREADY => grp_xts_aes_process_data_fu_246_m_axi_data_V_RREADY,
        m_axi_data_V_RDATA => data2_RDATA,
        m_axi_data_V_RLAST => data2_RLAST,
        m_axi_data_V_RID => data2_RID,
        m_axi_data_V_RUSER => data2_RUSER,
        m_axi_data_V_RRESP => data2_RRESP,
        m_axi_data_V_BVALID => ap_const_logic_0,
        m_axi_data_V_BREADY => grp_xts_aes_process_data_fu_246_m_axi_data_V_BREADY,
        m_axi_data_V_BRESP => ap_const_lv2_0,
        m_axi_data_V_BID => ap_const_lv1_0,
        m_axi_data_V_BUSER => ap_const_lv1_0,
        data_V_offset => text_V5_reg_483,
        num_blocks_orig_V => text_len_V_read_reg_449,
        mode_V => mode_V_read_reg_454,
        tweak_V_address0 => grp_xts_aes_process_data_fu_246_tweak_V_address0,
        tweak_V_ce0 => grp_xts_aes_process_data_fu_246_tweak_V_ce0,
        tweak_V_we0 => grp_xts_aes_process_data_fu_246_tweak_V_we0,
        tweak_V_d0 => grp_xts_aes_process_data_fu_246_tweak_V_d0,
        tweak_V_q0 => aes_tweak_V_q0,
        expanded_key_V_address0 => grp_xts_aes_process_data_fu_246_expanded_key_V_address0,
        expanded_key_V_ce0 => grp_xts_aes_process_data_fu_246_expanded_key_V_ce0,
        expanded_key_V_q0 => aes_expanded_key_V_q0,
        m_axi_s_boxes_V_AWVALID => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWVALID,
        m_axi_s_boxes_V_AWREADY => ap_const_logic_0,
        m_axi_s_boxes_V_AWADDR => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWADDR,
        m_axi_s_boxes_V_AWID => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWID,
        m_axi_s_boxes_V_AWLEN => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWLEN,
        m_axi_s_boxes_V_AWSIZE => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWSIZE,
        m_axi_s_boxes_V_AWBURST => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWBURST,
        m_axi_s_boxes_V_AWLOCK => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWLOCK,
        m_axi_s_boxes_V_AWCACHE => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWCACHE,
        m_axi_s_boxes_V_AWPROT => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWPROT,
        m_axi_s_boxes_V_AWQOS => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWQOS,
        m_axi_s_boxes_V_AWREGION => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWREGION,
        m_axi_s_boxes_V_AWUSER => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_AWUSER,
        m_axi_s_boxes_V_WVALID => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_WVALID,
        m_axi_s_boxes_V_WREADY => ap_const_logic_0,
        m_axi_s_boxes_V_WDATA => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_WDATA,
        m_axi_s_boxes_V_WSTRB => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_WSTRB,
        m_axi_s_boxes_V_WLAST => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_WLAST,
        m_axi_s_boxes_V_WID => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_WID,
        m_axi_s_boxes_V_WUSER => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_WUSER,
        m_axi_s_boxes_V_ARVALID => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARVALID,
        m_axi_s_boxes_V_ARREADY => data4_ARREADY,
        m_axi_s_boxes_V_ARADDR => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARADDR,
        m_axi_s_boxes_V_ARID => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARID,
        m_axi_s_boxes_V_ARLEN => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARLEN,
        m_axi_s_boxes_V_ARSIZE => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARSIZE,
        m_axi_s_boxes_V_ARBURST => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARBURST,
        m_axi_s_boxes_V_ARLOCK => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARLOCK,
        m_axi_s_boxes_V_ARCACHE => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARCACHE,
        m_axi_s_boxes_V_ARPROT => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARPROT,
        m_axi_s_boxes_V_ARQOS => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARQOS,
        m_axi_s_boxes_V_ARREGION => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARREGION,
        m_axi_s_boxes_V_ARUSER => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARUSER,
        m_axi_s_boxes_V_RVALID => data4_RVALID,
        m_axi_s_boxes_V_RREADY => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_RREADY,
        m_axi_s_boxes_V_RDATA => data4_RDATA,
        m_axi_s_boxes_V_RLAST => data4_RLAST,
        m_axi_s_boxes_V_RID => data4_RID,
        m_axi_s_boxes_V_RUSER => data4_RUSER,
        m_axi_s_boxes_V_RRESP => data4_RRESP,
        m_axi_s_boxes_V_BVALID => ap_const_logic_0,
        m_axi_s_boxes_V_BREADY => grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_BREADY,
        m_axi_s_boxes_V_BRESP => ap_const_lv2_0,
        m_axi_s_boxes_V_BID => ap_const_lv1_0,
        m_axi_s_boxes_V_BUSER => ap_const_lv1_0,
        s_boxes_V_offset => s_boxes_V_read_reg_441,
        m_axi_mix_column_constant_matrices_V_AWVALID => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWVALID,
        m_axi_mix_column_constant_matrices_V_AWREADY => ap_const_logic_0,
        m_axi_mix_column_constant_matrices_V_AWADDR => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWADDR,
        m_axi_mix_column_constant_matrices_V_AWID => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWID,
        m_axi_mix_column_constant_matrices_V_AWLEN => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWLEN,
        m_axi_mix_column_constant_matrices_V_AWSIZE => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWSIZE,
        m_axi_mix_column_constant_matrices_V_AWBURST => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWBURST,
        m_axi_mix_column_constant_matrices_V_AWLOCK => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWLOCK,
        m_axi_mix_column_constant_matrices_V_AWCACHE => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWCACHE,
        m_axi_mix_column_constant_matrices_V_AWPROT => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWPROT,
        m_axi_mix_column_constant_matrices_V_AWQOS => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWQOS,
        m_axi_mix_column_constant_matrices_V_AWREGION => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWREGION,
        m_axi_mix_column_constant_matrices_V_AWUSER => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_AWUSER,
        m_axi_mix_column_constant_matrices_V_WVALID => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_WVALID,
        m_axi_mix_column_constant_matrices_V_WREADY => ap_const_logic_0,
        m_axi_mix_column_constant_matrices_V_WDATA => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_WDATA,
        m_axi_mix_column_constant_matrices_V_WSTRB => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_WSTRB,
        m_axi_mix_column_constant_matrices_V_WLAST => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_WLAST,
        m_axi_mix_column_constant_matrices_V_WID => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_WID,
        m_axi_mix_column_constant_matrices_V_WUSER => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_WUSER,
        m_axi_mix_column_constant_matrices_V_ARVALID => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARVALID,
        m_axi_mix_column_constant_matrices_V_ARREADY => data0_ARREADY,
        m_axi_mix_column_constant_matrices_V_ARADDR => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARADDR,
        m_axi_mix_column_constant_matrices_V_ARID => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARID,
        m_axi_mix_column_constant_matrices_V_ARLEN => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARLEN,
        m_axi_mix_column_constant_matrices_V_ARSIZE => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARSIZE,
        m_axi_mix_column_constant_matrices_V_ARBURST => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARBURST,
        m_axi_mix_column_constant_matrices_V_ARLOCK => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARLOCK,
        m_axi_mix_column_constant_matrices_V_ARCACHE => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARCACHE,
        m_axi_mix_column_constant_matrices_V_ARPROT => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARPROT,
        m_axi_mix_column_constant_matrices_V_ARQOS => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARQOS,
        m_axi_mix_column_constant_matrices_V_ARREGION => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARREGION,
        m_axi_mix_column_constant_matrices_V_ARUSER => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARUSER,
        m_axi_mix_column_constant_matrices_V_RVALID => data0_RVALID,
        m_axi_mix_column_constant_matrices_V_RREADY => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_RREADY,
        m_axi_mix_column_constant_matrices_V_RDATA => data0_RDATA,
        m_axi_mix_column_constant_matrices_V_RLAST => data0_RLAST,
        m_axi_mix_column_constant_matrices_V_RID => data0_RID,
        m_axi_mix_column_constant_matrices_V_RUSER => data0_RUSER,
        m_axi_mix_column_constant_matrices_V_RRESP => data0_RRESP,
        m_axi_mix_column_constant_matrices_V_BVALID => ap_const_logic_0,
        m_axi_mix_column_constant_matrices_V_BREADY => grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_BREADY,
        m_axi_mix_column_constant_matrices_V_BRESP => ap_const_lv2_0,
        m_axi_mix_column_constant_matrices_V_BID => ap_const_lv1_0,
        m_axi_mix_column_constant_matrices_V_BUSER => ap_const_lv1_0,
        mix_column_constant_matrices_V_offset => mix_column_constant_s_reg_477,
        m_axi_multiplication_V_AWVALID => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWVALID,
        m_axi_multiplication_V_AWREADY => ap_const_logic_0,
        m_axi_multiplication_V_AWADDR => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWADDR,
        m_axi_multiplication_V_AWID => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWID,
        m_axi_multiplication_V_AWLEN => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWLEN,
        m_axi_multiplication_V_AWSIZE => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWSIZE,
        m_axi_multiplication_V_AWBURST => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWBURST,
        m_axi_multiplication_V_AWLOCK => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWLOCK,
        m_axi_multiplication_V_AWCACHE => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWCACHE,
        m_axi_multiplication_V_AWPROT => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWPROT,
        m_axi_multiplication_V_AWQOS => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWQOS,
        m_axi_multiplication_V_AWREGION => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWREGION,
        m_axi_multiplication_V_AWUSER => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_AWUSER,
        m_axi_multiplication_V_WVALID => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_WVALID,
        m_axi_multiplication_V_WREADY => ap_const_logic_0,
        m_axi_multiplication_V_WDATA => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_WDATA,
        m_axi_multiplication_V_WSTRB => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_WSTRB,
        m_axi_multiplication_V_WLAST => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_WLAST,
        m_axi_multiplication_V_WID => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_WID,
        m_axi_multiplication_V_WUSER => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_WUSER,
        m_axi_multiplication_V_ARVALID => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARVALID,
        m_axi_multiplication_V_ARREADY => data1_ARREADY,
        m_axi_multiplication_V_ARADDR => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARADDR,
        m_axi_multiplication_V_ARID => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARID,
        m_axi_multiplication_V_ARLEN => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARLEN,
        m_axi_multiplication_V_ARSIZE => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARSIZE,
        m_axi_multiplication_V_ARBURST => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARBURST,
        m_axi_multiplication_V_ARLOCK => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARLOCK,
        m_axi_multiplication_V_ARCACHE => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARCACHE,
        m_axi_multiplication_V_ARPROT => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARPROT,
        m_axi_multiplication_V_ARQOS => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARQOS,
        m_axi_multiplication_V_ARREGION => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARREGION,
        m_axi_multiplication_V_ARUSER => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARUSER,
        m_axi_multiplication_V_RVALID => data1_RVALID,
        m_axi_multiplication_V_RREADY => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_RREADY,
        m_axi_multiplication_V_RDATA => data1_RDATA,
        m_axi_multiplication_V_RLAST => data1_RLAST,
        m_axi_multiplication_V_RID => data1_RID,
        m_axi_multiplication_V_RUSER => data1_RUSER,
        m_axi_multiplication_V_RRESP => data1_RRESP,
        m_axi_multiplication_V_BVALID => ap_const_logic_0,
        m_axi_multiplication_V_BREADY => grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_BREADY,
        m_axi_multiplication_V_BRESP => ap_const_lv2_0,
        m_axi_multiplication_V_BID => ap_const_lv1_0,
        m_axi_multiplication_V_BUSER => ap_const_lv1_0,
        multiplication_V_offset => multiplication_V1_reg_471,
        blocks_V_address0 => grp_xts_aes_process_data_fu_246_blocks_V_address0,
        blocks_V_ce0 => grp_xts_aes_process_data_fu_246_blocks_V_ce0,
        blocks_V_we0 => grp_xts_aes_process_data_fu_246_blocks_V_we0,
        blocks_V_d0 => grp_xts_aes_process_data_fu_246_blocks_V_d0,
        blocks_V_q0 => processed_data_q0);

    grp_aes_process_1_fu_267 : component aes_process_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_process_1_fu_267_ap_start,
        ap_done => grp_aes_process_1_fu_267_ap_done,
        ap_idle => grp_aes_process_1_fu_267_ap_idle,
        ap_ready => grp_aes_process_1_fu_267_ap_ready,
        m_axi_text_V_AWVALID => grp_aes_process_1_fu_267_m_axi_text_V_AWVALID,
        m_axi_text_V_AWREADY => ap_const_logic_0,
        m_axi_text_V_AWADDR => grp_aes_process_1_fu_267_m_axi_text_V_AWADDR,
        m_axi_text_V_AWID => grp_aes_process_1_fu_267_m_axi_text_V_AWID,
        m_axi_text_V_AWLEN => grp_aes_process_1_fu_267_m_axi_text_V_AWLEN,
        m_axi_text_V_AWSIZE => grp_aes_process_1_fu_267_m_axi_text_V_AWSIZE,
        m_axi_text_V_AWBURST => grp_aes_process_1_fu_267_m_axi_text_V_AWBURST,
        m_axi_text_V_AWLOCK => grp_aes_process_1_fu_267_m_axi_text_V_AWLOCK,
        m_axi_text_V_AWCACHE => grp_aes_process_1_fu_267_m_axi_text_V_AWCACHE,
        m_axi_text_V_AWPROT => grp_aes_process_1_fu_267_m_axi_text_V_AWPROT,
        m_axi_text_V_AWQOS => grp_aes_process_1_fu_267_m_axi_text_V_AWQOS,
        m_axi_text_V_AWREGION => grp_aes_process_1_fu_267_m_axi_text_V_AWREGION,
        m_axi_text_V_AWUSER => grp_aes_process_1_fu_267_m_axi_text_V_AWUSER,
        m_axi_text_V_WVALID => grp_aes_process_1_fu_267_m_axi_text_V_WVALID,
        m_axi_text_V_WREADY => ap_const_logic_0,
        m_axi_text_V_WDATA => grp_aes_process_1_fu_267_m_axi_text_V_WDATA,
        m_axi_text_V_WSTRB => grp_aes_process_1_fu_267_m_axi_text_V_WSTRB,
        m_axi_text_V_WLAST => grp_aes_process_1_fu_267_m_axi_text_V_WLAST,
        m_axi_text_V_WID => grp_aes_process_1_fu_267_m_axi_text_V_WID,
        m_axi_text_V_WUSER => grp_aes_process_1_fu_267_m_axi_text_V_WUSER,
        m_axi_text_V_ARVALID => grp_aes_process_1_fu_267_m_axi_text_V_ARVALID,
        m_axi_text_V_ARREADY => data1_ARREADY,
        m_axi_text_V_ARADDR => grp_aes_process_1_fu_267_m_axi_text_V_ARADDR,
        m_axi_text_V_ARID => grp_aes_process_1_fu_267_m_axi_text_V_ARID,
        m_axi_text_V_ARLEN => grp_aes_process_1_fu_267_m_axi_text_V_ARLEN,
        m_axi_text_V_ARSIZE => grp_aes_process_1_fu_267_m_axi_text_V_ARSIZE,
        m_axi_text_V_ARBURST => grp_aes_process_1_fu_267_m_axi_text_V_ARBURST,
        m_axi_text_V_ARLOCK => grp_aes_process_1_fu_267_m_axi_text_V_ARLOCK,
        m_axi_text_V_ARCACHE => grp_aes_process_1_fu_267_m_axi_text_V_ARCACHE,
        m_axi_text_V_ARPROT => grp_aes_process_1_fu_267_m_axi_text_V_ARPROT,
        m_axi_text_V_ARQOS => grp_aes_process_1_fu_267_m_axi_text_V_ARQOS,
        m_axi_text_V_ARREGION => grp_aes_process_1_fu_267_m_axi_text_V_ARREGION,
        m_axi_text_V_ARUSER => grp_aes_process_1_fu_267_m_axi_text_V_ARUSER,
        m_axi_text_V_RVALID => data1_RVALID,
        m_axi_text_V_RREADY => grp_aes_process_1_fu_267_m_axi_text_V_RREADY,
        m_axi_text_V_RDATA => data1_RDATA,
        m_axi_text_V_RLAST => data1_RLAST,
        m_axi_text_V_RID => data1_RID,
        m_axi_text_V_RUSER => data1_RUSER,
        m_axi_text_V_RRESP => data1_RRESP,
        m_axi_text_V_BVALID => ap_const_logic_0,
        m_axi_text_V_BREADY => grp_aes_process_1_fu_267_m_axi_text_V_BREADY,
        m_axi_text_V_BRESP => ap_const_lv2_0,
        m_axi_text_V_BID => ap_const_lv1_0,
        m_axi_text_V_BUSER => ap_const_lv1_0,
        text_V_offset => tweak_V3_reg_488,
        expanded_key_V_address0 => grp_aes_process_1_fu_267_expanded_key_V_address0,
        expanded_key_V_ce0 => grp_aes_process_1_fu_267_expanded_key_V_ce0,
        expanded_key_V_q0 => aes_expanded_key2_V_q0,
        m_axi_s_boxes_V_AWVALID => grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWVALID,
        m_axi_s_boxes_V_AWREADY => ap_const_logic_0,
        m_axi_s_boxes_V_AWADDR => grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWADDR,
        m_axi_s_boxes_V_AWID => grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWID,
        m_axi_s_boxes_V_AWLEN => grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWLEN,
        m_axi_s_boxes_V_AWSIZE => grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWSIZE,
        m_axi_s_boxes_V_AWBURST => grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWBURST,
        m_axi_s_boxes_V_AWLOCK => grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWLOCK,
        m_axi_s_boxes_V_AWCACHE => grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWCACHE,
        m_axi_s_boxes_V_AWPROT => grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWPROT,
        m_axi_s_boxes_V_AWQOS => grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWQOS,
        m_axi_s_boxes_V_AWREGION => grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWREGION,
        m_axi_s_boxes_V_AWUSER => grp_aes_process_1_fu_267_m_axi_s_boxes_V_AWUSER,
        m_axi_s_boxes_V_WVALID => grp_aes_process_1_fu_267_m_axi_s_boxes_V_WVALID,
        m_axi_s_boxes_V_WREADY => ap_const_logic_0,
        m_axi_s_boxes_V_WDATA => grp_aes_process_1_fu_267_m_axi_s_boxes_V_WDATA,
        m_axi_s_boxes_V_WSTRB => grp_aes_process_1_fu_267_m_axi_s_boxes_V_WSTRB,
        m_axi_s_boxes_V_WLAST => grp_aes_process_1_fu_267_m_axi_s_boxes_V_WLAST,
        m_axi_s_boxes_V_WID => grp_aes_process_1_fu_267_m_axi_s_boxes_V_WID,
        m_axi_s_boxes_V_WUSER => grp_aes_process_1_fu_267_m_axi_s_boxes_V_WUSER,
        m_axi_s_boxes_V_ARVALID => grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARVALID,
        m_axi_s_boxes_V_ARREADY => data4_ARREADY,
        m_axi_s_boxes_V_ARADDR => grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARADDR,
        m_axi_s_boxes_V_ARID => grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARID,
        m_axi_s_boxes_V_ARLEN => grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARLEN,
        m_axi_s_boxes_V_ARSIZE => grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARSIZE,
        m_axi_s_boxes_V_ARBURST => grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARBURST,
        m_axi_s_boxes_V_ARLOCK => grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARLOCK,
        m_axi_s_boxes_V_ARCACHE => grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARCACHE,
        m_axi_s_boxes_V_ARPROT => grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARPROT,
        m_axi_s_boxes_V_ARQOS => grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARQOS,
        m_axi_s_boxes_V_ARREGION => grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARREGION,
        m_axi_s_boxes_V_ARUSER => grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARUSER,
        m_axi_s_boxes_V_RVALID => data4_RVALID,
        m_axi_s_boxes_V_RREADY => grp_aes_process_1_fu_267_m_axi_s_boxes_V_RREADY,
        m_axi_s_boxes_V_RDATA => data4_RDATA,
        m_axi_s_boxes_V_RLAST => data4_RLAST,
        m_axi_s_boxes_V_RID => data4_RID,
        m_axi_s_boxes_V_RUSER => data4_RUSER,
        m_axi_s_boxes_V_RRESP => data4_RRESP,
        m_axi_s_boxes_V_BVALID => ap_const_logic_0,
        m_axi_s_boxes_V_BREADY => grp_aes_process_1_fu_267_m_axi_s_boxes_V_BREADY,
        m_axi_s_boxes_V_BRESP => ap_const_lv2_0,
        m_axi_s_boxes_V_BID => ap_const_lv1_0,
        m_axi_s_boxes_V_BUSER => ap_const_lv1_0,
        s_boxes_V_offset => s_boxes_V_read_reg_441,
        m_axi_mix_column_constant_matrices_V_AWVALID => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWVALID,
        m_axi_mix_column_constant_matrices_V_AWREADY => ap_const_logic_0,
        m_axi_mix_column_constant_matrices_V_AWADDR => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWADDR,
        m_axi_mix_column_constant_matrices_V_AWID => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWID,
        m_axi_mix_column_constant_matrices_V_AWLEN => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWLEN,
        m_axi_mix_column_constant_matrices_V_AWSIZE => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWSIZE,
        m_axi_mix_column_constant_matrices_V_AWBURST => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWBURST,
        m_axi_mix_column_constant_matrices_V_AWLOCK => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWLOCK,
        m_axi_mix_column_constant_matrices_V_AWCACHE => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWCACHE,
        m_axi_mix_column_constant_matrices_V_AWPROT => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWPROT,
        m_axi_mix_column_constant_matrices_V_AWQOS => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWQOS,
        m_axi_mix_column_constant_matrices_V_AWREGION => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWREGION,
        m_axi_mix_column_constant_matrices_V_AWUSER => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_AWUSER,
        m_axi_mix_column_constant_matrices_V_WVALID => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_WVALID,
        m_axi_mix_column_constant_matrices_V_WREADY => ap_const_logic_0,
        m_axi_mix_column_constant_matrices_V_WDATA => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_WDATA,
        m_axi_mix_column_constant_matrices_V_WSTRB => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_WSTRB,
        m_axi_mix_column_constant_matrices_V_WLAST => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_WLAST,
        m_axi_mix_column_constant_matrices_V_WID => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_WID,
        m_axi_mix_column_constant_matrices_V_WUSER => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_WUSER,
        m_axi_mix_column_constant_matrices_V_ARVALID => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARVALID,
        m_axi_mix_column_constant_matrices_V_ARREADY => data0_ARREADY,
        m_axi_mix_column_constant_matrices_V_ARADDR => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARADDR,
        m_axi_mix_column_constant_matrices_V_ARID => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARID,
        m_axi_mix_column_constant_matrices_V_ARLEN => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARLEN,
        m_axi_mix_column_constant_matrices_V_ARSIZE => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARSIZE,
        m_axi_mix_column_constant_matrices_V_ARBURST => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARBURST,
        m_axi_mix_column_constant_matrices_V_ARLOCK => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARLOCK,
        m_axi_mix_column_constant_matrices_V_ARCACHE => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARCACHE,
        m_axi_mix_column_constant_matrices_V_ARPROT => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARPROT,
        m_axi_mix_column_constant_matrices_V_ARQOS => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARQOS,
        m_axi_mix_column_constant_matrices_V_ARREGION => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARREGION,
        m_axi_mix_column_constant_matrices_V_ARUSER => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARUSER,
        m_axi_mix_column_constant_matrices_V_RVALID => data0_RVALID,
        m_axi_mix_column_constant_matrices_V_RREADY => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_RREADY,
        m_axi_mix_column_constant_matrices_V_RDATA => data0_RDATA,
        m_axi_mix_column_constant_matrices_V_RLAST => data0_RLAST,
        m_axi_mix_column_constant_matrices_V_RID => data0_RID,
        m_axi_mix_column_constant_matrices_V_RUSER => data0_RUSER,
        m_axi_mix_column_constant_matrices_V_RRESP => data0_RRESP,
        m_axi_mix_column_constant_matrices_V_BVALID => ap_const_logic_0,
        m_axi_mix_column_constant_matrices_V_BREADY => grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_BREADY,
        m_axi_mix_column_constant_matrices_V_BRESP => ap_const_lv2_0,
        m_axi_mix_column_constant_matrices_V_BID => ap_const_lv1_0,
        m_axi_mix_column_constant_matrices_V_BUSER => ap_const_lv1_0,
        mix_column_constant_matrices_V_offset => mix_column_constant_s_reg_477,
        multiplication_V_offset => multiplication_V1_reg_471,
        sequence_out_V_address0 => grp_aes_process_1_fu_267_sequence_out_V_address0,
        sequence_out_V_ce0 => grp_aes_process_1_fu_267_sequence_out_V_ce0,
        sequence_out_V_we0 => grp_aes_process_1_fu_267_sequence_out_V_we0,
        sequence_out_V_d0 => grp_aes_process_1_fu_267_sequence_out_V_d0);

    grp_aes_expand_key_fu_283 : component aes_expand_key
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_expand_key_fu_283_ap_start,
        ap_done => grp_aes_expand_key_fu_283_ap_done,
        ap_idle => grp_aes_expand_key_fu_283_ap_idle,
        ap_ready => grp_aes_expand_key_fu_283_ap_ready,
        m_axi_key_V_AWVALID => grp_aes_expand_key_fu_283_m_axi_key_V_AWVALID,
        m_axi_key_V_AWREADY => ap_const_logic_0,
        m_axi_key_V_AWADDR => grp_aes_expand_key_fu_283_m_axi_key_V_AWADDR,
        m_axi_key_V_AWID => grp_aes_expand_key_fu_283_m_axi_key_V_AWID,
        m_axi_key_V_AWLEN => grp_aes_expand_key_fu_283_m_axi_key_V_AWLEN,
        m_axi_key_V_AWSIZE => grp_aes_expand_key_fu_283_m_axi_key_V_AWSIZE,
        m_axi_key_V_AWBURST => grp_aes_expand_key_fu_283_m_axi_key_V_AWBURST,
        m_axi_key_V_AWLOCK => grp_aes_expand_key_fu_283_m_axi_key_V_AWLOCK,
        m_axi_key_V_AWCACHE => grp_aes_expand_key_fu_283_m_axi_key_V_AWCACHE,
        m_axi_key_V_AWPROT => grp_aes_expand_key_fu_283_m_axi_key_V_AWPROT,
        m_axi_key_V_AWQOS => grp_aes_expand_key_fu_283_m_axi_key_V_AWQOS,
        m_axi_key_V_AWREGION => grp_aes_expand_key_fu_283_m_axi_key_V_AWREGION,
        m_axi_key_V_AWUSER => grp_aes_expand_key_fu_283_m_axi_key_V_AWUSER,
        m_axi_key_V_WVALID => grp_aes_expand_key_fu_283_m_axi_key_V_WVALID,
        m_axi_key_V_WREADY => ap_const_logic_0,
        m_axi_key_V_WDATA => grp_aes_expand_key_fu_283_m_axi_key_V_WDATA,
        m_axi_key_V_WSTRB => grp_aes_expand_key_fu_283_m_axi_key_V_WSTRB,
        m_axi_key_V_WLAST => grp_aes_expand_key_fu_283_m_axi_key_V_WLAST,
        m_axi_key_V_WID => grp_aes_expand_key_fu_283_m_axi_key_V_WID,
        m_axi_key_V_WUSER => grp_aes_expand_key_fu_283_m_axi_key_V_WUSER,
        m_axi_key_V_ARVALID => grp_aes_expand_key_fu_283_m_axi_key_V_ARVALID,
        m_axi_key_V_ARREADY => data0_ARREADY,
        m_axi_key_V_ARADDR => grp_aes_expand_key_fu_283_m_axi_key_V_ARADDR,
        m_axi_key_V_ARID => grp_aes_expand_key_fu_283_m_axi_key_V_ARID,
        m_axi_key_V_ARLEN => grp_aes_expand_key_fu_283_m_axi_key_V_ARLEN,
        m_axi_key_V_ARSIZE => grp_aes_expand_key_fu_283_m_axi_key_V_ARSIZE,
        m_axi_key_V_ARBURST => grp_aes_expand_key_fu_283_m_axi_key_V_ARBURST,
        m_axi_key_V_ARLOCK => grp_aes_expand_key_fu_283_m_axi_key_V_ARLOCK,
        m_axi_key_V_ARCACHE => grp_aes_expand_key_fu_283_m_axi_key_V_ARCACHE,
        m_axi_key_V_ARPROT => grp_aes_expand_key_fu_283_m_axi_key_V_ARPROT,
        m_axi_key_V_ARQOS => grp_aes_expand_key_fu_283_m_axi_key_V_ARQOS,
        m_axi_key_V_ARREGION => grp_aes_expand_key_fu_283_m_axi_key_V_ARREGION,
        m_axi_key_V_ARUSER => grp_aes_expand_key_fu_283_m_axi_key_V_ARUSER,
        m_axi_key_V_RVALID => data0_RVALID,
        m_axi_key_V_RREADY => grp_aes_expand_key_fu_283_m_axi_key_V_RREADY,
        m_axi_key_V_RDATA => data0_RDATA,
        m_axi_key_V_RLAST => data0_RLAST,
        m_axi_key_V_RID => data0_RID,
        m_axi_key_V_RUSER => data0_RUSER,
        m_axi_key_V_RRESP => data0_RRESP,
        m_axi_key_V_BVALID => ap_const_logic_0,
        m_axi_key_V_BREADY => grp_aes_expand_key_fu_283_m_axi_key_V_BREADY,
        m_axi_key_V_BRESP => ap_const_lv2_0,
        m_axi_key_V_BID => ap_const_lv1_0,
        m_axi_key_V_BUSER => ap_const_lv1_0,
        key_V_offset => key_V1_reg_493,
        m_axi_s_box_V_AWVALID => grp_aes_expand_key_fu_283_m_axi_s_box_V_AWVALID,
        m_axi_s_box_V_AWREADY => ap_const_logic_0,
        m_axi_s_box_V_AWADDR => grp_aes_expand_key_fu_283_m_axi_s_box_V_AWADDR,
        m_axi_s_box_V_AWID => grp_aes_expand_key_fu_283_m_axi_s_box_V_AWID,
        m_axi_s_box_V_AWLEN => grp_aes_expand_key_fu_283_m_axi_s_box_V_AWLEN,
        m_axi_s_box_V_AWSIZE => grp_aes_expand_key_fu_283_m_axi_s_box_V_AWSIZE,
        m_axi_s_box_V_AWBURST => grp_aes_expand_key_fu_283_m_axi_s_box_V_AWBURST,
        m_axi_s_box_V_AWLOCK => grp_aes_expand_key_fu_283_m_axi_s_box_V_AWLOCK,
        m_axi_s_box_V_AWCACHE => grp_aes_expand_key_fu_283_m_axi_s_box_V_AWCACHE,
        m_axi_s_box_V_AWPROT => grp_aes_expand_key_fu_283_m_axi_s_box_V_AWPROT,
        m_axi_s_box_V_AWQOS => grp_aes_expand_key_fu_283_m_axi_s_box_V_AWQOS,
        m_axi_s_box_V_AWREGION => grp_aes_expand_key_fu_283_m_axi_s_box_V_AWREGION,
        m_axi_s_box_V_AWUSER => grp_aes_expand_key_fu_283_m_axi_s_box_V_AWUSER,
        m_axi_s_box_V_WVALID => grp_aes_expand_key_fu_283_m_axi_s_box_V_WVALID,
        m_axi_s_box_V_WREADY => ap_const_logic_0,
        m_axi_s_box_V_WDATA => grp_aes_expand_key_fu_283_m_axi_s_box_V_WDATA,
        m_axi_s_box_V_WSTRB => grp_aes_expand_key_fu_283_m_axi_s_box_V_WSTRB,
        m_axi_s_box_V_WLAST => grp_aes_expand_key_fu_283_m_axi_s_box_V_WLAST,
        m_axi_s_box_V_WID => grp_aes_expand_key_fu_283_m_axi_s_box_V_WID,
        m_axi_s_box_V_WUSER => grp_aes_expand_key_fu_283_m_axi_s_box_V_WUSER,
        m_axi_s_box_V_ARVALID => grp_aes_expand_key_fu_283_m_axi_s_box_V_ARVALID,
        m_axi_s_box_V_ARREADY => data4_ARREADY,
        m_axi_s_box_V_ARADDR => grp_aes_expand_key_fu_283_m_axi_s_box_V_ARADDR,
        m_axi_s_box_V_ARID => grp_aes_expand_key_fu_283_m_axi_s_box_V_ARID,
        m_axi_s_box_V_ARLEN => grp_aes_expand_key_fu_283_m_axi_s_box_V_ARLEN,
        m_axi_s_box_V_ARSIZE => grp_aes_expand_key_fu_283_m_axi_s_box_V_ARSIZE,
        m_axi_s_box_V_ARBURST => grp_aes_expand_key_fu_283_m_axi_s_box_V_ARBURST,
        m_axi_s_box_V_ARLOCK => grp_aes_expand_key_fu_283_m_axi_s_box_V_ARLOCK,
        m_axi_s_box_V_ARCACHE => grp_aes_expand_key_fu_283_m_axi_s_box_V_ARCACHE,
        m_axi_s_box_V_ARPROT => grp_aes_expand_key_fu_283_m_axi_s_box_V_ARPROT,
        m_axi_s_box_V_ARQOS => grp_aes_expand_key_fu_283_m_axi_s_box_V_ARQOS,
        m_axi_s_box_V_ARREGION => grp_aes_expand_key_fu_283_m_axi_s_box_V_ARREGION,
        m_axi_s_box_V_ARUSER => grp_aes_expand_key_fu_283_m_axi_s_box_V_ARUSER,
        m_axi_s_box_V_RVALID => data4_RVALID,
        m_axi_s_box_V_RREADY => grp_aes_expand_key_fu_283_m_axi_s_box_V_RREADY,
        m_axi_s_box_V_RDATA => data4_RDATA,
        m_axi_s_box_V_RLAST => data4_RLAST,
        m_axi_s_box_V_RID => data4_RID,
        m_axi_s_box_V_RUSER => data4_RUSER,
        m_axi_s_box_V_RRESP => data4_RRESP,
        m_axi_s_box_V_BVALID => ap_const_logic_0,
        m_axi_s_box_V_BREADY => grp_aes_expand_key_fu_283_m_axi_s_box_V_BREADY,
        m_axi_s_box_V_BRESP => ap_const_lv2_0,
        m_axi_s_box_V_BID => ap_const_lv1_0,
        m_axi_s_box_V_BUSER => ap_const_lv1_0,
        s_box_V_offset => s_boxes_V_read_reg_441,
        m_axi_rcon_V_AWVALID => grp_aes_expand_key_fu_283_m_axi_rcon_V_AWVALID,
        m_axi_rcon_V_AWREADY => ap_const_logic_0,
        m_axi_rcon_V_AWADDR => grp_aes_expand_key_fu_283_m_axi_rcon_V_AWADDR,
        m_axi_rcon_V_AWID => grp_aes_expand_key_fu_283_m_axi_rcon_V_AWID,
        m_axi_rcon_V_AWLEN => grp_aes_expand_key_fu_283_m_axi_rcon_V_AWLEN,
        m_axi_rcon_V_AWSIZE => grp_aes_expand_key_fu_283_m_axi_rcon_V_AWSIZE,
        m_axi_rcon_V_AWBURST => grp_aes_expand_key_fu_283_m_axi_rcon_V_AWBURST,
        m_axi_rcon_V_AWLOCK => grp_aes_expand_key_fu_283_m_axi_rcon_V_AWLOCK,
        m_axi_rcon_V_AWCACHE => grp_aes_expand_key_fu_283_m_axi_rcon_V_AWCACHE,
        m_axi_rcon_V_AWPROT => grp_aes_expand_key_fu_283_m_axi_rcon_V_AWPROT,
        m_axi_rcon_V_AWQOS => grp_aes_expand_key_fu_283_m_axi_rcon_V_AWQOS,
        m_axi_rcon_V_AWREGION => grp_aes_expand_key_fu_283_m_axi_rcon_V_AWREGION,
        m_axi_rcon_V_AWUSER => grp_aes_expand_key_fu_283_m_axi_rcon_V_AWUSER,
        m_axi_rcon_V_WVALID => grp_aes_expand_key_fu_283_m_axi_rcon_V_WVALID,
        m_axi_rcon_V_WREADY => ap_const_logic_0,
        m_axi_rcon_V_WDATA => grp_aes_expand_key_fu_283_m_axi_rcon_V_WDATA,
        m_axi_rcon_V_WSTRB => grp_aes_expand_key_fu_283_m_axi_rcon_V_WSTRB,
        m_axi_rcon_V_WLAST => grp_aes_expand_key_fu_283_m_axi_rcon_V_WLAST,
        m_axi_rcon_V_WID => grp_aes_expand_key_fu_283_m_axi_rcon_V_WID,
        m_axi_rcon_V_WUSER => grp_aes_expand_key_fu_283_m_axi_rcon_V_WUSER,
        m_axi_rcon_V_ARVALID => grp_aes_expand_key_fu_283_m_axi_rcon_V_ARVALID,
        m_axi_rcon_V_ARREADY => data2_ARREADY,
        m_axi_rcon_V_ARADDR => grp_aes_expand_key_fu_283_m_axi_rcon_V_ARADDR,
        m_axi_rcon_V_ARID => grp_aes_expand_key_fu_283_m_axi_rcon_V_ARID,
        m_axi_rcon_V_ARLEN => grp_aes_expand_key_fu_283_m_axi_rcon_V_ARLEN,
        m_axi_rcon_V_ARSIZE => grp_aes_expand_key_fu_283_m_axi_rcon_V_ARSIZE,
        m_axi_rcon_V_ARBURST => grp_aes_expand_key_fu_283_m_axi_rcon_V_ARBURST,
        m_axi_rcon_V_ARLOCK => grp_aes_expand_key_fu_283_m_axi_rcon_V_ARLOCK,
        m_axi_rcon_V_ARCACHE => grp_aes_expand_key_fu_283_m_axi_rcon_V_ARCACHE,
        m_axi_rcon_V_ARPROT => grp_aes_expand_key_fu_283_m_axi_rcon_V_ARPROT,
        m_axi_rcon_V_ARQOS => grp_aes_expand_key_fu_283_m_axi_rcon_V_ARQOS,
        m_axi_rcon_V_ARREGION => grp_aes_expand_key_fu_283_m_axi_rcon_V_ARREGION,
        m_axi_rcon_V_ARUSER => grp_aes_expand_key_fu_283_m_axi_rcon_V_ARUSER,
        m_axi_rcon_V_RVALID => data2_RVALID,
        m_axi_rcon_V_RREADY => grp_aes_expand_key_fu_283_m_axi_rcon_V_RREADY,
        m_axi_rcon_V_RDATA => data2_RDATA,
        m_axi_rcon_V_RLAST => data2_RLAST,
        m_axi_rcon_V_RID => data2_RID,
        m_axi_rcon_V_RUSER => data2_RUSER,
        m_axi_rcon_V_RRESP => data2_RRESP,
        m_axi_rcon_V_BVALID => ap_const_logic_0,
        m_axi_rcon_V_BREADY => grp_aes_expand_key_fu_283_m_axi_rcon_V_BREADY,
        m_axi_rcon_V_BRESP => ap_const_lv2_0,
        m_axi_rcon_V_BID => ap_const_lv1_0,
        m_axi_rcon_V_BUSER => ap_const_lv1_0,
        rcon_V_offset => rcon_V1_reg_465,
        expanded_key_matrix_V_address0 => grp_aes_expand_key_fu_283_expanded_key_matrix_V_address0,
        expanded_key_matrix_V_ce0 => grp_aes_expand_key_fu_283_expanded_key_matrix_V_ce0,
        expanded_key_matrix_V_we0 => grp_aes_expand_key_fu_283_expanded_key_matrix_V_we0,
        expanded_key_matrix_V_d0 => grp_aes_expand_key_fu_283_expanded_key_matrix_V_d0);

    grp_aes_expand_key58_fu_297 : component aes_expand_key58
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_expand_key58_fu_297_ap_start,
        ap_done => grp_aes_expand_key58_fu_297_ap_done,
        ap_idle => grp_aes_expand_key58_fu_297_ap_idle,
        ap_ready => grp_aes_expand_key58_fu_297_ap_ready,
        m_axi_key_V_AWVALID => grp_aes_expand_key58_fu_297_m_axi_key_V_AWVALID,
        m_axi_key_V_AWREADY => ap_const_logic_0,
        m_axi_key_V_AWADDR => grp_aes_expand_key58_fu_297_m_axi_key_V_AWADDR,
        m_axi_key_V_AWID => grp_aes_expand_key58_fu_297_m_axi_key_V_AWID,
        m_axi_key_V_AWLEN => grp_aes_expand_key58_fu_297_m_axi_key_V_AWLEN,
        m_axi_key_V_AWSIZE => grp_aes_expand_key58_fu_297_m_axi_key_V_AWSIZE,
        m_axi_key_V_AWBURST => grp_aes_expand_key58_fu_297_m_axi_key_V_AWBURST,
        m_axi_key_V_AWLOCK => grp_aes_expand_key58_fu_297_m_axi_key_V_AWLOCK,
        m_axi_key_V_AWCACHE => grp_aes_expand_key58_fu_297_m_axi_key_V_AWCACHE,
        m_axi_key_V_AWPROT => grp_aes_expand_key58_fu_297_m_axi_key_V_AWPROT,
        m_axi_key_V_AWQOS => grp_aes_expand_key58_fu_297_m_axi_key_V_AWQOS,
        m_axi_key_V_AWREGION => grp_aes_expand_key58_fu_297_m_axi_key_V_AWREGION,
        m_axi_key_V_AWUSER => grp_aes_expand_key58_fu_297_m_axi_key_V_AWUSER,
        m_axi_key_V_WVALID => grp_aes_expand_key58_fu_297_m_axi_key_V_WVALID,
        m_axi_key_V_WREADY => ap_const_logic_0,
        m_axi_key_V_WDATA => grp_aes_expand_key58_fu_297_m_axi_key_V_WDATA,
        m_axi_key_V_WSTRB => grp_aes_expand_key58_fu_297_m_axi_key_V_WSTRB,
        m_axi_key_V_WLAST => grp_aes_expand_key58_fu_297_m_axi_key_V_WLAST,
        m_axi_key_V_WID => grp_aes_expand_key58_fu_297_m_axi_key_V_WID,
        m_axi_key_V_WUSER => grp_aes_expand_key58_fu_297_m_axi_key_V_WUSER,
        m_axi_key_V_ARVALID => grp_aes_expand_key58_fu_297_m_axi_key_V_ARVALID,
        m_axi_key_V_ARREADY => data0_ARREADY,
        m_axi_key_V_ARADDR => grp_aes_expand_key58_fu_297_m_axi_key_V_ARADDR,
        m_axi_key_V_ARID => grp_aes_expand_key58_fu_297_m_axi_key_V_ARID,
        m_axi_key_V_ARLEN => grp_aes_expand_key58_fu_297_m_axi_key_V_ARLEN,
        m_axi_key_V_ARSIZE => grp_aes_expand_key58_fu_297_m_axi_key_V_ARSIZE,
        m_axi_key_V_ARBURST => grp_aes_expand_key58_fu_297_m_axi_key_V_ARBURST,
        m_axi_key_V_ARLOCK => grp_aes_expand_key58_fu_297_m_axi_key_V_ARLOCK,
        m_axi_key_V_ARCACHE => grp_aes_expand_key58_fu_297_m_axi_key_V_ARCACHE,
        m_axi_key_V_ARPROT => grp_aes_expand_key58_fu_297_m_axi_key_V_ARPROT,
        m_axi_key_V_ARQOS => grp_aes_expand_key58_fu_297_m_axi_key_V_ARQOS,
        m_axi_key_V_ARREGION => grp_aes_expand_key58_fu_297_m_axi_key_V_ARREGION,
        m_axi_key_V_ARUSER => grp_aes_expand_key58_fu_297_m_axi_key_V_ARUSER,
        m_axi_key_V_RVALID => data0_RVALID,
        m_axi_key_V_RREADY => grp_aes_expand_key58_fu_297_m_axi_key_V_RREADY,
        m_axi_key_V_RDATA => data0_RDATA,
        m_axi_key_V_RLAST => data0_RLAST,
        m_axi_key_V_RID => data0_RID,
        m_axi_key_V_RUSER => data0_RUSER,
        m_axi_key_V_RRESP => data0_RRESP,
        m_axi_key_V_BVALID => ap_const_logic_0,
        m_axi_key_V_BREADY => grp_aes_expand_key58_fu_297_m_axi_key_V_BREADY,
        m_axi_key_V_BRESP => ap_const_lv2_0,
        m_axi_key_V_BID => ap_const_lv1_0,
        m_axi_key_V_BUSER => ap_const_lv1_0,
        key_V_offset => key_V1_reg_493,
        m_axi_s_box_V_AWVALID => grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWVALID,
        m_axi_s_box_V_AWREADY => ap_const_logic_0,
        m_axi_s_box_V_AWADDR => grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWADDR,
        m_axi_s_box_V_AWID => grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWID,
        m_axi_s_box_V_AWLEN => grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWLEN,
        m_axi_s_box_V_AWSIZE => grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWSIZE,
        m_axi_s_box_V_AWBURST => grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWBURST,
        m_axi_s_box_V_AWLOCK => grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWLOCK,
        m_axi_s_box_V_AWCACHE => grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWCACHE,
        m_axi_s_box_V_AWPROT => grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWPROT,
        m_axi_s_box_V_AWQOS => grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWQOS,
        m_axi_s_box_V_AWREGION => grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWREGION,
        m_axi_s_box_V_AWUSER => grp_aes_expand_key58_fu_297_m_axi_s_box_V_AWUSER,
        m_axi_s_box_V_WVALID => grp_aes_expand_key58_fu_297_m_axi_s_box_V_WVALID,
        m_axi_s_box_V_WREADY => ap_const_logic_0,
        m_axi_s_box_V_WDATA => grp_aes_expand_key58_fu_297_m_axi_s_box_V_WDATA,
        m_axi_s_box_V_WSTRB => grp_aes_expand_key58_fu_297_m_axi_s_box_V_WSTRB,
        m_axi_s_box_V_WLAST => grp_aes_expand_key58_fu_297_m_axi_s_box_V_WLAST,
        m_axi_s_box_V_WID => grp_aes_expand_key58_fu_297_m_axi_s_box_V_WID,
        m_axi_s_box_V_WUSER => grp_aes_expand_key58_fu_297_m_axi_s_box_V_WUSER,
        m_axi_s_box_V_ARVALID => grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARVALID,
        m_axi_s_box_V_ARREADY => data4_ARREADY,
        m_axi_s_box_V_ARADDR => grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARADDR,
        m_axi_s_box_V_ARID => grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARID,
        m_axi_s_box_V_ARLEN => grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARLEN,
        m_axi_s_box_V_ARSIZE => grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARSIZE,
        m_axi_s_box_V_ARBURST => grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARBURST,
        m_axi_s_box_V_ARLOCK => grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARLOCK,
        m_axi_s_box_V_ARCACHE => grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARCACHE,
        m_axi_s_box_V_ARPROT => grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARPROT,
        m_axi_s_box_V_ARQOS => grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARQOS,
        m_axi_s_box_V_ARREGION => grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARREGION,
        m_axi_s_box_V_ARUSER => grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARUSER,
        m_axi_s_box_V_RVALID => data4_RVALID,
        m_axi_s_box_V_RREADY => grp_aes_expand_key58_fu_297_m_axi_s_box_V_RREADY,
        m_axi_s_box_V_RDATA => data4_RDATA,
        m_axi_s_box_V_RLAST => data4_RLAST,
        m_axi_s_box_V_RID => data4_RID,
        m_axi_s_box_V_RUSER => data4_RUSER,
        m_axi_s_box_V_RRESP => data4_RRESP,
        m_axi_s_box_V_BVALID => ap_const_logic_0,
        m_axi_s_box_V_BREADY => grp_aes_expand_key58_fu_297_m_axi_s_box_V_BREADY,
        m_axi_s_box_V_BRESP => ap_const_lv2_0,
        m_axi_s_box_V_BID => ap_const_lv1_0,
        m_axi_s_box_V_BUSER => ap_const_lv1_0,
        s_box_V_offset => s_boxes_V_read_reg_441,
        m_axi_rcon_V_AWVALID => grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWVALID,
        m_axi_rcon_V_AWREADY => ap_const_logic_0,
        m_axi_rcon_V_AWADDR => grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWADDR,
        m_axi_rcon_V_AWID => grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWID,
        m_axi_rcon_V_AWLEN => grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWLEN,
        m_axi_rcon_V_AWSIZE => grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWSIZE,
        m_axi_rcon_V_AWBURST => grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWBURST,
        m_axi_rcon_V_AWLOCK => grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWLOCK,
        m_axi_rcon_V_AWCACHE => grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWCACHE,
        m_axi_rcon_V_AWPROT => grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWPROT,
        m_axi_rcon_V_AWQOS => grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWQOS,
        m_axi_rcon_V_AWREGION => grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWREGION,
        m_axi_rcon_V_AWUSER => grp_aes_expand_key58_fu_297_m_axi_rcon_V_AWUSER,
        m_axi_rcon_V_WVALID => grp_aes_expand_key58_fu_297_m_axi_rcon_V_WVALID,
        m_axi_rcon_V_WREADY => ap_const_logic_0,
        m_axi_rcon_V_WDATA => grp_aes_expand_key58_fu_297_m_axi_rcon_V_WDATA,
        m_axi_rcon_V_WSTRB => grp_aes_expand_key58_fu_297_m_axi_rcon_V_WSTRB,
        m_axi_rcon_V_WLAST => grp_aes_expand_key58_fu_297_m_axi_rcon_V_WLAST,
        m_axi_rcon_V_WID => grp_aes_expand_key58_fu_297_m_axi_rcon_V_WID,
        m_axi_rcon_V_WUSER => grp_aes_expand_key58_fu_297_m_axi_rcon_V_WUSER,
        m_axi_rcon_V_ARVALID => grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARVALID,
        m_axi_rcon_V_ARREADY => data2_ARREADY,
        m_axi_rcon_V_ARADDR => grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARADDR,
        m_axi_rcon_V_ARID => grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARID,
        m_axi_rcon_V_ARLEN => grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARLEN,
        m_axi_rcon_V_ARSIZE => grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARSIZE,
        m_axi_rcon_V_ARBURST => grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARBURST,
        m_axi_rcon_V_ARLOCK => grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARLOCK,
        m_axi_rcon_V_ARCACHE => grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARCACHE,
        m_axi_rcon_V_ARPROT => grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARPROT,
        m_axi_rcon_V_ARQOS => grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARQOS,
        m_axi_rcon_V_ARREGION => grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARREGION,
        m_axi_rcon_V_ARUSER => grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARUSER,
        m_axi_rcon_V_RVALID => data2_RVALID,
        m_axi_rcon_V_RREADY => grp_aes_expand_key58_fu_297_m_axi_rcon_V_RREADY,
        m_axi_rcon_V_RDATA => data2_RDATA,
        m_axi_rcon_V_RLAST => data2_RLAST,
        m_axi_rcon_V_RID => data2_RID,
        m_axi_rcon_V_RUSER => data2_RUSER,
        m_axi_rcon_V_RRESP => data2_RRESP,
        m_axi_rcon_V_BVALID => ap_const_logic_0,
        m_axi_rcon_V_BREADY => grp_aes_expand_key58_fu_297_m_axi_rcon_V_BREADY,
        m_axi_rcon_V_BRESP => ap_const_lv2_0,
        m_axi_rcon_V_BID => ap_const_lv1_0,
        m_axi_rcon_V_BUSER => ap_const_lv1_0,
        rcon_V_offset => rcon_V1_reg_465,
        expanded_key_matrix_V_address0 => grp_aes_expand_key58_fu_297_expanded_key_matrix_V_address0,
        expanded_key_matrix_V_ce0 => grp_aes_expand_key58_fu_297_expanded_key_matrix_V_ce0,
        expanded_key_matrix_V_we0 => grp_aes_expand_key58_fu_297_expanded_key_matrix_V_we0,
        expanded_key_matrix_V_d0 => grp_aes_expand_key58_fu_297_expanded_key_matrix_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_expand_key58_fu_297_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_expand_key58_fu_297_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_aes_expand_key58_fu_297_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_expand_key58_fu_297_ap_ready = ap_const_logic_1)) then 
                    grp_aes_expand_key58_fu_297_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_expand_key_fu_283_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_expand_key_fu_283_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_aes_expand_key_fu_283_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_expand_key_fu_283_ap_ready = ap_const_logic_1)) then 
                    grp_aes_expand_key_fu_283_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_process_1_fu_267_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_process_1_fu_267_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_aes_process_1_fu_267_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_process_1_fu_267_ap_ready = ap_const_logic_1)) then 
                    grp_aes_process_1_fu_267_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_xts_aes_process_data_fu_246_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_xts_aes_process_data_fu_246_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_xts_aes_process_data_fu_246_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xts_aes_process_data_fu_246_ap_ready = ap_const_logic_1)) then 
                    grp_xts_aes_process_data_fu_246_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    data_ret_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_0_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln343_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_0_reg_224 <= i_reg_502;
            elsif ((not(((data3_AWREADY = ap_const_logic_0) or (grp_xts_aes_process_data_fu_246_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_0_reg_224 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln341_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                j_0_reg_235 <= ap_const_lv5_0;
            elsif (((data3_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                j_0_reg_235 <= j_reg_515;
            end if; 
        end if;
    end process;

    key_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    mix_column_constant_matrices_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    mode_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    multiplication_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    rcon_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    s_boxes_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    text_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    text_len_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    tweak_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    data3_addr_reg_459(30 downto 0) <= empty_fu_321_p1(32 - 1 downto 0)(30 downto 0);
                key_V1_reg_493 <= key_V_0_data_reg(31 downto 1);
                mix_column_constant_s_reg_477 <= mix_column_constant_matrices_V_0_data_reg(31 downto 1);
                mode_V_read_reg_454 <= mode_V_0_data_reg;
                multiplication_V1_reg_471 <= multiplication_V_0_data_reg(31 downto 1);
                rcon_V1_reg_465 <= rcon_V_0_data_reg(31 downto 3);
                s_boxes_V_read_reg_441 <= s_boxes_V_0_data_reg;
                text_V5_reg_483 <= text_V_0_data_reg(31 downto 3);
                text_len_V_read_reg_449 <= text_len_V_0_data_reg;
                tweak_V3_reg_488 <= tweak_V_0_data_reg(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (data_ret_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (data_ret_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (data_ret_V_0_vld_reg = ap_const_logic_1)))) then
                data_ret_V_0_data_reg <= data_ret_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_reg_502 <= i_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                j_reg_515 <= j_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (key_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (key_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (key_V_0_vld_reg = ap_const_logic_1)))) then
                key_V_0_data_reg <= key_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (mix_column_constant_matrices_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (mix_column_constant_matrices_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (mix_column_constant_matrices_V_0_vld_reg = ap_const_logic_1)))) then
                mix_column_constant_matrices_V_0_data_reg <= mix_column_constant_matrices_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (mode_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (mode_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (mode_V_0_vld_reg = ap_const_logic_1)))) then
                mode_V_0_data_reg <= mode_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (multiplication_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (multiplication_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (multiplication_V_0_vld_reg = ap_const_logic_1)))) then
                multiplication_V_0_data_reg <= multiplication_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                processed_data_load_reg_525 <= processed_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (rcon_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (rcon_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (rcon_V_0_vld_reg = ap_const_logic_1)))) then
                rcon_V_0_data_reg <= rcon_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (s_boxes_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (s_boxes_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (s_boxes_V_0_vld_reg = ap_const_logic_1)))) then
                s_boxes_V_0_data_reg <= s_boxes_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (text_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (text_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (text_V_0_vld_reg = ap_const_logic_1)))) then
                text_V_0_data_reg <= text_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (text_len_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (text_len_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (text_len_V_0_vld_reg = ap_const_logic_1)))) then
                text_len_V_0_data_reg <= text_len_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (tweak_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (tweak_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (tweak_V_0_vld_reg = ap_const_logic_1)))) then
                tweak_V_0_data_reg <= tweak_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln341_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    zext_ln343_reg_507(10 downto 4) <= zext_ln343_fu_411_p1(10 downto 4);
            end if;
        end if;
    end process;
    data3_addr_reg_459(31) <= '0';
    zext_ln343_reg_507(3 downto 0) <= "0000";
    zext_ln343_reg_507(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, data3_AWREADY, data3_WREADY, data3_BVALID, ap_CS_fsm_state11, icmp_ln341_fu_391_p2, ap_CS_fsm_state12, icmp_ln343_fu_415_p2, grp_xts_aes_process_data_fu_246_ap_done, grp_aes_process_1_fu_267_ap_done, grp_aes_expand_key_fu_283_ap_done, grp_aes_expand_key58_fu_297_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_aes_expand_key58_fu_297_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_aes_expand_key_fu_283_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_aes_process_1_fu_267_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((data3_AWREADY = ap_const_logic_0) or (grp_xts_aes_process_data_fu_246_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln341_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln343_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((data3_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln180_fu_431_p2 <= std_logic_vector(unsigned(zext_ln343_reg_507) + unsigned(zext_ln180_fu_427_p1));

    aes_expanded_key2_V_address0_assign_proc : process(grp_aes_process_1_fu_267_expanded_key_V_address0, grp_aes_expand_key_fu_283_expanded_key_matrix_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            aes_expanded_key2_V_address0 <= grp_aes_expand_key_fu_283_expanded_key_matrix_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            aes_expanded_key2_V_address0 <= grp_aes_process_1_fu_267_expanded_key_V_address0;
        else 
            aes_expanded_key2_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    aes_expanded_key2_V_ce0_assign_proc : process(grp_aes_process_1_fu_267_expanded_key_V_ce0, grp_aes_expand_key_fu_283_expanded_key_matrix_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            aes_expanded_key2_V_ce0 <= grp_aes_expand_key_fu_283_expanded_key_matrix_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            aes_expanded_key2_V_ce0 <= grp_aes_process_1_fu_267_expanded_key_V_ce0;
        else 
            aes_expanded_key2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aes_expanded_key2_V_we0_assign_proc : process(grp_aes_expand_key_fu_283_expanded_key_matrix_V_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            aes_expanded_key2_V_we0 <= grp_aes_expand_key_fu_283_expanded_key_matrix_V_we0;
        else 
            aes_expanded_key2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    aes_expanded_key_V_address0_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_expanded_key_V_address0, grp_aes_expand_key58_fu_297_expanded_key_matrix_V_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            aes_expanded_key_V_address0 <= grp_aes_expand_key58_fu_297_expanded_key_matrix_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aes_expanded_key_V_address0 <= grp_xts_aes_process_data_fu_246_expanded_key_V_address0;
        else 
            aes_expanded_key_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    aes_expanded_key_V_ce0_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_expanded_key_V_ce0, grp_aes_expand_key58_fu_297_expanded_key_matrix_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            aes_expanded_key_V_ce0 <= grp_aes_expand_key58_fu_297_expanded_key_matrix_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aes_expanded_key_V_ce0 <= grp_xts_aes_process_data_fu_246_expanded_key_V_ce0;
        else 
            aes_expanded_key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aes_expanded_key_V_we0_assign_proc : process(grp_aes_expand_key58_fu_297_expanded_key_matrix_V_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            aes_expanded_key_V_we0 <= grp_aes_expand_key58_fu_297_expanded_key_matrix_V_we0;
        else 
            aes_expanded_key_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    aes_tweak_V_address0_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_tweak_V_address0, grp_aes_process_1_fu_267_sequence_out_V_address0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            aes_tweak_V_address0 <= grp_aes_process_1_fu_267_sequence_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aes_tweak_V_address0 <= grp_xts_aes_process_data_fu_246_tweak_V_address0;
        else 
            aes_tweak_V_address0 <= "XXXX";
        end if; 
    end process;


    aes_tweak_V_ce0_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_tweak_V_ce0, grp_aes_process_1_fu_267_sequence_out_V_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            aes_tweak_V_ce0 <= grp_aes_process_1_fu_267_sequence_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aes_tweak_V_ce0 <= grp_xts_aes_process_data_fu_246_tweak_V_ce0;
        else 
            aes_tweak_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aes_tweak_V_d0_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_tweak_V_d0, grp_aes_process_1_fu_267_sequence_out_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            aes_tweak_V_d0 <= grp_aes_process_1_fu_267_sequence_out_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aes_tweak_V_d0 <= grp_xts_aes_process_data_fu_246_tweak_V_d0;
        else 
            aes_tweak_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    aes_tweak_V_we0_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_tweak_V_we0, grp_aes_process_1_fu_267_sequence_out_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            aes_tweak_V_we0 <= grp_aes_process_1_fu_267_sequence_out_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aes_tweak_V_we0 <= grp_xts_aes_process_data_fu_246_tweak_V_we0;
        else 
            aes_tweak_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state18, data3_BVALID)
    begin
        if (((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18, data3_BVALID)
    begin
        if (((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    data0_ARADDR_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARADDR, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARADDR, grp_aes_expand_key_fu_283_m_axi_key_V_ARADDR, grp_aes_expand_key58_fu_297_m_axi_key_V_ARADDR, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_ARADDR <= grp_aes_expand_key58_fu_297_m_axi_key_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_ARADDR <= grp_aes_expand_key_fu_283_m_axi_key_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_ARADDR <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_ARADDR <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARADDR;
        else 
            data0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data0_ARBURST_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARBURST, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARBURST, grp_aes_expand_key_fu_283_m_axi_key_V_ARBURST, grp_aes_expand_key58_fu_297_m_axi_key_V_ARBURST, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_ARBURST <= grp_aes_expand_key58_fu_297_m_axi_key_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_ARBURST <= grp_aes_expand_key_fu_283_m_axi_key_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_ARBURST <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_ARBURST <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARBURST;
        else 
            data0_ARBURST <= "XX";
        end if; 
    end process;


    data0_ARCACHE_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARCACHE, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARCACHE, grp_aes_expand_key_fu_283_m_axi_key_V_ARCACHE, grp_aes_expand_key58_fu_297_m_axi_key_V_ARCACHE, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_ARCACHE <= grp_aes_expand_key58_fu_297_m_axi_key_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_ARCACHE <= grp_aes_expand_key_fu_283_m_axi_key_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_ARCACHE <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_ARCACHE <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARCACHE;
        else 
            data0_ARCACHE <= "XXXX";
        end if; 
    end process;


    data0_ARID_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARID, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARID, grp_aes_expand_key_fu_283_m_axi_key_V_ARID, grp_aes_expand_key58_fu_297_m_axi_key_V_ARID, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_ARID <= grp_aes_expand_key58_fu_297_m_axi_key_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_ARID <= grp_aes_expand_key_fu_283_m_axi_key_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_ARID <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_ARID <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARID;
        else 
            data0_ARID <= "X";
        end if; 
    end process;


    data0_ARLEN_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARLEN, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARLEN, grp_aes_expand_key_fu_283_m_axi_key_V_ARLEN, grp_aes_expand_key58_fu_297_m_axi_key_V_ARLEN, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_ARLEN <= grp_aes_expand_key58_fu_297_m_axi_key_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_ARLEN <= grp_aes_expand_key_fu_283_m_axi_key_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_ARLEN <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_ARLEN <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARLEN;
        else 
            data0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data0_ARLOCK_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARLOCK, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARLOCK, grp_aes_expand_key_fu_283_m_axi_key_V_ARLOCK, grp_aes_expand_key58_fu_297_m_axi_key_V_ARLOCK, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_ARLOCK <= grp_aes_expand_key58_fu_297_m_axi_key_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_ARLOCK <= grp_aes_expand_key_fu_283_m_axi_key_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_ARLOCK <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_ARLOCK <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARLOCK;
        else 
            data0_ARLOCK <= "XX";
        end if; 
    end process;


    data0_ARPROT_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARPROT, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARPROT, grp_aes_expand_key_fu_283_m_axi_key_V_ARPROT, grp_aes_expand_key58_fu_297_m_axi_key_V_ARPROT, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_ARPROT <= grp_aes_expand_key58_fu_297_m_axi_key_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_ARPROT <= grp_aes_expand_key_fu_283_m_axi_key_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_ARPROT <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_ARPROT <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARPROT;
        else 
            data0_ARPROT <= "XXX";
        end if; 
    end process;


    data0_ARQOS_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARQOS, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARQOS, grp_aes_expand_key_fu_283_m_axi_key_V_ARQOS, grp_aes_expand_key58_fu_297_m_axi_key_V_ARQOS, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_ARQOS <= grp_aes_expand_key58_fu_297_m_axi_key_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_ARQOS <= grp_aes_expand_key_fu_283_m_axi_key_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_ARQOS <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_ARQOS <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARQOS;
        else 
            data0_ARQOS <= "XXXX";
        end if; 
    end process;


    data0_ARREGION_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARREGION, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARREGION, grp_aes_expand_key_fu_283_m_axi_key_V_ARREGION, grp_aes_expand_key58_fu_297_m_axi_key_V_ARREGION, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_ARREGION <= grp_aes_expand_key58_fu_297_m_axi_key_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_ARREGION <= grp_aes_expand_key_fu_283_m_axi_key_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_ARREGION <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_ARREGION <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARREGION;
        else 
            data0_ARREGION <= "XXXX";
        end if; 
    end process;


    data0_ARSIZE_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARSIZE, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARSIZE, grp_aes_expand_key_fu_283_m_axi_key_V_ARSIZE, grp_aes_expand_key58_fu_297_m_axi_key_V_ARSIZE, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_ARSIZE <= grp_aes_expand_key58_fu_297_m_axi_key_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_ARSIZE <= grp_aes_expand_key_fu_283_m_axi_key_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_ARSIZE <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_ARSIZE <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARSIZE;
        else 
            data0_ARSIZE <= "XXX";
        end if; 
    end process;


    data0_ARUSER_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARUSER, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARUSER, grp_aes_expand_key_fu_283_m_axi_key_V_ARUSER, grp_aes_expand_key58_fu_297_m_axi_key_V_ARUSER, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_ARUSER <= grp_aes_expand_key58_fu_297_m_axi_key_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_ARUSER <= grp_aes_expand_key_fu_283_m_axi_key_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_ARUSER <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_ARUSER <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARUSER;
        else 
            data0_ARUSER <= "X";
        end if; 
    end process;


    data0_ARVALID_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARVALID, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARVALID, grp_aes_expand_key_fu_283_m_axi_key_V_ARVALID, grp_aes_expand_key58_fu_297_m_axi_key_V_ARVALID, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_ARVALID <= grp_aes_expand_key58_fu_297_m_axi_key_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_ARVALID <= grp_aes_expand_key_fu_283_m_axi_key_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_ARVALID <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_ARVALID <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_ARVALID;
        else 
            data0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data0_RREADY_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_RREADY, grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_RREADY, grp_aes_expand_key_fu_283_m_axi_key_V_RREADY, grp_aes_expand_key58_fu_297_m_axi_key_V_RREADY, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data0_RREADY <= grp_aes_expand_key58_fu_297_m_axi_key_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data0_RREADY <= grp_aes_expand_key_fu_283_m_axi_key_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data0_RREADY <= grp_aes_process_1_fu_267_m_axi_mix_column_constant_matrices_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data0_RREADY <= grp_xts_aes_process_data_fu_246_m_axi_mix_column_constant_matrices_V_RREADY;
        else 
            data0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data1_ARADDR_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARADDR, grp_aes_process_1_fu_267_m_axi_text_V_ARADDR, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_ARADDR <= grp_aes_process_1_fu_267_m_axi_text_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_ARADDR <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARADDR;
        else 
            data1_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data1_ARBURST_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARBURST, grp_aes_process_1_fu_267_m_axi_text_V_ARBURST, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_ARBURST <= grp_aes_process_1_fu_267_m_axi_text_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_ARBURST <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARBURST;
        else 
            data1_ARBURST <= "XX";
        end if; 
    end process;


    data1_ARCACHE_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARCACHE, grp_aes_process_1_fu_267_m_axi_text_V_ARCACHE, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_ARCACHE <= grp_aes_process_1_fu_267_m_axi_text_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_ARCACHE <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARCACHE;
        else 
            data1_ARCACHE <= "XXXX";
        end if; 
    end process;


    data1_ARID_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARID, grp_aes_process_1_fu_267_m_axi_text_V_ARID, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_ARID <= grp_aes_process_1_fu_267_m_axi_text_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_ARID <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARID;
        else 
            data1_ARID <= "X";
        end if; 
    end process;


    data1_ARLEN_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARLEN, grp_aes_process_1_fu_267_m_axi_text_V_ARLEN, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_ARLEN <= grp_aes_process_1_fu_267_m_axi_text_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_ARLEN <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARLEN;
        else 
            data1_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data1_ARLOCK_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARLOCK, grp_aes_process_1_fu_267_m_axi_text_V_ARLOCK, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_ARLOCK <= grp_aes_process_1_fu_267_m_axi_text_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_ARLOCK <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARLOCK;
        else 
            data1_ARLOCK <= "XX";
        end if; 
    end process;


    data1_ARPROT_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARPROT, grp_aes_process_1_fu_267_m_axi_text_V_ARPROT, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_ARPROT <= grp_aes_process_1_fu_267_m_axi_text_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_ARPROT <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARPROT;
        else 
            data1_ARPROT <= "XXX";
        end if; 
    end process;


    data1_ARQOS_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARQOS, grp_aes_process_1_fu_267_m_axi_text_V_ARQOS, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_ARQOS <= grp_aes_process_1_fu_267_m_axi_text_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_ARQOS <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARQOS;
        else 
            data1_ARQOS <= "XXXX";
        end if; 
    end process;


    data1_ARREGION_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARREGION, grp_aes_process_1_fu_267_m_axi_text_V_ARREGION, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_ARREGION <= grp_aes_process_1_fu_267_m_axi_text_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_ARREGION <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARREGION;
        else 
            data1_ARREGION <= "XXXX";
        end if; 
    end process;


    data1_ARSIZE_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARSIZE, grp_aes_process_1_fu_267_m_axi_text_V_ARSIZE, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_ARSIZE <= grp_aes_process_1_fu_267_m_axi_text_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_ARSIZE <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARSIZE;
        else 
            data1_ARSIZE <= "XXX";
        end if; 
    end process;


    data1_ARUSER_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARUSER, grp_aes_process_1_fu_267_m_axi_text_V_ARUSER, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_ARUSER <= grp_aes_process_1_fu_267_m_axi_text_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_ARUSER <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARUSER;
        else 
            data1_ARUSER <= "X";
        end if; 
    end process;


    data1_ARVALID_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARVALID, grp_aes_process_1_fu_267_m_axi_text_V_ARVALID, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_ARVALID <= grp_aes_process_1_fu_267_m_axi_text_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_ARVALID <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_ARVALID;
        else 
            data1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data1_RREADY_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_RREADY, grp_aes_process_1_fu_267_m_axi_text_V_RREADY, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data1_RREADY <= grp_aes_process_1_fu_267_m_axi_text_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data1_RREADY <= grp_xts_aes_process_data_fu_246_m_axi_multiplication_V_RREADY;
        else 
            data1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data2_ARADDR_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_ARADDR, grp_aes_expand_key_fu_283_m_axi_rcon_V_ARADDR, grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARADDR, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARADDR <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_ARADDR <= grp_aes_expand_key_fu_283_m_axi_rcon_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_ARADDR <= grp_xts_aes_process_data_fu_246_m_axi_data_V_ARADDR;
        else 
            data2_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data2_ARBURST_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_ARBURST, grp_aes_expand_key_fu_283_m_axi_rcon_V_ARBURST, grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARBURST, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARBURST <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_ARBURST <= grp_aes_expand_key_fu_283_m_axi_rcon_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_ARBURST <= grp_xts_aes_process_data_fu_246_m_axi_data_V_ARBURST;
        else 
            data2_ARBURST <= "XX";
        end if; 
    end process;


    data2_ARCACHE_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_ARCACHE, grp_aes_expand_key_fu_283_m_axi_rcon_V_ARCACHE, grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARCACHE, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARCACHE <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_ARCACHE <= grp_aes_expand_key_fu_283_m_axi_rcon_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_ARCACHE <= grp_xts_aes_process_data_fu_246_m_axi_data_V_ARCACHE;
        else 
            data2_ARCACHE <= "XXXX";
        end if; 
    end process;


    data2_ARID_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_ARID, grp_aes_expand_key_fu_283_m_axi_rcon_V_ARID, grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARID, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARID <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_ARID <= grp_aes_expand_key_fu_283_m_axi_rcon_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_ARID <= grp_xts_aes_process_data_fu_246_m_axi_data_V_ARID;
        else 
            data2_ARID <= "X";
        end if; 
    end process;


    data2_ARLEN_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_ARLEN, grp_aes_expand_key_fu_283_m_axi_rcon_V_ARLEN, grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARLEN, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARLEN <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_ARLEN <= grp_aes_expand_key_fu_283_m_axi_rcon_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_ARLEN <= grp_xts_aes_process_data_fu_246_m_axi_data_V_ARLEN;
        else 
            data2_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data2_ARLOCK_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_ARLOCK, grp_aes_expand_key_fu_283_m_axi_rcon_V_ARLOCK, grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARLOCK, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARLOCK <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_ARLOCK <= grp_aes_expand_key_fu_283_m_axi_rcon_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_ARLOCK <= grp_xts_aes_process_data_fu_246_m_axi_data_V_ARLOCK;
        else 
            data2_ARLOCK <= "XX";
        end if; 
    end process;


    data2_ARPROT_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_ARPROT, grp_aes_expand_key_fu_283_m_axi_rcon_V_ARPROT, grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARPROT, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARPROT <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_ARPROT <= grp_aes_expand_key_fu_283_m_axi_rcon_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_ARPROT <= grp_xts_aes_process_data_fu_246_m_axi_data_V_ARPROT;
        else 
            data2_ARPROT <= "XXX";
        end if; 
    end process;


    data2_ARQOS_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_ARQOS, grp_aes_expand_key_fu_283_m_axi_rcon_V_ARQOS, grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARQOS, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARQOS <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_ARQOS <= grp_aes_expand_key_fu_283_m_axi_rcon_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_ARQOS <= grp_xts_aes_process_data_fu_246_m_axi_data_V_ARQOS;
        else 
            data2_ARQOS <= "XXXX";
        end if; 
    end process;


    data2_ARREGION_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_ARREGION, grp_aes_expand_key_fu_283_m_axi_rcon_V_ARREGION, grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARREGION, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARREGION <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_ARREGION <= grp_aes_expand_key_fu_283_m_axi_rcon_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_ARREGION <= grp_xts_aes_process_data_fu_246_m_axi_data_V_ARREGION;
        else 
            data2_ARREGION <= "XXXX";
        end if; 
    end process;


    data2_ARSIZE_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_ARSIZE, grp_aes_expand_key_fu_283_m_axi_rcon_V_ARSIZE, grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARSIZE, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARSIZE <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_ARSIZE <= grp_aes_expand_key_fu_283_m_axi_rcon_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_ARSIZE <= grp_xts_aes_process_data_fu_246_m_axi_data_V_ARSIZE;
        else 
            data2_ARSIZE <= "XXX";
        end if; 
    end process;


    data2_ARUSER_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_ARUSER, grp_aes_expand_key_fu_283_m_axi_rcon_V_ARUSER, grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARUSER, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARUSER <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_ARUSER <= grp_aes_expand_key_fu_283_m_axi_rcon_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_ARUSER <= grp_xts_aes_process_data_fu_246_m_axi_data_V_ARUSER;
        else 
            data2_ARUSER <= "X";
        end if; 
    end process;


    data2_ARVALID_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_ARVALID, grp_aes_expand_key_fu_283_m_axi_rcon_V_ARVALID, grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARVALID, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_ARVALID <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_ARVALID <= grp_aes_expand_key_fu_283_m_axi_rcon_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_ARVALID <= grp_xts_aes_process_data_fu_246_m_axi_data_V_ARVALID;
        else 
            data2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data2_RREADY_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_data_V_RREADY, grp_aes_expand_key_fu_283_m_axi_rcon_V_RREADY, grp_aes_expand_key58_fu_297_m_axi_rcon_V_RREADY, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data2_RREADY <= grp_aes_expand_key58_fu_297_m_axi_rcon_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data2_RREADY <= grp_aes_expand_key_fu_283_m_axi_rcon_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data2_RREADY <= grp_xts_aes_process_data_fu_246_m_axi_data_V_RREADY;
        else 
            data2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data3_AWVALID_assign_proc : process(ap_CS_fsm_state10, data3_AWREADY, grp_xts_aes_process_data_fu_246_ap_done)
    begin
        if ((not(((data3_AWREADY = ap_const_logic_0) or (grp_xts_aes_process_data_fu_246_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            data3_AWVALID <= ap_const_logic_1;
        else 
            data3_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    data3_BREADY_assign_proc : process(ap_CS_fsm_state18, data3_BVALID)
    begin
        if (((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            data3_BREADY <= ap_const_logic_1;
        else 
            data3_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    data3_WVALID_assign_proc : process(ap_CS_fsm_state14, data3_WREADY)
    begin
        if (((data3_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            data3_WVALID <= ap_const_logic_1;
        else 
            data3_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    data3_blk_n_AW_assign_proc : process(m_axi_data3_AWREADY, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data3_blk_n_AW <= m_axi_data3_AWREADY;
        else 
            data3_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    data3_blk_n_B_assign_proc : process(m_axi_data3_BVALID, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            data3_blk_n_B <= m_axi_data3_BVALID;
        else 
            data3_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    data3_blk_n_W_assign_proc : process(m_axi_data3_WREADY, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data3_blk_n_W <= m_axi_data3_WREADY;
        else 
            data3_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    data4_ARADDR_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARADDR, grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARADDR, grp_aes_expand_key_fu_283_m_axi_s_box_V_ARADDR, grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARADDR, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_ARADDR <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_ARADDR <= grp_aes_expand_key_fu_283_m_axi_s_box_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_ARADDR <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_ARADDR <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARADDR;
        else 
            data4_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data4_ARBURST_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARBURST, grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARBURST, grp_aes_expand_key_fu_283_m_axi_s_box_V_ARBURST, grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARBURST, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_ARBURST <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_ARBURST <= grp_aes_expand_key_fu_283_m_axi_s_box_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_ARBURST <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_ARBURST <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARBURST;
        else 
            data4_ARBURST <= "XX";
        end if; 
    end process;


    data4_ARCACHE_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARCACHE, grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARCACHE, grp_aes_expand_key_fu_283_m_axi_s_box_V_ARCACHE, grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARCACHE, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_ARCACHE <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_ARCACHE <= grp_aes_expand_key_fu_283_m_axi_s_box_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_ARCACHE <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_ARCACHE <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARCACHE;
        else 
            data4_ARCACHE <= "XXXX";
        end if; 
    end process;


    data4_ARID_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARID, grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARID, grp_aes_expand_key_fu_283_m_axi_s_box_V_ARID, grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARID, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_ARID <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_ARID <= grp_aes_expand_key_fu_283_m_axi_s_box_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_ARID <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_ARID <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARID;
        else 
            data4_ARID <= "X";
        end if; 
    end process;


    data4_ARLEN_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARLEN, grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARLEN, grp_aes_expand_key_fu_283_m_axi_s_box_V_ARLEN, grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARLEN, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_ARLEN <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_ARLEN <= grp_aes_expand_key_fu_283_m_axi_s_box_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_ARLEN <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_ARLEN <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARLEN;
        else 
            data4_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data4_ARLOCK_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARLOCK, grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARLOCK, grp_aes_expand_key_fu_283_m_axi_s_box_V_ARLOCK, grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARLOCK, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_ARLOCK <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_ARLOCK <= grp_aes_expand_key_fu_283_m_axi_s_box_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_ARLOCK <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_ARLOCK <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARLOCK;
        else 
            data4_ARLOCK <= "XX";
        end if; 
    end process;


    data4_ARPROT_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARPROT, grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARPROT, grp_aes_expand_key_fu_283_m_axi_s_box_V_ARPROT, grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARPROT, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_ARPROT <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_ARPROT <= grp_aes_expand_key_fu_283_m_axi_s_box_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_ARPROT <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_ARPROT <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARPROT;
        else 
            data4_ARPROT <= "XXX";
        end if; 
    end process;


    data4_ARQOS_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARQOS, grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARQOS, grp_aes_expand_key_fu_283_m_axi_s_box_V_ARQOS, grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARQOS, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_ARQOS <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_ARQOS <= grp_aes_expand_key_fu_283_m_axi_s_box_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_ARQOS <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_ARQOS <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARQOS;
        else 
            data4_ARQOS <= "XXXX";
        end if; 
    end process;


    data4_ARREGION_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARREGION, grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARREGION, grp_aes_expand_key_fu_283_m_axi_s_box_V_ARREGION, grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARREGION, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_ARREGION <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_ARREGION <= grp_aes_expand_key_fu_283_m_axi_s_box_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_ARREGION <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_ARREGION <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARREGION;
        else 
            data4_ARREGION <= "XXXX";
        end if; 
    end process;


    data4_ARSIZE_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARSIZE, grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARSIZE, grp_aes_expand_key_fu_283_m_axi_s_box_V_ARSIZE, grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARSIZE, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_ARSIZE <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_ARSIZE <= grp_aes_expand_key_fu_283_m_axi_s_box_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_ARSIZE <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_ARSIZE <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARSIZE;
        else 
            data4_ARSIZE <= "XXX";
        end if; 
    end process;


    data4_ARUSER_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARUSER, grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARUSER, grp_aes_expand_key_fu_283_m_axi_s_box_V_ARUSER, grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARUSER, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_ARUSER <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_ARUSER <= grp_aes_expand_key_fu_283_m_axi_s_box_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_ARUSER <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_ARUSER <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARUSER;
        else 
            data4_ARUSER <= "X";
        end if; 
    end process;


    data4_ARVALID_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARVALID, grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARVALID, grp_aes_expand_key_fu_283_m_axi_s_box_V_ARVALID, grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARVALID, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_ARVALID <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_ARVALID <= grp_aes_expand_key_fu_283_m_axi_s_box_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_ARVALID <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_ARVALID <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_ARVALID;
        else 
            data4_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data4_RREADY_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_RREADY, grp_aes_process_1_fu_267_m_axi_s_boxes_V_RREADY, grp_aes_expand_key_fu_283_m_axi_s_box_V_RREADY, grp_aes_expand_key58_fu_297_m_axi_s_box_V_RREADY, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data4_RREADY <= grp_aes_expand_key58_fu_297_m_axi_s_box_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data4_RREADY <= grp_aes_expand_key_fu_283_m_axi_s_box_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data4_RREADY <= grp_aes_process_1_fu_267_m_axi_s_boxes_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data4_RREADY <= grp_xts_aes_process_data_fu_246_m_axi_s_boxes_V_RREADY;
        else 
            data4_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    data_ret_V1_fu_311_p4 <= data_ret_V_0_data_reg(31 downto 1);

    data_ret_V_0_ack_out_assign_proc : process(ap_CS_fsm_state18, data3_BVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            data_ret_V_0_ack_out <= ap_const_logic_1;
        else 
            data_ret_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_ret_V1_fu_311_p4),64));
    grp_aes_expand_key58_fu_297_ap_start <= grp_aes_expand_key58_fu_297_ap_start_reg;
    grp_aes_expand_key_fu_283_ap_start <= grp_aes_expand_key_fu_283_ap_start_reg;
    grp_aes_process_1_fu_267_ap_start <= grp_aes_process_1_fu_267_ap_start_reg;
    grp_xts_aes_process_data_fu_246_ap_start <= grp_xts_aes_process_data_fu_246_ap_start_reg;
    i_fu_397_p2 <= std_logic_vector(unsigned(i_0_reg_224) + unsigned(ap_const_lv7_1));
    icmp_ln341_fu_391_p2 <= "1" when (i_0_reg_224 = ap_const_lv7_40) else "0";
    icmp_ln343_fu_415_p2 <= "1" when (j_0_reg_235 = ap_const_lv5_10) else "0";
    j_fu_421_p2 <= std_logic_vector(unsigned(j_0_reg_235) + unsigned(ap_const_lv5_1));

    key_V_0_ack_out_assign_proc : process(ap_CS_fsm_state18, data3_BVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            key_V_0_ack_out <= ap_const_logic_1;
        else 
            key_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    mix_column_constant_matrices_V_0_ack_out_assign_proc : process(ap_CS_fsm_state18, data3_BVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            mix_column_constant_matrices_V_0_ack_out <= ap_const_logic_1;
        else 
            mix_column_constant_matrices_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    mode_V_0_ack_out_assign_proc : process(ap_CS_fsm_state18, data3_BVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            mode_V_0_ack_out <= ap_const_logic_1;
        else 
            mode_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    multiplication_V_0_ack_out_assign_proc : process(ap_CS_fsm_state18, data3_BVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            multiplication_V_0_ack_out <= ap_const_logic_1;
        else 
            multiplication_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    processed_data_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12, grp_xts_aes_process_data_fu_246_blocks_V_address0, zext_ln180_2_fu_436_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            processed_data_address0 <= zext_ln180_2_fu_436_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            processed_data_address0 <= grp_xts_aes_process_data_fu_246_blocks_V_address0;
        else 
            processed_data_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    processed_data_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12, grp_xts_aes_process_data_fu_246_blocks_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            processed_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            processed_data_ce0 <= grp_xts_aes_process_data_fu_246_blocks_V_ce0;
        else 
            processed_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    processed_data_we0_assign_proc : process(ap_CS_fsm_state10, grp_xts_aes_process_data_fu_246_blocks_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            processed_data_we0 <= grp_xts_aes_process_data_fu_246_blocks_V_we0;
        else 
            processed_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rcon_V_0_ack_out_assign_proc : process(ap_CS_fsm_state18, data3_BVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            rcon_V_0_ack_out <= ap_const_logic_1;
        else 
            rcon_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    s_boxes_V_0_ack_out_assign_proc : process(ap_CS_fsm_state18, data3_BVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            s_boxes_V_0_ack_out <= ap_const_logic_1;
        else 
            s_boxes_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    text_V_0_ack_out_assign_proc : process(ap_CS_fsm_state18, data3_BVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            text_V_0_ack_out <= ap_const_logic_1;
        else 
            text_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    text_len_V_0_ack_out_assign_proc : process(ap_CS_fsm_state18, data3_BVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            text_len_V_0_ack_out <= ap_const_logic_1;
        else 
            text_len_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_403_p3 <= (i_0_reg_224 & ap_const_lv4_0);

    tweak_V_0_ack_out_assign_proc : process(ap_CS_fsm_state18, data3_BVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data3_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            tweak_V_0_ack_out <= ap_const_logic_1;
        else 
            tweak_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln180_2_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_fu_431_p2),64));
    zext_ln180_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_235),12));
    zext_ln343_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_403_p3),12));
end behav;
