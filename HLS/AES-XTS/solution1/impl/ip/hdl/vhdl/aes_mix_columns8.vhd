-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_mix_columns8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_matrix_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_matrix_V_ce0 : OUT STD_LOGIC;
    state_matrix_V_we0 : OUT STD_LOGIC;
    state_matrix_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    state_matrix_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    state_matrix_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_matrix_V_ce1 : OUT STD_LOGIC;
    state_matrix_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    constant_matrix_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    constant_matrix_0_V_ce0 : OUT STD_LOGIC;
    constant_matrix_0_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    constant_matrix_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    constant_matrix_1_V_ce0 : OUT STD_LOGIC;
    constant_matrix_1_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    constant_matrix_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    constant_matrix_2_V_ce0 : OUT STD_LOGIC;
    constant_matrix_2_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    constant_matrix_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    constant_matrix_3_V_ce0 : OUT STD_LOGIC;
    constant_matrix_3_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    constant_matrix_V_offset : IN STD_LOGIC_VECTOR (1 downto 0);
    multiplication_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    multiplication_V_ce0 : OUT STD_LOGIC;
    multiplication_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    multiplication_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    multiplication_V_ce1 : OUT STD_LOGIC;
    multiplication_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_mix_columns8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv61_1 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln101_fu_221_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln101_reg_447 : STD_LOGIC_VECTOR (4 downto 0);
    signal column_index_fu_231_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal column_index_reg_455 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln103_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln180_fu_242_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln180_reg_465 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln544_fu_270_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln544_reg_485 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln544_1_fu_274_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln544_1_reg_490 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln180_fu_278_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln180_reg_495 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln544_2_fu_282_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln544_2_reg_500 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln110_fu_286_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln110_reg_505 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_index_fu_296_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_index_reg_513 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln180_fu_318_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln180_reg_518 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln110_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln719_1_fu_392_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln719_1_reg_553 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln719_2_fu_409_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln719_2_reg_558 : STD_LOGIC_VECTOR (12 downto 0);
    signal multiplication_V_loa_reg_563 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal multiplication_V_loa_1_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal column_index_0_reg_190 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_index_0_reg_202 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln106_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_18_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_253_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_19_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln78_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln719_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln719_1_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln719_2_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_22_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_213_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln180_fu_262_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_306_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln180_21_fu_314_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln180_20_fu_302_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln544_fu_323_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln78_fu_336_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln78_cast_fu_340_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln78_fu_348_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln719_fu_358_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln719_1_cast_fu_362_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln719_fu_370_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln719_1_fu_380_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln719_2_cast_fu_384_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln719_2_fu_397_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln719_3_cast_fu_401_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln719_1_fu_430_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_fu_426_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_2_fu_436_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    column_index_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln110_fu_290_p2 = ap_const_lv1_1))) then 
                column_index_0_reg_190 <= column_index_reg_455;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                column_index_0_reg_190 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    row_index_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                row_index_0_reg_202 <= row_index_reg_513;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                row_index_0_reg_202 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln180_reg_518 <= add_ln180_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln719_1_reg_553 <= add_ln719_1_fu_392_p2;
                add_ln719_2_reg_558 <= add_ln719_2_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                column_index_reg_455 <= column_index_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                multiplication_V_loa_1_reg_568 <= multiplication_V_q1;
                multiplication_V_loa_reg_563 <= multiplication_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                row_index_reg_513 <= row_index_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                trunc_ln110_reg_505 <= trunc_ln110_fu_286_p1;
                trunc_ln544_2_reg_500 <= trunc_ln544_2_fu_282_p1;
                    zext_ln180_reg_495(2 downto 0) <= zext_ln180_fu_278_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln544_1_reg_490 <= trunc_ln544_1_fu_274_p1;
                trunc_ln544_reg_485 <= trunc_ln544_fu_270_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                xor_ln180_reg_465 <= xor_ln180_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    zext_ln101_reg_447(3 downto 2) <= zext_ln101_fu_221_p1(3 downto 2);
            end if;
        end if;
    end process;
    zext_ln101_reg_447(1 downto 0) <= "00";
    zext_ln101_reg_447(4) <= '0';
    zext_ln180_reg_495(5 downto 3) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln103_fu_225_p2, ap_CS_fsm_state5, icmp_ln110_fu_290_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln103_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln110_fu_290_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln180_fu_318_p2 <= std_logic_vector(unsigned(zext_ln180_reg_495) + unsigned(zext_ln180_21_fu_314_p1));
    add_ln544_fu_323_p2 <= std_logic_vector(unsigned(zext_ln180_20_fu_302_p1) + unsigned(zext_ln101_reg_447));
    add_ln719_1_fu_392_p2 <= std_logic_vector(unsigned(trunc_ln544_2_reg_500) + unsigned(zext_ln719_2_cast_fu_384_p3));
    add_ln719_2_fu_409_p2 <= std_logic_vector(unsigned(trunc_ln110_reg_505) + unsigned(zext_ln719_3_cast_fu_401_p3));
    add_ln719_fu_370_p2 <= std_logic_vector(unsigned(trunc_ln544_1_reg_490) + unsigned(zext_ln719_1_cast_fu_362_p3));
    add_ln78_fu_348_p2 <= std_logic_vector(unsigned(trunc_ln544_reg_485) + unsigned(zext_ln78_cast_fu_340_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln103_fu_225_p2)
    begin
        if ((((icmp_ln103_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln103_fu_225_p2)
    begin
        if (((icmp_ln103_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    column_index_fu_231_p2 <= std_logic_vector(unsigned(column_index_0_reg_190) + unsigned(ap_const_lv3_1));
    constant_matrix_0_V_address0 <= zext_ln544_fu_328_p1(4 - 1 downto 0);

    constant_matrix_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            constant_matrix_0_V_ce0 <= ap_const_logic_1;
        else 
            constant_matrix_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    constant_matrix_1_V_address0 <= zext_ln544_fu_328_p1(4 - 1 downto 0);

    constant_matrix_1_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            constant_matrix_1_V_ce0 <= ap_const_logic_1;
        else 
            constant_matrix_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    constant_matrix_2_V_address0 <= zext_ln544_fu_328_p1(4 - 1 downto 0);

    constant_matrix_2_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            constant_matrix_2_V_ce0 <= ap_const_logic_1;
        else 
            constant_matrix_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    constant_matrix_3_V_address0 <= zext_ln544_fu_328_p1(4 - 1 downto 0);

    constant_matrix_3_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            constant_matrix_3_V_ce0 <= ap_const_logic_1;
        else 
            constant_matrix_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln103_fu_225_p2 <= "1" when (column_index_0_reg_190 = ap_const_lv3_4) else "0";
    icmp_ln110_fu_290_p2 <= "1" when (row_index_0_reg_202 = ap_const_lv3_4) else "0";

    multiplication_V_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, sext_ln78_fu_353_p1, sext_ln719_1_fu_414_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            multiplication_V_address0 <= sext_ln719_1_fu_414_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            multiplication_V_address0 <= sext_ln78_fu_353_p1(12 - 1 downto 0);
        else 
            multiplication_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    multiplication_V_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, sext_ln719_fu_375_p1, sext_ln719_2_fu_418_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            multiplication_V_address1 <= sext_ln719_2_fu_418_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            multiplication_V_address1 <= sext_ln719_fu_375_p1(12 - 1 downto 0);
        else 
            multiplication_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    multiplication_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            multiplication_V_ce0 <= ap_const_logic_1;
        else 
            multiplication_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    multiplication_V_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            multiplication_V_ce1 <= ap_const_logic_1;
        else 
            multiplication_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    row_index_fu_296_p2 <= std_logic_vector(unsigned(row_index_0_reg_202) + unsigned(ap_const_lv3_1));
        sext_ln180_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln180_reg_465),4));

        sext_ln719_1_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln719_1_reg_553),64));

        sext_ln719_2_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln719_2_reg_558),64));

        sext_ln719_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln719_fu_370_p2),64));

        sext_ln78_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln78_fu_348_p2),64));


    state_matrix_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, zext_ln106_fu_237_p1, tmp_s_fu_253_p3, zext_ln180_22_fu_422_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_matrix_V_address0 <= zext_ln180_22_fu_422_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_matrix_V_address0 <= tmp_s_fu_253_p3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_matrix_V_address0 <= zext_ln106_fu_237_p1(4 - 1 downto 0);
        else 
            state_matrix_V_address0 <= "XXXX";
        end if; 
    end process;


    state_matrix_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln180_18_fu_248_p1, zext_ln180_19_fu_265_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_matrix_V_address1 <= zext_ln180_19_fu_265_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_matrix_V_address1 <= zext_ln180_18_fu_248_p1(4 - 1 downto 0);
        else 
            state_matrix_V_address1 <= "XXXX";
        end if; 
    end process;


    state_matrix_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_matrix_V_ce0 <= ap_const_logic_1;
        else 
            state_matrix_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_matrix_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_matrix_V_ce1 <= ap_const_logic_1;
        else 
            state_matrix_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_matrix_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_2_fu_436_p2),16));

    state_matrix_V_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_matrix_V_we0 <= ap_const_logic_1;
        else 
            state_matrix_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_306_p3 <= (row_index_0_reg_202 & ap_const_lv2_0);
    tmp_fu_213_p3 <= (constant_matrix_V_offset & ap_const_lv2_0);
    tmp_s_fu_253_p3 <= (ap_const_lv61_1 & column_index_0_reg_190);
    trunc_ln110_fu_286_p1 <= state_matrix_V_q1(13 - 1 downto 0);
    trunc_ln544_1_fu_274_p1 <= state_matrix_V_q1(13 - 1 downto 0);
    trunc_ln544_2_fu_282_p1 <= state_matrix_V_q0(13 - 1 downto 0);
    trunc_ln544_fu_270_p1 <= state_matrix_V_q0(13 - 1 downto 0);
    trunc_ln719_1_fu_380_p1 <= constant_matrix_2_V_q0(5 - 1 downto 0);
    trunc_ln719_2_fu_397_p1 <= constant_matrix_3_V_q0(5 - 1 downto 0);
    trunc_ln719_fu_358_p1 <= constant_matrix_1_V_q0(5 - 1 downto 0);
    trunc_ln78_fu_336_p1 <= constant_matrix_0_V_q0(5 - 1 downto 0);
    xor_ln180_fu_242_p2 <= (column_index_0_reg_190 xor ap_const_lv3_4);
    xor_ln719_1_fu_430_p2 <= (multiplication_V_q1 xor multiplication_V_q0);
    xor_ln719_2_fu_436_p2 <= (xor_ln719_fu_426_p2 xor xor_ln719_1_fu_430_p2);
    xor_ln719_fu_426_p2 <= (multiplication_V_loa_reg_563 xor multiplication_V_loa_1_reg_568);
    zext_ln101_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_213_p3),5));
    zext_ln106_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_index_0_reg_190),64));
    zext_ln180_18_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln180_fu_242_p2),64));
    zext_ln180_19_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln180_fu_262_p1),64));
    zext_ln180_20_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_index_0_reg_202),5));
    zext_ln180_21_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_306_p3),6));
    zext_ln180_22_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_reg_518),64));
    zext_ln180_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_index_0_reg_190),6));
    zext_ln544_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln544_fu_323_p2),64));
    zext_ln719_1_cast_fu_362_p3 <= (trunc_ln719_fu_358_p1 & ap_const_lv8_0);
    zext_ln719_2_cast_fu_384_p3 <= (trunc_ln719_1_fu_380_p1 & ap_const_lv8_0);
    zext_ln719_3_cast_fu_401_p3 <= (trunc_ln719_2_fu_397_p1 & ap_const_lv8_0);
    zext_ln78_cast_fu_340_p3 <= (trunc_ln78_fu_336_p1 & ap_const_lv8_0);
end behav;
