-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_get_round_key5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    round : IN STD_LOGIC_VECTOR (6 downto 0);
    expanded_key_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expanded_key_V_ce0 : OUT STD_LOGIC;
    expanded_key_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    round_key_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    round_key_V_ce0 : OUT STD_LOGIC;
    round_key_V_we0 : OUT STD_LOGIC;
    round_key_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of aes_get_round_key5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal key_column_index_V_fu_85_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal key_column_index_V_reg_179 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_99_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_187 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln180_fu_121_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln180_reg_192 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln138_fu_93_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_fu_129_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln180_reg_197 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_fu_141_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_205 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln180_fu_151_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln180_reg_210 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln140_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_63 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_op_assign_reg_74 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln180_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_25_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_113_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_105_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln180_23_fu_125_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln180_24_fu_147_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln215_fu_156_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_160_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln180_7_fu_165_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_63_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_63 <= i_reg_187;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_63 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_op_assign_reg_74 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_op_assign_reg_74 <= j_reg_205;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln180_reg_210 <= add_ln180_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_187 <= i_fu_99_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_205 <= j_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    key_column_index_V_reg_179(8 downto 2) <= key_column_index_V_fu_85_p3(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln180_reg_197(8 downto 2) <= sub_ln180_fu_129_p2(8 downto 2);
                    zext_ln180_reg_192(4 downto 2) <= zext_ln180_fu_121_p1(4 downto 2);
            end if;
        end if;
    end process;
    key_column_index_V_reg_179(1 downto 0) <= "00";
    zext_ln180_reg_192(1 downto 0) <= "00";
    zext_ln180_reg_192(5) <= '0';
    sub_ln180_reg_197(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln138_fu_93_p2, ap_CS_fsm_state3, icmp_ln140_fu_135_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln138_fu_93_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln140_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln180_7_fu_165_p2 <= std_logic_vector(unsigned(sub_ln180_reg_197) + unsigned(ret_V_fu_160_p2));
    add_ln180_fu_151_p2 <= std_logic_vector(unsigned(zext_ln180_reg_192) + unsigned(zext_ln180_24_fu_147_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln138_fu_93_p2)
    begin
        if ((((icmp_ln138_fu_93_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln138_fu_93_p2)
    begin
        if (((icmp_ln138_fu_93_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    expanded_key_V_address0 <= sext_ln180_fu_170_p1(8 - 1 downto 0);

    expanded_key_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expanded_key_V_ce0 <= ap_const_logic_1;
        else 
            expanded_key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_99_p2 <= std_logic_vector(unsigned(i_0_reg_63) + unsigned(ap_const_lv3_1));
    icmp_ln138_fu_93_p2 <= "1" when (i_0_reg_63 = ap_const_lv3_4) else "0";
    icmp_ln140_fu_135_p2 <= "1" when (i_op_assign_reg_74 = ap_const_lv3_4) else "0";
    j_fu_141_p2 <= std_logic_vector(unsigned(i_op_assign_reg_74) + unsigned(ap_const_lv3_1));
    key_column_index_V_fu_85_p3 <= (round & ap_const_lv2_0);
    ret_V_fu_160_p2 <= std_logic_vector(unsigned(key_column_index_V_reg_179) + unsigned(zext_ln215_fu_156_p1));
    round_key_V_address0 <= zext_ln180_25_fu_175_p1(4 - 1 downto 0);

    round_key_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            round_key_V_ce0 <= ap_const_logic_1;
        else 
            round_key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    round_key_V_d0 <= expanded_key_V_q0;

    round_key_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            round_key_V_we0 <= ap_const_logic_1;
        else 
            round_key_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln180_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln180_7_fu_165_p2),64));

    sub_ln180_fu_129_p2 <= std_logic_vector(unsigned(tmp_fu_105_p3) - unsigned(zext_ln180_23_fu_125_p1));
    tmp_fu_105_p3 <= (i_0_reg_63 & ap_const_lv6_0);
    tmp_s_fu_113_p3 <= (i_0_reg_63 & ap_const_lv2_0);
    zext_ln180_23_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_113_p3),9));
    zext_ln180_24_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_74),6));
    zext_ln180_25_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_reg_210),64));
    zext_ln180_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_113_p3),6));
    zext_ln215_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_74),9));
end behav;
