-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xts_aes_process_bloc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    block_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    block_V_ce0 : OUT STD_LOGIC;
    block_V_we0 : OUT STD_LOGIC;
    block_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    block_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    block_V_offset : IN STD_LOGIC_VECTOR (6 downto 0);
    tweak_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tweak_V_ce0 : OUT STD_LOGIC;
    tweak_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    mode_V : IN STD_LOGIC_VECTOR (15 downto 0);
    expanded_key_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expanded_key_V_ce0 : OUT STD_LOGIC;
    expanded_key_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    s_boxes_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    s_boxes_V_ce0 : OUT STD_LOGIC;
    s_boxes_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    mix_column_constant_matrices_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mix_column_constant_matrices_0_V_ce0 : OUT STD_LOGIC;
    mix_column_constant_matrices_0_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    mix_column_constant_matrices_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mix_column_constant_matrices_1_V_ce0 : OUT STD_LOGIC;
    mix_column_constant_matrices_1_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    mix_column_constant_matrices_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mix_column_constant_matrices_2_V_ce0 : OUT STD_LOGIC;
    mix_column_constant_matrices_2_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    mix_column_constant_matrices_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mix_column_constant_matrices_3_V_ce0 : OUT STD_LOGIC;
    mix_column_constant_matrices_3_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    multiplication_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    multiplication_V_ce0 : OUT STD_LOGIC;
    multiplication_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    multiplication_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    multiplication_V_ce1 : OUT STD_LOGIC;
    multiplication_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of xts_aes_process_bloc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln272_fu_172_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln272_reg_257 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_fu_182_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_266 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal block_V_addr_reg_271 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln274_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_8_fu_212_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_8_reg_285 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_fu_222_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_293 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal block_V_addr_1_reg_298 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln288_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_process_2_fu_130_ap_start : STD_LOGIC;
    signal grp_aes_process_2_fu_130_ap_done : STD_LOGIC;
    signal grp_aes_process_2_fu_130_ap_idle : STD_LOGIC;
    signal grp_aes_process_2_fu_130_ap_ready : STD_LOGIC;
    signal grp_aes_process_2_fu_130_text_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aes_process_2_fu_130_text_V_ce0 : STD_LOGIC;
    signal grp_aes_process_2_fu_130_text_V_we0 : STD_LOGIC;
    signal grp_aes_process_2_fu_130_text_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_aes_process_2_fu_130_initial_round : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_aes_process_2_fu_130_round_factor : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_process_2_fu_130_expanded_key_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_process_2_fu_130_expanded_key_V_ce0 : STD_LOGIC;
    signal grp_aes_process_2_fu_130_s_boxes_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aes_process_2_fu_130_s_boxes_V_ce0 : STD_LOGIC;
    signal grp_aes_process_2_fu_130_mix_column_constant_matrices_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_2_fu_130_mix_column_constant_matrices_0_V_ce0 : STD_LOGIC;
    signal grp_aes_process_2_fu_130_mix_column_constant_matrices_1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_2_fu_130_mix_column_constant_matrices_1_V_ce0 : STD_LOGIC;
    signal grp_aes_process_2_fu_130_mix_column_constant_matrices_2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_2_fu_130_mix_column_constant_matrices_2_V_ce0 : STD_LOGIC;
    signal grp_aes_process_2_fu_130_mix_column_constant_matrices_3_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_process_2_fu_130_mix_column_constant_matrices_3_V_ce0 : STD_LOGIC;
    signal grp_aes_process_2_fu_130_multiplication_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_aes_process_2_fu_130_multiplication_V_ce0 : STD_LOGIC;
    signal grp_aes_process_2_fu_130_multiplication_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_aes_process_2_fu_130_multiplication_V_ce1 : STD_LOGIC;
    signal i_0_reg_108 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_119 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_aes_process_2_fu_130_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln1357_1_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1357_3_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln290_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_164_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1357_fu_193_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1357_fu_197_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1357_2_fu_233_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1357_1_fu_237_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component aes_process_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        text_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        text_V_ce0 : OUT STD_LOGIC;
        text_V_we0 : OUT STD_LOGIC;
        text_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        text_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        sequence_out_V_offset : IN STD_LOGIC_VECTOR (5 downto 0);
        initial_round : IN STD_LOGIC_VECTOR (5 downto 0);
        round_factor : IN STD_LOGIC_VECTOR (1 downto 0);
        expanded_key_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        expanded_key_V_ce0 : OUT STD_LOGIC;
        expanded_key_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        s_boxes_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s_boxes_V_ce0 : OUT STD_LOGIC;
        s_boxes_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        mix_column_constant_matrices_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        mix_column_constant_matrices_0_V_ce0 : OUT STD_LOGIC;
        mix_column_constant_matrices_0_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        mix_column_constant_matrices_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        mix_column_constant_matrices_1_V_ce0 : OUT STD_LOGIC;
        mix_column_constant_matrices_1_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        mix_column_constant_matrices_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        mix_column_constant_matrices_2_V_ce0 : OUT STD_LOGIC;
        mix_column_constant_matrices_2_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        mix_column_constant_matrices_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        mix_column_constant_matrices_3_V_ce0 : OUT STD_LOGIC;
        mix_column_constant_matrices_3_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        multiplication_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        multiplication_V_ce0 : OUT STD_LOGIC;
        multiplication_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        multiplication_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        multiplication_V_ce1 : OUT STD_LOGIC;
        multiplication_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_aes_process_2_fu_130 : component aes_process_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_process_2_fu_130_ap_start,
        ap_done => grp_aes_process_2_fu_130_ap_done,
        ap_idle => grp_aes_process_2_fu_130_ap_idle,
        ap_ready => grp_aes_process_2_fu_130_ap_ready,
        text_V_address0 => grp_aes_process_2_fu_130_text_V_address0,
        text_V_ce0 => grp_aes_process_2_fu_130_text_V_ce0,
        text_V_we0 => grp_aes_process_2_fu_130_text_V_we0,
        text_V_d0 => grp_aes_process_2_fu_130_text_V_d0,
        text_V_q0 => block_V_q0,
        sequence_out_V_offset => empty_8_reg_285,
        initial_round => grp_aes_process_2_fu_130_initial_round,
        round_factor => grp_aes_process_2_fu_130_round_factor,
        expanded_key_V_address0 => grp_aes_process_2_fu_130_expanded_key_V_address0,
        expanded_key_V_ce0 => grp_aes_process_2_fu_130_expanded_key_V_ce0,
        expanded_key_V_q0 => expanded_key_V_q0,
        s_boxes_V_address0 => grp_aes_process_2_fu_130_s_boxes_V_address0,
        s_boxes_V_ce0 => grp_aes_process_2_fu_130_s_boxes_V_ce0,
        s_boxes_V_q0 => s_boxes_V_q0,
        mix_column_constant_matrices_0_V_address0 => grp_aes_process_2_fu_130_mix_column_constant_matrices_0_V_address0,
        mix_column_constant_matrices_0_V_ce0 => grp_aes_process_2_fu_130_mix_column_constant_matrices_0_V_ce0,
        mix_column_constant_matrices_0_V_q0 => mix_column_constant_matrices_0_V_q0,
        mix_column_constant_matrices_1_V_address0 => grp_aes_process_2_fu_130_mix_column_constant_matrices_1_V_address0,
        mix_column_constant_matrices_1_V_ce0 => grp_aes_process_2_fu_130_mix_column_constant_matrices_1_V_ce0,
        mix_column_constant_matrices_1_V_q0 => mix_column_constant_matrices_1_V_q0,
        mix_column_constant_matrices_2_V_address0 => grp_aes_process_2_fu_130_mix_column_constant_matrices_2_V_address0,
        mix_column_constant_matrices_2_V_ce0 => grp_aes_process_2_fu_130_mix_column_constant_matrices_2_V_ce0,
        mix_column_constant_matrices_2_V_q0 => mix_column_constant_matrices_2_V_q0,
        mix_column_constant_matrices_3_V_address0 => grp_aes_process_2_fu_130_mix_column_constant_matrices_3_V_address0,
        mix_column_constant_matrices_3_V_ce0 => grp_aes_process_2_fu_130_mix_column_constant_matrices_3_V_ce0,
        mix_column_constant_matrices_3_V_q0 => mix_column_constant_matrices_3_V_q0,
        multiplication_V_address0 => grp_aes_process_2_fu_130_multiplication_V_address0,
        multiplication_V_ce0 => grp_aes_process_2_fu_130_multiplication_V_ce0,
        multiplication_V_q0 => multiplication_V_q0,
        multiplication_V_address1 => grp_aes_process_2_fu_130_multiplication_V_address1,
        multiplication_V_ce1 => grp_aes_process_2_fu_130_multiplication_V_ce1,
        multiplication_V_q1 => multiplication_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_process_2_fu_130_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_process_2_fu_130_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln879_fu_207_p2 = ap_const_lv1_1) and (icmp_ln274_fu_176_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln879_fu_207_p2 = ap_const_lv1_0) and (icmp_ln274_fu_176_p2 = ap_const_lv1_1)))) then 
                    grp_aes_process_2_fu_130_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_process_2_fu_130_ap_ready = ap_const_logic_1)) then 
                    grp_aes_process_2_fu_130_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i1_0_reg_119 <= i_2_reg_293;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                i1_0_reg_119 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_108 <= i_reg_266;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_108 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln288_fu_216_p2 = ap_const_lv1_0))) then
                block_V_addr_1_reg_298 <= zext_ln1357_3_fu_242_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln274_fu_176_p2 = ap_const_lv1_0))) then
                block_V_addr_reg_271 <= zext_ln1357_1_fu_202_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln274_fu_176_p2 = ap_const_lv1_1))) then
                empty_8_reg_285 <= empty_8_fu_212_p1;
                icmp_ln879_reg_281 <= icmp_ln879_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_2_reg_293 <= i_2_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_266 <= i_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    zext_ln272_reg_257(10 downto 4) <= zext_ln272_fu_172_p1(10 downto 4);
            end if;
        end if;
    end process;
    zext_ln272_reg_257(3 downto 0) <= "0000";
    zext_ln272_reg_257(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln274_fu_176_p2, ap_CS_fsm_state5, icmp_ln288_fu_216_p2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln274_fu_176_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln288_fu_216_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1357_1_fu_237_p2 <= std_logic_vector(unsigned(zext_ln272_reg_257) + unsigned(zext_ln1357_2_fu_233_p1));
    add_ln1357_fu_197_p2 <= std_logic_vector(unsigned(zext_ln272_reg_257) + unsigned(zext_ln1357_fu_193_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state4_on_subcall_done_assign_proc : process(icmp_ln879_reg_281, grp_aes_process_2_fu_130_ap_done)
    begin
                ap_block_state4_on_subcall_done <= (((grp_aes_process_2_fu_130_ap_done = ap_const_logic_0) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((grp_aes_process_2_fu_130_ap_done = ap_const_logic_0) and (icmp_ln879_reg_281 = ap_const_lv1_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln288_fu_216_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln288_fu_216_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln288_fu_216_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln288_fu_216_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_V_address0_assign_proc : process(ap_CS_fsm_state2, block_V_addr_reg_271, icmp_ln274_fu_176_p2, icmp_ln879_reg_281, ap_CS_fsm_state5, block_V_addr_1_reg_298, grp_aes_process_2_fu_130_text_V_address0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, zext_ln1357_1_fu_202_p1, zext_ln1357_3_fu_242_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_V_address0 <= block_V_addr_1_reg_298;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_V_address0 <= zext_ln1357_3_fu_242_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            block_V_address0 <= block_V_addr_reg_271;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln274_fu_176_p2 = ap_const_lv1_0))) then 
            block_V_address0 <= zext_ln1357_1_fu_202_p1(10 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_0)))) then 
            block_V_address0 <= grp_aes_process_2_fu_130_text_V_address0;
        else 
            block_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    block_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln274_fu_176_p2, icmp_ln879_reg_281, ap_CS_fsm_state5, grp_aes_process_2_fu_130_text_V_ce0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln274_fu_176_p2 = ap_const_lv1_0)))) then 
            block_V_ce0 <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_0)))) then 
            block_V_ce0 <= grp_aes_process_2_fu_130_text_V_ce0;
        else 
            block_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_V_d0_assign_proc : process(icmp_ln879_reg_281, grp_aes_process_2_fu_130_text_V_d0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_fu_157_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            block_V_d0 <= grp_fu_157_p2;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_0)))) then 
            block_V_d0 <= grp_aes_process_2_fu_130_text_V_d0;
        else 
            block_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    block_V_we0_assign_proc : process(icmp_ln879_reg_281, grp_aes_process_2_fu_130_text_V_we0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            block_V_we0 <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_0)))) then 
            block_V_we0 <= grp_aes_process_2_fu_130_text_V_we0;
        else 
            block_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_8_fu_212_p1 <= block_V_offset(6 - 1 downto 0);
    expanded_key_V_address0 <= grp_aes_process_2_fu_130_expanded_key_V_address0;

    expanded_key_V_ce0_assign_proc : process(icmp_ln879_reg_281, grp_aes_process_2_fu_130_expanded_key_V_ce0, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_0)))) then 
            expanded_key_V_ce0 <= grp_aes_process_2_fu_130_expanded_key_V_ce0;
        else 
            expanded_key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes_process_2_fu_130_ap_start <= grp_aes_process_2_fu_130_ap_start_reg;

    grp_aes_process_2_fu_130_initial_round_assign_proc : process(icmp_ln879_reg_281, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((icmp_ln879_reg_281 = ap_const_lv1_1)) then 
                grp_aes_process_2_fu_130_initial_round <= ap_const_lv6_0;
            elsif ((icmp_ln879_reg_281 = ap_const_lv1_0)) then 
                grp_aes_process_2_fu_130_initial_round <= ap_const_lv6_E;
            else 
                grp_aes_process_2_fu_130_initial_round <= "XXXXXX";
            end if;
        else 
            grp_aes_process_2_fu_130_initial_round <= "XXXXXX";
        end if; 
    end process;


    grp_aes_process_2_fu_130_round_factor_assign_proc : process(icmp_ln879_reg_281, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((icmp_ln879_reg_281 = ap_const_lv1_1)) then 
                grp_aes_process_2_fu_130_round_factor <= ap_const_lv2_1;
            elsif ((icmp_ln879_reg_281 = ap_const_lv1_0)) then 
                grp_aes_process_2_fu_130_round_factor <= ap_const_lv2_3;
            else 
                grp_aes_process_2_fu_130_round_factor <= "XX";
            end if;
        else 
            grp_aes_process_2_fu_130_round_factor <= "XX";
        end if; 
    end process;

    grp_fu_157_p2 <= (tweak_V_q0 xor block_V_q0);
    i_2_fu_222_p2 <= std_logic_vector(unsigned(i1_0_reg_119) + unsigned(ap_const_lv5_1));
    i_fu_182_p2 <= std_logic_vector(unsigned(i_0_reg_108) + unsigned(ap_const_lv5_1));
    icmp_ln274_fu_176_p2 <= "1" when (i_0_reg_108 = ap_const_lv5_10) else "0";
    icmp_ln288_fu_216_p2 <= "1" when (i1_0_reg_119 = ap_const_lv5_10) else "0";
    icmp_ln879_fu_207_p2 <= "1" when (mode_V = ap_const_lv16_1) else "0";
    mix_column_constant_matrices_0_V_address0 <= grp_aes_process_2_fu_130_mix_column_constant_matrices_0_V_address0;

    mix_column_constant_matrices_0_V_ce0_assign_proc : process(icmp_ln879_reg_281, grp_aes_process_2_fu_130_mix_column_constant_matrices_0_V_ce0, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_0)))) then 
            mix_column_constant_matrices_0_V_ce0 <= grp_aes_process_2_fu_130_mix_column_constant_matrices_0_V_ce0;
        else 
            mix_column_constant_matrices_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mix_column_constant_matrices_1_V_address0 <= grp_aes_process_2_fu_130_mix_column_constant_matrices_1_V_address0;

    mix_column_constant_matrices_1_V_ce0_assign_proc : process(icmp_ln879_reg_281, grp_aes_process_2_fu_130_mix_column_constant_matrices_1_V_ce0, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_0)))) then 
            mix_column_constant_matrices_1_V_ce0 <= grp_aes_process_2_fu_130_mix_column_constant_matrices_1_V_ce0;
        else 
            mix_column_constant_matrices_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mix_column_constant_matrices_2_V_address0 <= grp_aes_process_2_fu_130_mix_column_constant_matrices_2_V_address0;

    mix_column_constant_matrices_2_V_ce0_assign_proc : process(icmp_ln879_reg_281, grp_aes_process_2_fu_130_mix_column_constant_matrices_2_V_ce0, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_0)))) then 
            mix_column_constant_matrices_2_V_ce0 <= grp_aes_process_2_fu_130_mix_column_constant_matrices_2_V_ce0;
        else 
            mix_column_constant_matrices_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mix_column_constant_matrices_3_V_address0 <= grp_aes_process_2_fu_130_mix_column_constant_matrices_3_V_address0;

    mix_column_constant_matrices_3_V_ce0_assign_proc : process(icmp_ln879_reg_281, grp_aes_process_2_fu_130_mix_column_constant_matrices_3_V_ce0, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_0)))) then 
            mix_column_constant_matrices_3_V_ce0 <= grp_aes_process_2_fu_130_mix_column_constant_matrices_3_V_ce0;
        else 
            mix_column_constant_matrices_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    multiplication_V_address0 <= grp_aes_process_2_fu_130_multiplication_V_address0;
    multiplication_V_address1 <= grp_aes_process_2_fu_130_multiplication_V_address1;

    multiplication_V_ce0_assign_proc : process(icmp_ln879_reg_281, grp_aes_process_2_fu_130_multiplication_V_ce0, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_0)))) then 
            multiplication_V_ce0 <= grp_aes_process_2_fu_130_multiplication_V_ce0;
        else 
            multiplication_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    multiplication_V_ce1_assign_proc : process(icmp_ln879_reg_281, grp_aes_process_2_fu_130_multiplication_V_ce1, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_0)))) then 
            multiplication_V_ce1 <= grp_aes_process_2_fu_130_multiplication_V_ce1;
        else 
            multiplication_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s_boxes_V_address0 <= grp_aes_process_2_fu_130_s_boxes_V_address0;

    s_boxes_V_ce0_assign_proc : process(icmp_ln879_reg_281, grp_aes_process_2_fu_130_s_boxes_V_ce0, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_reg_281 = ap_const_lv1_0)))) then 
            s_boxes_V_ce0 <= grp_aes_process_2_fu_130_s_boxes_V_ce0;
        else 
            s_boxes_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_164_p3 <= (block_V_offset & ap_const_lv4_0);

    tweak_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, zext_ln276_fu_188_p1, zext_ln290_fu_228_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tweak_V_address0 <= zext_ln290_fu_228_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tweak_V_address0 <= zext_ln276_fu_188_p1(4 - 1 downto 0);
        else 
            tweak_V_address0 <= "XXXX";
        end if; 
    end process;


    tweak_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tweak_V_ce0 <= ap_const_logic_1;
        else 
            tweak_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1357_1_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1357_fu_197_p2),64));
    zext_ln1357_2_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_119),12));
    zext_ln1357_3_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1357_1_fu_237_p2),64));
    zext_ln1357_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_108),12));
    zext_ln272_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_164_p3),12));
    zext_ln276_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_108),64));
    zext_ln290_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_119),64));
end behav;
