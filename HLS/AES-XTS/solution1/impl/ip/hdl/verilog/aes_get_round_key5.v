// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_get_round_key5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        round,
        expanded_key_V_address0,
        expanded_key_V_ce0,
        expanded_key_V_q0,
        expanded_key_V_address1,
        expanded_key_V_ce1,
        expanded_key_V_q1,
        round_key_V_address0,
        round_key_V_ce0,
        round_key_V_we0,
        round_key_V_d0,
        round_key_V_address1,
        round_key_V_ce1,
        round_key_V_we1,
        round_key_V_d1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] round;
output  [7:0] expanded_key_V_address0;
output   expanded_key_V_ce0;
input  [15:0] expanded_key_V_q0;
output  [7:0] expanded_key_V_address1;
output   expanded_key_V_ce1;
input  [15:0] expanded_key_V_q1;
output  [3:0] round_key_V_address0;
output   round_key_V_ce0;
output   round_key_V_we0;
output  [15:0] round_key_V_d0;
output  [3:0] round_key_V_address1;
output   round_key_V_ce1;
output   round_key_V_we1;
output  [15:0] round_key_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] expanded_key_V_address0;
reg expanded_key_V_ce0;
reg[7:0] expanded_key_V_address1;
reg expanded_key_V_ce1;
reg[3:0] round_key_V_address0;
reg round_key_V_ce0;
reg round_key_V_we0;
reg[3:0] round_key_V_address1;
reg round_key_V_ce1;
reg round_key_V_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] i_0_reg_154;
wire   [8:0] key_column_index_V_fu_165_p3;
reg   [8:0] key_column_index_V_reg_313;
wire   [8:0] or_ln1353_fu_173_p2;
reg   [8:0] or_ln1353_reg_318;
wire   [8:0] or_ln1353_1_fu_179_p2;
reg   [8:0] or_ln1353_1_reg_323;
wire   [8:0] or_ln1353_2_fu_185_p2;
reg   [8:0] or_ln1353_2_reg_328;
wire   [0:0] icmp_ln138_fu_191_p2;
reg   [0:0] icmp_ln138_reg_333;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] i_fu_197_p2;
reg   [2:0] i_reg_337;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] tmp_17_fu_211_p3;
reg   [4:0] tmp_17_reg_342;
wire   [8:0] sub_ln180_fu_223_p2;
reg   [8:0] sub_ln180_reg_350;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [2:0] ap_phi_mux_i_0_phi_fu_158_p4;
wire    ap_block_pp0_stage0;
wire  signed [63:0] sext_ln180_fu_234_p1;
wire  signed [63:0] sext_ln180_1_fu_244_p1;
wire  signed [63:0] sext_ln180_2_fu_257_p1;
wire    ap_block_pp0_stage1;
wire  signed [63:0] sext_ln180_3_fu_266_p1;
wire   [63:0] zext_ln180_8_fu_249_p1;
wire   [63:0] tmp_18_fu_276_p3;
wire   [63:0] tmp_19_fu_290_p3;
wire   [63:0] tmp_20_fu_304_p3;
wire   [8:0] tmp_s_fu_203_p3;
wire   [8:0] zext_ln180_fu_219_p1;
wire   [8:0] add_ln180_fu_229_p2;
wire   [8:0] add_ln180_6_fu_239_p2;
wire   [8:0] add_ln180_7_fu_253_p2;
wire   [8:0] add_ln180_8_fu_262_p2;
wire   [4:0] or_ln180_fu_271_p2;
wire   [4:0] or_ln180_3_fu_285_p2;
wire   [4:0] or_ln180_4_fu_299_p2;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln138_reg_333 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_154 <= i_reg_337;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_154 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_337 <= i_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln138_reg_333 <= icmp_ln138_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        key_column_index_V_reg_313[8 : 2] <= key_column_index_V_fu_165_p3[8 : 2];
        or_ln1353_1_reg_323[8 : 2] <= or_ln1353_1_fu_179_p2[8 : 2];
        or_ln1353_2_reg_328[8 : 2] <= or_ln1353_2_fu_185_p2[8 : 2];
        or_ln1353_reg_318[8 : 2] <= or_ln1353_fu_173_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln138_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln180_reg_350[8 : 2] <= sub_ln180_fu_223_p2[8 : 2];
        tmp_17_reg_342[4 : 2] <= tmp_17_fu_211_p3[4 : 2];
    end
end

always @ (*) begin
    if ((icmp_ln138_fu_191_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln138_reg_333 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_158_p4 = i_reg_337;
    end else begin
        ap_phi_mux_i_0_phi_fu_158_p4 = i_0_reg_154;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            expanded_key_V_address0 = sext_ln180_2_fu_257_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            expanded_key_V_address0 = sext_ln180_fu_234_p1;
        end else begin
            expanded_key_V_address0 = 'bx;
        end
    end else begin
        expanded_key_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            expanded_key_V_address1 = sext_ln180_3_fu_266_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            expanded_key_V_address1 = sext_ln180_1_fu_244_p1;
        end else begin
            expanded_key_V_address1 = 'bx;
        end
    end else begin
        expanded_key_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        expanded_key_V_ce0 = 1'b1;
    end else begin
        expanded_key_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        expanded_key_V_ce1 = 1'b1;
    end else begin
        expanded_key_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        round_key_V_address0 = tmp_19_fu_290_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        round_key_V_address0 = zext_ln180_8_fu_249_p1;
    end else begin
        round_key_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        round_key_V_address1 = tmp_20_fu_304_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        round_key_V_address1 = tmp_18_fu_276_p3;
    end else begin
        round_key_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        round_key_V_ce0 = 1'b1;
    end else begin
        round_key_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        round_key_V_ce1 = 1'b1;
    end else begin
        round_key_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln138_reg_333 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln138_reg_333 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        round_key_V_we0 = 1'b1;
    end else begin
        round_key_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln138_reg_333 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln138_reg_333 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        round_key_V_we1 = 1'b1;
    end else begin
        round_key_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln138_fu_191_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln138_fu_191_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln180_6_fu_239_p2 = (or_ln1353_reg_318 + sub_ln180_fu_223_p2);

assign add_ln180_7_fu_253_p2 = (or_ln1353_1_reg_323 + sub_ln180_reg_350);

assign add_ln180_8_fu_262_p2 = (or_ln1353_2_reg_328 + sub_ln180_reg_350);

assign add_ln180_fu_229_p2 = (key_column_index_V_reg_313 + sub_ln180_fu_223_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_197_p2 = (ap_phi_mux_i_0_phi_fu_158_p4 + 3'd1);

assign icmp_ln138_fu_191_p2 = ((ap_phi_mux_i_0_phi_fu_158_p4 == 3'd4) ? 1'b1 : 1'b0);

assign key_column_index_V_fu_165_p3 = {{round}, {2'd0}};

assign or_ln1353_1_fu_179_p2 = (key_column_index_V_fu_165_p3 | 9'd2);

assign or_ln1353_2_fu_185_p2 = (key_column_index_V_fu_165_p3 | 9'd3);

assign or_ln1353_fu_173_p2 = (key_column_index_V_fu_165_p3 | 9'd1);

assign or_ln180_3_fu_285_p2 = (tmp_17_reg_342 | 5'd2);

assign or_ln180_4_fu_299_p2 = (tmp_17_reg_342 | 5'd3);

assign or_ln180_fu_271_p2 = (tmp_17_reg_342 | 5'd1);

assign round_key_V_d0 = expanded_key_V_q0;

assign round_key_V_d1 = expanded_key_V_q1;

assign sext_ln180_1_fu_244_p1 = $signed(add_ln180_6_fu_239_p2);

assign sext_ln180_2_fu_257_p1 = $signed(add_ln180_7_fu_253_p2);

assign sext_ln180_3_fu_266_p1 = $signed(add_ln180_8_fu_262_p2);

assign sext_ln180_fu_234_p1 = $signed(add_ln180_fu_229_p2);

assign sub_ln180_fu_223_p2 = (tmp_s_fu_203_p3 - zext_ln180_fu_219_p1);

assign tmp_17_fu_211_p3 = {{ap_phi_mux_i_0_phi_fu_158_p4}, {2'd0}};

assign tmp_18_fu_276_p3 = {{59'd0}, {or_ln180_fu_271_p2}};

assign tmp_19_fu_290_p3 = {{59'd0}, {or_ln180_3_fu_285_p2}};

assign tmp_20_fu_304_p3 = {{59'd0}, {or_ln180_4_fu_299_p2}};

assign tmp_s_fu_203_p3 = {{ap_phi_mux_i_0_phi_fu_158_p4}, {6'd0}};

assign zext_ln180_8_fu_249_p1 = tmp_17_reg_342;

assign zext_ln180_fu_219_p1 = tmp_17_fu_211_p3;

always @ (posedge ap_clk) begin
    key_column_index_V_reg_313[1:0] <= 2'b00;
    or_ln1353_reg_318[1:0] <= 2'b01;
    or_ln1353_1_reg_323[1:0] <= 2'b10;
    or_ln1353_2_reg_328[1:0] <= 2'b11;
    tmp_17_reg_342[1:0] <= 2'b00;
    sub_ln180_reg_350[1:0] <= 2'b00;
end

endmodule //aes_get_round_key5
