// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_mix_columns8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_matrix_V_address0,
        state_matrix_V_ce0,
        state_matrix_V_we0,
        state_matrix_V_d0,
        state_matrix_V_q0,
        state_matrix_V_address1,
        state_matrix_V_ce1,
        state_matrix_V_q1,
        constant_matrix_0_V_address0,
        constant_matrix_0_V_ce0,
        constant_matrix_0_V_q0,
        constant_matrix_1_V_address0,
        constant_matrix_1_V_ce0,
        constant_matrix_1_V_q0,
        constant_matrix_2_V_address0,
        constant_matrix_2_V_ce0,
        constant_matrix_2_V_q0,
        constant_matrix_3_V_address0,
        constant_matrix_3_V_ce0,
        constant_matrix_3_V_q0,
        constant_matrix_V_offset,
        multiplication_V_address0,
        multiplication_V_ce0,
        multiplication_V_q0,
        multiplication_V_address1,
        multiplication_V_ce1,
        multiplication_V_q1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_matrix_V_address0;
output   state_matrix_V_ce0;
output   state_matrix_V_we0;
output  [15:0] state_matrix_V_d0;
input  [15:0] state_matrix_V_q0;
output  [3:0] state_matrix_V_address1;
output   state_matrix_V_ce1;
input  [15:0] state_matrix_V_q1;
output  [3:0] constant_matrix_0_V_address0;
output   constant_matrix_0_V_ce0;
input  [5:0] constant_matrix_0_V_q0;
output  [3:0] constant_matrix_1_V_address0;
output   constant_matrix_1_V_ce0;
input  [5:0] constant_matrix_1_V_q0;
output  [3:0] constant_matrix_2_V_address0;
output   constant_matrix_2_V_ce0;
input  [5:0] constant_matrix_2_V_q0;
output  [3:0] constant_matrix_3_V_address0;
output   constant_matrix_3_V_ce0;
input  [5:0] constant_matrix_3_V_q0;
input  [1:0] constant_matrix_V_offset;
output  [11:0] multiplication_V_address0;
output   multiplication_V_ce0;
input  [7:0] multiplication_V_q0;
output  [11:0] multiplication_V_address1;
output   multiplication_V_ce1;
input  [7:0] multiplication_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_matrix_V_address0;
reg state_matrix_V_ce0;
reg state_matrix_V_we0;
reg[3:0] state_matrix_V_address1;
reg state_matrix_V_ce1;
reg constant_matrix_0_V_ce0;
reg constant_matrix_1_V_ce0;
reg constant_matrix_2_V_ce0;
reg constant_matrix_3_V_ce0;
reg[11:0] multiplication_V_address0;
reg multiplication_V_ce0;
reg[11:0] multiplication_V_address1;
reg multiplication_V_ce1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] zext_ln101_fu_221_p1;
reg   [4:0] zext_ln101_reg_447;
wire   [2:0] column_index_fu_231_p2;
reg   [2:0] column_index_reg_455;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln103_fu_225_p2;
wire  signed [2:0] xor_ln180_fu_242_p2;
reg  signed [2:0] xor_ln180_reg_465;
wire    ap_CS_fsm_state3;
wire   [12:0] trunc_ln544_fu_270_p1;
reg   [12:0] trunc_ln544_reg_485;
wire   [12:0] trunc_ln544_1_fu_274_p1;
reg   [12:0] trunc_ln544_1_reg_490;
wire   [5:0] zext_ln180_fu_278_p1;
reg   [5:0] zext_ln180_reg_495;
wire    ap_CS_fsm_state4;
wire   [12:0] trunc_ln544_2_fu_282_p1;
reg   [12:0] trunc_ln544_2_reg_500;
wire   [12:0] trunc_ln110_fu_286_p1;
reg   [12:0] trunc_ln110_reg_505;
wire   [2:0] row_index_fu_296_p2;
reg   [2:0] row_index_reg_513;
wire    ap_CS_fsm_state5;
wire   [5:0] add_ln180_fu_318_p2;
reg   [5:0] add_ln180_reg_518;
wire   [0:0] icmp_ln110_fu_290_p2;
wire    ap_CS_fsm_state6;
wire   [12:0] add_ln719_1_fu_392_p2;
reg   [12:0] add_ln719_1_reg_553;
wire   [12:0] add_ln719_2_fu_409_p2;
reg   [12:0] add_ln719_2_reg_558;
reg   [7:0] multiplication_V_loa_reg_563;
wire    ap_CS_fsm_state7;
reg   [7:0] multiplication_V_loa_1_reg_568;
reg   [2:0] column_index_0_reg_190;
reg   [2:0] row_index_0_reg_202;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln106_fu_237_p1;
wire   [63:0] zext_ln180_18_fu_248_p1;
wire   [63:0] tmp_s_fu_253_p3;
wire   [63:0] zext_ln180_19_fu_265_p1;
wire   [63:0] zext_ln544_fu_328_p1;
wire  signed [63:0] sext_ln78_fu_353_p1;
wire  signed [63:0] sext_ln719_fu_375_p1;
wire  signed [63:0] sext_ln719_1_fu_414_p1;
wire  signed [63:0] sext_ln719_2_fu_418_p1;
wire   [63:0] zext_ln180_22_fu_422_p1;
wire   [3:0] tmp_fu_213_p3;
wire  signed [3:0] sext_ln180_fu_262_p1;
wire   [4:0] tmp_2_fu_306_p3;
wire   [5:0] zext_ln180_21_fu_314_p1;
wire   [4:0] zext_ln180_20_fu_302_p1;
wire   [4:0] add_ln544_fu_323_p2;
wire   [4:0] trunc_ln78_fu_336_p1;
wire   [12:0] zext_ln78_cast_fu_340_p3;
wire   [12:0] add_ln78_fu_348_p2;
wire   [4:0] trunc_ln719_fu_358_p1;
wire   [12:0] zext_ln719_1_cast_fu_362_p3;
wire   [12:0] add_ln719_fu_370_p2;
wire   [4:0] trunc_ln719_1_fu_380_p1;
wire   [12:0] zext_ln719_2_cast_fu_384_p3;
wire   [4:0] trunc_ln719_2_fu_397_p1;
wire   [12:0] zext_ln719_3_cast_fu_401_p3;
wire   [7:0] xor_ln719_1_fu_430_p2;
wire   [7:0] xor_ln719_fu_426_p2;
wire   [7:0] xor_ln719_2_fu_436_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln110_fu_290_p2 == 1'd1))) begin
        column_index_0_reg_190 <= column_index_reg_455;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        column_index_0_reg_190 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        row_index_0_reg_202 <= row_index_reg_513;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        row_index_0_reg_202 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln180_reg_518 <= add_ln180_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln719_1_reg_553 <= add_ln719_1_fu_392_p2;
        add_ln719_2_reg_558 <= add_ln719_2_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        column_index_reg_455 <= column_index_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        multiplication_V_loa_1_reg_568 <= multiplication_V_q1;
        multiplication_V_loa_reg_563 <= multiplication_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_index_reg_513 <= row_index_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln110_reg_505 <= trunc_ln110_fu_286_p1;
        trunc_ln544_2_reg_500 <= trunc_ln544_2_fu_282_p1;
        zext_ln180_reg_495[2 : 0] <= zext_ln180_fu_278_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln544_1_reg_490 <= trunc_ln544_1_fu_274_p1;
        trunc_ln544_reg_485 <= trunc_ln544_fu_270_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        xor_ln180_reg_465 <= xor_ln180_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        zext_ln101_reg_447[3 : 2] <= zext_ln101_fu_221_p1[3 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln103_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln103_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        constant_matrix_0_V_ce0 = 1'b1;
    end else begin
        constant_matrix_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        constant_matrix_1_V_ce0 = 1'b1;
    end else begin
        constant_matrix_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        constant_matrix_2_V_ce0 = 1'b1;
    end else begin
        constant_matrix_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        constant_matrix_3_V_ce0 = 1'b1;
    end else begin
        constant_matrix_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        multiplication_V_address0 = sext_ln719_1_fu_414_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        multiplication_V_address0 = sext_ln78_fu_353_p1;
    end else begin
        multiplication_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        multiplication_V_address1 = sext_ln719_2_fu_418_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        multiplication_V_address1 = sext_ln719_fu_375_p1;
    end else begin
        multiplication_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        multiplication_V_ce0 = 1'b1;
    end else begin
        multiplication_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        multiplication_V_ce1 = 1'b1;
    end else begin
        multiplication_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_matrix_V_address0 = zext_ln180_22_fu_422_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_matrix_V_address0 = tmp_s_fu_253_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_matrix_V_address0 = zext_ln106_fu_237_p1;
    end else begin
        state_matrix_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_matrix_V_address1 = zext_ln180_19_fu_265_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_matrix_V_address1 = zext_ln180_18_fu_248_p1;
    end else begin
        state_matrix_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8))) begin
        state_matrix_V_ce0 = 1'b1;
    end else begin
        state_matrix_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        state_matrix_V_ce1 = 1'b1;
    end else begin
        state_matrix_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_matrix_V_we0 = 1'b1;
    end else begin
        state_matrix_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln103_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln110_fu_290_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln180_fu_318_p2 = (zext_ln180_reg_495 + zext_ln180_21_fu_314_p1);

assign add_ln544_fu_323_p2 = (zext_ln180_20_fu_302_p1 + zext_ln101_reg_447);

assign add_ln719_1_fu_392_p2 = (trunc_ln544_2_reg_500 + zext_ln719_2_cast_fu_384_p3);

assign add_ln719_2_fu_409_p2 = (trunc_ln110_reg_505 + zext_ln719_3_cast_fu_401_p3);

assign add_ln719_fu_370_p2 = (trunc_ln544_1_reg_490 + zext_ln719_1_cast_fu_362_p3);

assign add_ln78_fu_348_p2 = (trunc_ln544_reg_485 + zext_ln78_cast_fu_340_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign column_index_fu_231_p2 = (column_index_0_reg_190 + 3'd1);

assign constant_matrix_0_V_address0 = zext_ln544_fu_328_p1;

assign constant_matrix_1_V_address0 = zext_ln544_fu_328_p1;

assign constant_matrix_2_V_address0 = zext_ln544_fu_328_p1;

assign constant_matrix_3_V_address0 = zext_ln544_fu_328_p1;

assign icmp_ln103_fu_225_p2 = ((column_index_0_reg_190 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_290_p2 = ((row_index_0_reg_202 == 3'd4) ? 1'b1 : 1'b0);

assign row_index_fu_296_p2 = (row_index_0_reg_202 + 3'd1);

assign sext_ln180_fu_262_p1 = xor_ln180_reg_465;

assign sext_ln719_1_fu_414_p1 = $signed(add_ln719_1_reg_553);

assign sext_ln719_2_fu_418_p1 = $signed(add_ln719_2_reg_558);

assign sext_ln719_fu_375_p1 = $signed(add_ln719_fu_370_p2);

assign sext_ln78_fu_353_p1 = $signed(add_ln78_fu_348_p2);

assign state_matrix_V_d0 = xor_ln719_2_fu_436_p2;

assign tmp_2_fu_306_p3 = {{row_index_0_reg_202}, {2'd0}};

assign tmp_fu_213_p3 = {{constant_matrix_V_offset}, {2'd0}};

assign tmp_s_fu_253_p3 = {{61'd1}, {column_index_0_reg_190}};

assign trunc_ln110_fu_286_p1 = state_matrix_V_q1[12:0];

assign trunc_ln544_1_fu_274_p1 = state_matrix_V_q1[12:0];

assign trunc_ln544_2_fu_282_p1 = state_matrix_V_q0[12:0];

assign trunc_ln544_fu_270_p1 = state_matrix_V_q0[12:0];

assign trunc_ln719_1_fu_380_p1 = constant_matrix_2_V_q0[4:0];

assign trunc_ln719_2_fu_397_p1 = constant_matrix_3_V_q0[4:0];

assign trunc_ln719_fu_358_p1 = constant_matrix_1_V_q0[4:0];

assign trunc_ln78_fu_336_p1 = constant_matrix_0_V_q0[4:0];

assign xor_ln180_fu_242_p2 = (column_index_0_reg_190 ^ 3'd4);

assign xor_ln719_1_fu_430_p2 = (multiplication_V_q1 ^ multiplication_V_q0);

assign xor_ln719_2_fu_436_p2 = (xor_ln719_fu_426_p2 ^ xor_ln719_1_fu_430_p2);

assign xor_ln719_fu_426_p2 = (multiplication_V_loa_reg_563 ^ multiplication_V_loa_1_reg_568);

assign zext_ln101_fu_221_p1 = tmp_fu_213_p3;

assign zext_ln106_fu_237_p1 = column_index_0_reg_190;

assign zext_ln180_18_fu_248_p1 = $unsigned(xor_ln180_fu_242_p2);

assign zext_ln180_19_fu_265_p1 = $unsigned(sext_ln180_fu_262_p1);

assign zext_ln180_20_fu_302_p1 = row_index_0_reg_202;

assign zext_ln180_21_fu_314_p1 = tmp_2_fu_306_p3;

assign zext_ln180_22_fu_422_p1 = add_ln180_reg_518;

assign zext_ln180_fu_278_p1 = column_index_0_reg_190;

assign zext_ln544_fu_328_p1 = add_ln544_fu_323_p2;

assign zext_ln719_1_cast_fu_362_p3 = {{trunc_ln719_fu_358_p1}, {8'd0}};

assign zext_ln719_2_cast_fu_384_p3 = {{trunc_ln719_1_fu_380_p1}, {8'd0}};

assign zext_ln719_3_cast_fu_401_p3 = {{trunc_ln719_2_fu_397_p1}, {8'd0}};

assign zext_ln78_cast_fu_340_p3 = {{trunc_ln78_fu_336_p1}, {8'd0}};

always @ (posedge ap_clk) begin
    zext_ln101_reg_447[1:0] <= 2'b00;
    zext_ln101_reg_447[4] <= 1'b0;
    zext_ln180_reg_495[5:3] <= 3'b000;
end

endmodule //aes_mix_columns8
